(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/Users/salmiju/Documents/koulujutut/information_visualisation/infoviz/app/data/age-mean.csv":[function(require,module,exports){
module.exports = [
  {
    "18": "3.0",
    "19": "2.5",
    "20": "3.571428571428571",
    "21": "2.7",
    "22": "3.181818181818182",
    "23": "2.166666666666667",
    "24": "3.090909090909091",
    "25": "3.052631578947368",
    "26": "2.666666666666667",
    "27": "2.842105263157895",
    "28": "2.818181818181818",
    "29": "2.954545454545455",
    "30": "2.787878787878788",
    "31": "2.423076923076923",
    "32": "3.028571428571429",
    "33": "3.0",
    "34": "2.576923076923077",
    "35": "2.96875",
    "36": "3.366666666666667",
    "37": "3.102564102564103",
    "38": "2.833333333333333",
    "39": "2.974358974358974",
    "40": "3.324324324324324",
    "41": "3.461538461538462",
    "42": "3.37037037037037",
    "43": "3.666666666666667",
    "44": "3.307692307692308",
    "45": "3.708333333333333",
    "46": "3.423076923076923",
    "47": "3.46875",
    "48": "3.694444444444444",
    "49": "3.424242424242424",
    "50": "3.171428571428571",
    "51": "3.515151515151515",
    "52": "3.533333333333333",
    "53": "3.821428571428571",
    "54": "3.296296296296296",
    "55": "3.375",
    "56": "3.5",
    "57": "3.2",
    "58": "3.142857142857143",
    "59": "3.148148148148148",
    "60": "2.952380952380952",
    "61": "3.466666666666667",
    "62": "3.055555555555556",
    "63": "3.55",
    "64": "2.857142857142857",
    "65": "4.133333333333333",
    "66": "3.142857142857143",
    "67": "3.727272727272727",
    "68": "2.333333333333333",
    "69": "2.75",
    "70": "3.4",
    "71": "4.666666666666667",
    "72": "3.0",
    "73": "4.0",
    "74": "4.0",
    "75": "4.0",
    "77": "5.0",
    "NULL": "3.0"
  },
  {
    "18": "3.0",
    "19": "3.0",
    "20": "2.714285714285714",
    "21": "3.4",
    "22": "2.818181818181818",
    "23": "3.0",
    "24": "2.863636363636364",
    "25": "2.684210526315789",
    "26": "2.875",
    "27": "3.026315789473684",
    "28": "2.590909090909091",
    "29": "3.181818181818182",
    "30": "3.03030303030303",
    "31": "3.384615384615385",
    "32": "3.171428571428571",
    "33": "2.5",
    "34": "3.153846153846154",
    "35": "3.40625",
    "36": "2.9",
    "37": "3.0",
    "38": "2.8",
    "39": "2.871794871794872",
    "40": "3.108108108108108",
    "41": "3.5",
    "42": "2.888888888888889",
    "43": "3.37037037037037",
    "44": "3.346153846153846",
    "45": "2.958333333333333",
    "46": "3.230769230769231",
    "47": "3.5",
    "48": "2.916666666666667",
    "49": "3.060606060606061",
    "50": "3.4",
    "51": "3.121212121212121",
    "52": "3.366666666666667",
    "53": "2.75",
    "54": "3.407407407407407",
    "55": "3.25",
    "56": "3.777777777777778",
    "57": "3.36",
    "58": "3.785714285714286",
    "59": "3.592592592592593",
    "60": "3.80952380952381",
    "61": "2.933333333333333",
    "62": "3.833333333333333",
    "63": "3.5",
    "64": "3.428571428571429",
    "65": "2.933333333333333",
    "66": "3.714285714285714",
    "67": "3.636363636363636",
    "68": "4.5",
    "69": "3.5",
    "70": "2.2",
    "71": "4.333333333333333",
    "72": "3.5",
    "73": "4.0",
    "74": "2.5",
    "75": "3.0",
    "77": "2.0",
    "NULL": "3.777777777777778"
  },
  {
    "18": "3.5",
    "19": "1.0",
    "20": "2.428571428571429",
    "21": "2.5",
    "22": "2.636363636363636",
    "23": "2.333333333333333",
    "24": "2.5",
    "25": "2.789473684210526",
    "26": "2.708333333333333",
    "27": "2.473684210526316",
    "28": "3.136363636363636",
    "29": "2.409090909090909",
    "30": "2.545454545454545",
    "31": "1.692307692307692",
    "32": "2.457142857142857",
    "33": "2.708333333333333",
    "34": "1.884615384615385",
    "35": "2.5625",
    "36": "2.4",
    "37": "2.41025641025641",
    "38": "2.4",
    "39": "2.333333333333333",
    "40": "2.243243243243243",
    "41": "2.538461538461538",
    "42": "2.851851851851852",
    "43": "3.111111111111111",
    "44": "2.730769230769231",
    "45": "3.041666666666667",
    "46": "2.423076923076923",
    "47": "2.84375",
    "48": "3.111111111111111",
    "49": "2.727272727272727",
    "50": "2.771428571428571",
    "51": "2.848484848484848",
    "52": "2.9",
    "53": "2.75",
    "54": "2.703703703703704",
    "55": "2.375",
    "56": "2.5",
    "57": "2.48",
    "58": "2.607142857142857",
    "59": "2.777777777777778",
    "60": "2.428571428571429",
    "61": "3.0",
    "62": "2.777777777777778",
    "63": "2.4",
    "64": "2.642857142857143",
    "65": "3.133333333333333",
    "66": "2.857142857142857",
    "67": "2.909090909090909",
    "68": "2.5",
    "69": "2.375",
    "70": "3.2",
    "71": "2.0",
    "72": "3.0",
    "73": "1.0",
    "74": "3.0",
    "75": "2.0",
    "77": "5.0",
    "NULL": "2.222222222222222"
  },
  {
    "18": "3.5",
    "19": "4.0",
    "20": "3.714285714285714",
    "21": "3.9",
    "22": "4.181818181818182",
    "23": "3.5",
    "24": "3.5",
    "25": "3.894736842105263",
    "26": "4.125",
    "27": "4.078947368421053",
    "28": "3.5",
    "29": "3.863636363636364",
    "30": "3.545454545454545",
    "31": "4.269230769230769",
    "32": "3.428571428571429",
    "33": "3.541666666666667",
    "34": "3.730769230769231",
    "35": "3.5",
    "36": "3.233333333333333",
    "37": "3.333333333333333",
    "38": "3.533333333333333",
    "39": "3.282051282051282",
    "40": "3.324324324324324",
    "41": "3.307692307692308",
    "42": "3.185185185185185",
    "43": "2.962962962962963",
    "44": "3.153846153846154",
    "45": "3.416666666666667",
    "46": "3.115384615384615",
    "47": "2.84375",
    "48": "2.777777777777778",
    "49": "2.848484848484848",
    "50": "2.885714285714286",
    "51": "2.939393939393939",
    "52": "3.366666666666667",
    "53": "3.142857142857143",
    "54": "3.444444444444444",
    "55": "3.5",
    "56": "3.166666666666667",
    "57": "3.2",
    "58": "3.071428571428571",
    "59": "2.814814814814815",
    "60": "3.285714285714286",
    "61": "2.866666666666667",
    "62": "3.055555555555556",
    "63": "3.15",
    "64": "3.0",
    "65": "2.6",
    "66": "3.142857142857143",
    "67": "3.272727272727273",
    "68": "2.5",
    "69": "2.875",
    "70": "3.2",
    "71": "4.333333333333333",
    "72": "3.0",
    "73": "4.0",
    "74": "3.0",
    "75": "4.0",
    "77": "5.0",
    "NULL": "3.481481481481481"
  },
  {
    "18": "2.5",
    "19": "2.5",
    "20": "2.571428571428571",
    "21": "2.5",
    "22": "2.818181818181818",
    "23": "2.166666666666667",
    "24": "2.772727272727273",
    "25": "3.0",
    "26": "2.875",
    "27": "2.763157894736842",
    "28": "3.090909090909091",
    "29": "3.045454545454545",
    "30": "2.878787878787879",
    "31": "2.461538461538462",
    "32": "3.057142857142857",
    "33": "3.291666666666667",
    "34": "2.5",
    "35": "3.15625",
    "36": "3.3",
    "37": "3.128205128205128",
    "38": "2.8",
    "39": "2.717948717948718",
    "40": "3.243243243243243",
    "41": "3.230769230769231",
    "42": "3.518518518518519",
    "43": "3.703703703703704",
    "44": "3.192307692307692",
    "45": "3.833333333333333",
    "46": "3.384615384615385",
    "47": "3.40625",
    "48": "3.611111111111111",
    "49": "3.212121212121212",
    "50": "3.085714285714286",
    "51": "3.363636363636364",
    "52": "3.4",
    "53": "4.0",
    "54": "3.259259259259259",
    "55": "3.3125",
    "56": "2.833333333333333",
    "57": "3.2",
    "58": "3.142857142857143",
    "59": "3.111111111111111",
    "60": "3.142857142857143",
    "61": "3.466666666666667",
    "62": "3.388888888888889",
    "63": "3.1",
    "64": "3.142857142857143",
    "65": "4.066666666666667",
    "66": "3.285714285714286",
    "67": "3.272727272727273",
    "68": "1.5",
    "69": "1.75",
    "70": "3.4",
    "71": "4.333333333333333",
    "72": "3.0",
    "73": "4.0",
    "74": "5.0",
    "75": "4.0",
    "77": "5.0",
    "NULL": "3.666666666666667"
  },
  {
    "18": "3.0",
    "19": "1.5",
    "20": "2.428571428571429",
    "21": "3.5",
    "22": "3.454545454545455",
    "23": "4.0",
    "24": "3.545454545454545",
    "25": "3.421052631578947",
    "26": "3.375",
    "27": "3.236842105263158",
    "28": "3.272727272727273",
    "29": "3.272727272727273",
    "30": "3.181818181818182",
    "31": "3.153846153846154",
    "32": "3.628571428571429",
    "33": "4.041666666666667",
    "34": "3.384615384615385",
    "35": "3.25",
    "36": "3.433333333333333",
    "37": "3.205128205128205",
    "38": "2.833333333333333",
    "39": "3.435897435897436",
    "40": "3.135135135135135",
    "41": "2.692307692307692",
    "42": "3.555555555555556",
    "43": "3.148148148148148",
    "44": "3.384615384615385",
    "45": "3.916666666666667",
    "46": "3.038461538461538",
    "47": "3.28125",
    "48": "3.472222222222222",
    "49": "3.121212121212121",
    "50": "3.257142857142857",
    "51": "3.363636363636364",
    "52": "3.266666666666667",
    "53": "3.178571428571429",
    "54": "3.148148148148148",
    "55": "2.375",
    "56": "3.166666666666667",
    "57": "3.2",
    "58": "3.071428571428571",
    "59": "3.074074074074074",
    "60": "3.333333333333333",
    "61": "2.466666666666667",
    "62": "2.888888888888889",
    "63": "2.55",
    "64": "2.357142857142857",
    "65": "3.066666666666667",
    "66": "2.142857142857143",
    "67": "2.727272727272727",
    "68": "2.0",
    "69": "1.5",
    "70": "3.2",
    "71": "4.666666666666667",
    "72": "3.0",
    "73": "4.5",
    "74": "2.0",
    "75": "4.0",
    "77": "2.0",
    "NULL": "3.259259259259259"
  },
  {
    "18": "2.0",
    "19": "1.5",
    "20": "3.0",
    "21": "2.9",
    "22": "2.272727272727273",
    "23": "2.0",
    "24": "2.090909090909091",
    "25": "2.631578947368421",
    "26": "2.083333333333333",
    "27": "1.842105263157895",
    "28": "2.181818181818182",
    "29": "2.0",
    "30": "2.696969696969697",
    "31": "2.192307692307692",
    "32": "2.285714285714286",
    "33": "2.0",
    "34": "1.961538461538462",
    "35": "2.59375",
    "36": "2.633333333333333",
    "37": "2.666666666666667",
    "38": "2.433333333333333",
    "39": "2.717948717948718",
    "40": "2.945945945945946",
    "41": "2.807692307692308",
    "42": "2.814814814814815",
    "43": "3.259259259259259",
    "44": "2.692307692307692",
    "45": "3.416666666666667",
    "46": "2.884615384615385",
    "47": "3.21875",
    "48": "3.166666666666667",
    "49": "2.939393939393939",
    "50": "2.428571428571429",
    "51": "3.060606060606061",
    "52": "2.9",
    "53": "3.357142857142857",
    "54": "2.888888888888889",
    "55": "3.1875",
    "56": "2.611111111111111",
    "57": "2.8",
    "58": "2.535714285714286",
    "59": "3.037037037037037",
    "60": "2.380952380952381",
    "61": "3.066666666666667",
    "62": "2.611111111111111",
    "63": "3.25",
    "64": "2.785714285714286",
    "65": "3.333333333333333",
    "66": "3.142857142857143",
    "67": "2.727272727272727",
    "68": "2.166666666666667",
    "69": "2.25",
    "70": "3.2",
    "71": "4.333333333333333",
    "72": "3.0",
    "73": "3.0",
    "74": "4.0",
    "75": "4.0",
    "77": "5.0",
    "NULL": "3.037037037037037"
  },
  {
    "18": "3.0",
    "19": "3.0",
    "20": "2.142857142857143",
    "21": "2.2",
    "22": "2.636363636363636",
    "23": "3.0",
    "24": "2.409090909090909",
    "25": "2.0",
    "26": "2.5",
    "27": "2.526315789473684",
    "28": "3.0",
    "29": "2.772727272727273",
    "30": "2.96969696969697",
    "31": "2.576923076923077",
    "32": "2.542857142857143",
    "33": "2.583333333333333",
    "34": "2.538461538461538",
    "35": "2.75",
    "36": "3.133333333333333",
    "37": "3.051282051282051",
    "38": "2.9",
    "39": "3.051282051282051",
    "40": "3.027027027027027",
    "41": "3.038461538461538",
    "42": "2.851851851851852",
    "43": "2.814814814814815",
    "44": "2.653846153846154",
    "45": "3.0",
    "46": "2.884615384615385",
    "47": "3.34375",
    "48": "3.055555555555556",
    "49": "2.636363636363636",
    "50": "3.257142857142857",
    "51": "2.575757575757576",
    "52": "2.9",
    "53": "2.464285714285714",
    "54": "2.740740740740741",
    "55": "2.875",
    "56": "3.333333333333333",
    "57": "2.72",
    "58": "2.857142857142857",
    "59": "2.888888888888889",
    "60": "2.857142857142857",
    "61": "2.8",
    "62": "2.888888888888889",
    "63": "2.85",
    "64": "3.142857142857143",
    "65": "2.866666666666667",
    "66": "4.428571428571429",
    "67": "3.0",
    "68": "3.5",
    "69": "1.875",
    "70": "3.6",
    "71": "2.333333333333333",
    "72": "2.5",
    "73": "2.5",
    "74": "3.0",
    "75": "2.0",
    "77": "5.0",
    "NULL": "2.962962962962963"
  },
  {
    "18": "4.5",
    "19": "4.5",
    "20": "4.142857142857143",
    "21": "4.4",
    "22": "4.545454545454545",
    "23": "4.0",
    "24": "4.090909090909091",
    "25": "4.105263157894737",
    "26": "4.0",
    "27": "4.052631578947368",
    "28": "3.863636363636364",
    "29": "3.727272727272727",
    "30": "3.909090909090909",
    "31": "4.115384615384615",
    "32": "4.142857142857143",
    "33": "3.958333333333333",
    "34": "3.769230769230769",
    "35": "3.46875",
    "36": "3.466666666666667",
    "37": "3.512820512820513",
    "38": "3.7",
    "39": "3.307692307692308",
    "40": "3.459459459459459",
    "41": "3.5",
    "42": "3.962962962962963",
    "43": "2.814814814814815",
    "44": "2.807692307692308",
    "45": "3.333333333333333",
    "46": "3.538461538461538",
    "47": "2.90625",
    "48": "2.916666666666667",
    "49": "3.393939393939394",
    "50": "3.0",
    "51": "3.303030303030303",
    "52": "2.666666666666667",
    "53": "2.857142857142857",
    "54": "3.074074074074074",
    "55": "2.625",
    "56": "2.888888888888889",
    "57": "2.84",
    "58": "2.892857142857143",
    "59": "3.148148148148148",
    "60": "3.095238095238095",
    "61": "2.733333333333333",
    "62": "2.833333333333333",
    "63": "1.95",
    "64": "2.5",
    "65": "2.533333333333333",
    "66": "3.0",
    "67": "2.909090909090909",
    "68": "2.5",
    "69": "2.375",
    "70": "1.8",
    "71": "3.666666666666667",
    "72": "4.0",
    "73": "2.5",
    "74": "2.5",
    "75": "1.0",
    "77": "2.0",
    "NULL": "2.777777777777778"
  },
  {
    "18": "1.5",
    "19": "1.5",
    "20": "3.285714285714286",
    "21": "2.1",
    "22": "2.909090909090909",
    "23": "1.5",
    "24": "2.318181818181818",
    "25": "2.368421052631579",
    "26": "2.166666666666667",
    "27": "2.447368421052632",
    "28": "2.136363636363636",
    "29": "2.363636363636364",
    "30": "2.515151515151515",
    "31": "2.192307692307692",
    "32": "2.371428571428571",
    "33": "1.833333333333333",
    "34": "2.230769230769231",
    "35": "2.40625",
    "36": "2.533333333333333",
    "37": "2.307692307692308",
    "38": "2.166666666666667",
    "39": "2.179487179487179",
    "40": "2.243243243243243",
    "41": "2.423076923076923",
    "42": "1.925925925925926",
    "43": "2.037037037037037",
    "44": "2.153846153846154",
    "45": "2.333333333333333",
    "46": "2.346153846153846",
    "47": "2.25",
    "48": "1.777777777777778",
    "49": "2.181818181818182",
    "50": "2.085714285714286",
    "51": "2.03030303030303",
    "52": "2.066666666666667",
    "53": "2.107142857142857",
    "54": "2.222222222222222",
    "55": "1.6875",
    "56": "2.111111111111111",
    "57": "2.12",
    "58": "2.214285714285714",
    "59": "2.037037037037037",
    "60": "2.285714285714286",
    "61": "2.266666666666667",
    "62": "1.777777777777778",
    "63": "2.1",
    "64": "1.928571428571429",
    "65": "2.0",
    "66": "2.857142857142857",
    "67": "2.272727272727273",
    "68": "1.833333333333333",
    "69": "1.5",
    "70": "2.6",
    "71": "1.333333333333333",
    "72": "2.5",
    "73": "1.5",
    "74": "3.0",
    "75": "1.0",
    "77": "2.0",
    "NULL": "2.148148148148148"
  },
  {
    "18": "2.5",
    "19": "1.5",
    "20": "2.142857142857143",
    "21": "2.3",
    "22": "2.454545454545455",
    "23": "2.5",
    "24": "2.181818181818182",
    "25": "2.578947368421053",
    "26": "2.041666666666667",
    "27": "2.0",
    "28": "2.318181818181818",
    "29": "1.954545454545455",
    "30": "1.787878787878788",
    "31": "1.807692307692308",
    "32": "2.028571428571429",
    "33": "1.875",
    "34": "1.461538461538462",
    "35": "2.03125",
    "36": "2.0",
    "37": "2.102564102564103",
    "38": "1.766666666666667",
    "39": "1.923076923076923",
    "40": "1.702702702702703",
    "41": "1.807692307692308",
    "42": "2.333333333333333",
    "43": "2.481481481481481",
    "44": "1.692307692307692",
    "45": "2.541666666666667",
    "46": "2.115384615384615",
    "47": "2.21875",
    "48": "1.972222222222222",
    "49": "2.0",
    "50": "1.971428571428571",
    "51": "1.909090909090909",
    "52": "2.1",
    "53": "2.678571428571429",
    "54": "2.222222222222222",
    "55": "1.8125",
    "56": "1.944444444444444",
    "57": "1.88",
    "58": "1.964285714285714",
    "59": "1.555555555555556",
    "60": "1.714285714285714",
    "61": "2.066666666666667",
    "62": "2.055555555555556",
    "63": "1.95",
    "64": "1.857142857142857",
    "65": "2.6",
    "66": "1.714285714285714",
    "67": "2.0",
    "68": "1.166666666666667",
    "69": "1.5",
    "70": "2.2",
    "71": "3.666666666666667",
    "72": "3.0",
    "73": "3.0",
    "74": "3.0",
    "75": "2.0",
    "77": "5.0",
    "NULL": "2.148148148148148"
  },
  {
    "18": "3.0",
    "19": "4.5",
    "20": "3.0",
    "21": "3.1",
    "22": "1.818181818181818",
    "23": "4.333333333333333",
    "24": "3.272727272727273",
    "25": "3.105263157894737",
    "26": "3.333333333333333",
    "27": "2.947368421052632",
    "28": "2.409090909090909",
    "29": "3.045454545454545",
    "30": "3.121212121212121",
    "31": "3.307692307692308",
    "32": "3.028571428571429",
    "33": "3.083333333333333",
    "34": "3.384615384615385",
    "35": "3.125",
    "36": "3.066666666666667",
    "37": "3.230769230769231",
    "38": "3.366666666666667",
    "39": "3.564102564102564",
    "40": "3.378378378378378",
    "41": "3.423076923076923",
    "42": "3.703703703703704",
    "43": "3.703703703703704",
    "44": "3.538461538461538",
    "45": "3.541666666666667",
    "46": "3.769230769230769",
    "47": "3.84375",
    "48": "3.638888888888889",
    "49": "3.515151515151515",
    "50": "3.828571428571429",
    "51": "3.666666666666667",
    "52": "3.666666666666667",
    "53": "3.821428571428571",
    "54": "3.666666666666667",
    "55": "3.9375",
    "56": "3.722222222222222",
    "57": "3.68",
    "58": "4.035714285714286",
    "59": "4.074074074074074",
    "60": "4.19047619047619",
    "61": "3.8",
    "62": "3.944444444444444",
    "63": "4.0",
    "64": "3.785714285714286",
    "65": "4.066666666666667",
    "66": "4.571428571428571",
    "67": "4.545454545454545",
    "68": "3.666666666666667",
    "69": "4.125",
    "70": "4.4",
    "71": "4.666666666666667",
    "72": "3.5",
    "73": "4.0",
    "74": "3.0",
    "75": "5.0",
    "77": "2.0",
    "NULL": "4.222222222222222"
  },
  {
    "18": "3.5",
    "19": "2.0",
    "20": "2.857142857142857",
    "21": "2.4",
    "22": "2.636363636363636",
    "23": "2.5",
    "24": "2.727272727272727",
    "25": "3.0",
    "26": "2.541666666666667",
    "27": "2.368421052631579",
    "28": "2.5",
    "29": "2.545454545454545",
    "30": "2.363636363636364",
    "31": "2.038461538461538",
    "32": "2.4",
    "33": "2.791666666666667",
    "34": "2.115384615384615",
    "35": "2.4375",
    "36": "2.566666666666667",
    "37": "2.743589743589744",
    "38": "2.233333333333333",
    "39": "2.41025641025641",
    "40": "2.378378378378378",
    "41": "2.423076923076923",
    "42": "2.518518518518519",
    "43": "2.888888888888889",
    "44": "2.692307692307692",
    "45": "2.75",
    "46": "2.576923076923077",
    "47": "2.84375",
    "48": "2.75",
    "49": "2.666666666666667",
    "50": "2.342857142857143",
    "51": "2.515151515151515",
    "52": "2.7",
    "53": "3.392857142857143",
    "54": "2.925925925925926",
    "55": "2.4375",
    "56": "2.388888888888889",
    "57": "2.56",
    "58": "2.464285714285714",
    "59": "2.555555555555556",
    "60": "2.571428571428571",
    "61": "2.733333333333333",
    "62": "2.555555555555556",
    "63": "2.7",
    "64": "2.5",
    "65": "3.066666666666667",
    "66": "2.857142857142857",
    "67": "2.818181818181818",
    "68": "1.833333333333333",
    "69": "2.375",
    "70": "2.4",
    "71": "4.333333333333333",
    "72": "2.5",
    "73": "3.0",
    "74": "3.0",
    "75": "1.0",
    "77": "5.0",
    "NULL": "2.777777777777778"
  },
  {
    "18": "4.0",
    "19": "3.5",
    "20": "3.428571428571429",
    "21": "3.5",
    "22": "3.363636363636364",
    "23": "4.5",
    "24": "3.681818181818182",
    "25": "3.368421052631579",
    "26": "3.625",
    "27": "3.078947368421053",
    "28": "3.590909090909091",
    "29": "3.454545454545455",
    "30": "3.0",
    "31": "3.461538461538462",
    "32": "3.685714285714286",
    "33": "3.708333333333333",
    "34": "3.884615384615385",
    "35": "3.5",
    "36": "3.433333333333333",
    "37": "3.435897435897436",
    "38": "3.333333333333333",
    "39": "3.58974358974359",
    "40": "3.540540540540541",
    "41": "3.653846153846154",
    "42": "3.888888888888889",
    "43": "3.888888888888889",
    "44": "3.538461538461538",
    "45": "3.5",
    "46": "3.884615384615385",
    "47": "3.34375",
    "48": "3.555555555555556",
    "49": "3.818181818181818",
    "50": "3.771428571428571",
    "51": "3.515151515151515",
    "52": "3.233333333333333",
    "53": "3.857142857142857",
    "54": "3.518518518518519",
    "55": "3.0",
    "56": "3.388888888888889",
    "57": "3.6",
    "58": "3.5",
    "59": "3.666666666666667",
    "60": "3.476190476190476",
    "61": "3.0",
    "62": "3.777777777777778",
    "63": "3.9",
    "64": "4.071428571428571",
    "65": "3.8",
    "66": "4.142857142857143",
    "67": "3.727272727272727",
    "68": "3.0",
    "69": "4.0",
    "70": "3.2",
    "71": "4.333333333333333",
    "72": "4.5",
    "73": "4.0",
    "74": "4.5",
    "75": "5.0",
    "77": "5.0",
    "NULL": "4.111111111111111"
  },
  {
    "18": "3.5",
    "19": "2.5",
    "20": "3.571428571428571",
    "21": "3.5",
    "22": "3.818181818181818",
    "23": "3.5",
    "24": "3.136363636363636",
    "25": "3.736842105263158",
    "26": "3.333333333333333",
    "27": "3.342105263157895",
    "28": "3.636363636363636",
    "29": "3.181818181818182",
    "30": "3.090909090909091",
    "31": "3.115384615384615",
    "32": "3.0",
    "33": "3.291666666666667",
    "34": "2.961538461538462",
    "35": "3.28125",
    "36": "2.866666666666667",
    "37": "2.538461538461538",
    "38": "3.133333333333333",
    "39": "2.384615384615385",
    "40": "2.864864864864865",
    "41": "2.384615384615385",
    "42": "3.148148148148148",
    "43": "2.444444444444444",
    "44": "2.307692307692308",
    "45": "2.791666666666667",
    "46": "3.230769230769231",
    "47": "2.65625",
    "48": "2.416666666666667",
    "49": "2.666666666666667",
    "50": "2.371428571428571",
    "51": "2.696969696969697",
    "52": "2.6",
    "53": "2.642857142857143",
    "54": "2.777777777777778",
    "55": "2.4375",
    "56": "3.055555555555556",
    "57": "2.8",
    "58": "2.25",
    "59": "2.259259259259259",
    "60": "2.285714285714286",
    "61": "2.266666666666667",
    "62": "2.722222222222222",
    "63": "2.6",
    "64": "2.928571428571429",
    "65": "2.466666666666667",
    "66": "2.714285714285714",
    "67": "2.545454545454545",
    "68": "1.833333333333333",
    "69": "2.75",
    "70": "1.8",
    "71": "2.666666666666667",
    "72": "2.0",
    "73": "2.0",
    "74": "2.0",
    "75": "1.0",
    "77": "5.0",
    "NULL": "3.0"
  },
  {
    "18": "4.0",
    "19": "2.5",
    "20": "4.714285714285714",
    "21": "3.8",
    "22": "4.0",
    "23": "2.333333333333333",
    "24": "3.454545454545455",
    "25": "3.789473684210526",
    "26": "3.333333333333333",
    "27": "3.973684210526316",
    "28": "3.363636363636364",
    "29": "3.409090909090909",
    "30": "3.515151515151515",
    "31": "3.423076923076923",
    "32": "3.228571428571429",
    "33": "3.041666666666667",
    "34": "3.423076923076923",
    "35": "3.625",
    "36": "3.633333333333333",
    "37": "3.615384615384615",
    "38": "3.6",
    "39": "3.769230769230769",
    "40": "3.783783783783784",
    "41": "3.769230769230769",
    "42": "3.37037037037037",
    "43": "3.407407407407407",
    "44": "3.538461538461538",
    "45": "3.166666666666667",
    "46": "3.923076923076923",
    "47": "3.3125",
    "48": "3.194444444444444",
    "49": "3.484848484848485",
    "50": "3.228571428571429",
    "51": "3.454545454545455",
    "52": "3.5",
    "53": "3.214285714285714",
    "54": "3.148148148148148",
    "55": "3.5",
    "56": "3.166666666666667",
    "57": "3.4",
    "58": "3.75",
    "59": "3.518518518518519",
    "60": "3.380952380952381",
    "61": "3.2",
    "62": "3.166666666666667",
    "63": "2.9",
    "64": "3.214285714285714",
    "65": "3.333333333333333",
    "66": "3.857142857142857",
    "67": "3.090909090909091",
    "68": "3.833333333333333",
    "69": "3.125",
    "70": "2.8",
    "71": "1.666666666666667",
    "72": "3.5",
    "73": "1.5",
    "74": "2.5",
    "75": "1.0",
    "77": "2.0",
    "NULL": "3.074074074074074"
  },
  {
    "18": "3.0",
    "19": "3.5",
    "20": "2.857142857142857",
    "21": "2.6",
    "22": "2.727272727272727",
    "23": "3.666666666666667",
    "24": "3.0",
    "25": "2.894736842105263",
    "26": "3.291666666666667",
    "27": "3.157894736842105",
    "28": "3.090909090909091",
    "29": "2.818181818181818",
    "30": "3.515151515151515",
    "31": "3.884615384615385",
    "32": "3.0",
    "33": "2.916666666666667",
    "34": "3.653846153846154",
    "35": "3.21875",
    "36": "3.0",
    "37": "3.282051282051282",
    "38": "3.166666666666667",
    "39": "3.435897435897436",
    "40": "3.054054054054054",
    "41": "3.038461538461538",
    "42": "2.814814814814815",
    "43": "2.851851851851852",
    "44": "3.038461538461538",
    "45": "2.5",
    "46": "3.115384615384615",
    "47": "2.59375",
    "48": "2.666666666666667",
    "49": "2.878787878787879",
    "50": "2.971428571428571",
    "51": "2.484848484848485",
    "52": "2.866666666666667",
    "53": "2.142857142857143",
    "54": "2.703703703703704",
    "55": "2.9375",
    "56": "3.333333333333333",
    "57": "3.32",
    "58": "3.035714285714286",
    "59": "2.962962962962963",
    "60": "3.142857142857143",
    "61": "2.466666666666667",
    "62": "2.666666666666667",
    "63": "2.75",
    "64": "3.428571428571429",
    "65": "2.8",
    "66": "4.428571428571429",
    "67": "3.636363636363636",
    "68": "4.0",
    "69": "4.0",
    "70": "3.4",
    "71": "2.0",
    "72": "3.5",
    "73": "2.0",
    "74": "3.0",
    "75": "3.0",
    "77": "4.0",
    "NULL": "2.814814814814815"
  },
  {
    "18": "2.5",
    "19": "1.5",
    "20": "2.142857142857143",
    "21": "1.7",
    "22": "2.727272727272727",
    "23": "1.666666666666667",
    "24": "2.227272727272727",
    "25": "2.684210526315789",
    "26": "2.25",
    "27": "2.157894736842105",
    "28": "2.409090909090909",
    "29": "2.0",
    "30": "2.090909090909091",
    "31": "2.038461538461538",
    "32": "1.885714285714286",
    "33": "2.0",
    "34": "1.692307692307692",
    "35": "2.09375",
    "36": "2.1",
    "37": "2.282051282051282",
    "38": "2.233333333333333",
    "39": "1.974358974358974",
    "40": "1.972972972972973",
    "41": "2.115384615384615",
    "42": "2.259259259259259",
    "43": "2.444444444444444",
    "44": "1.923076923076923",
    "45": "2.541666666666667",
    "46": "2.230769230769231",
    "47": "2.375",
    "48": "2.194444444444444",
    "49": "2.121212121212121",
    "50": "1.885714285714286",
    "51": "2.090909090909091",
    "52": "1.966666666666667",
    "53": "2.535714285714286",
    "54": "2.037037037037037",
    "55": "2.125",
    "56": "1.777777777777778",
    "57": "1.96",
    "58": "2.142857142857143",
    "59": "1.851851851851852",
    "60": "1.619047619047619",
    "61": "2.066666666666667",
    "62": "1.777777777777778",
    "63": "2.1",
    "64": "1.428571428571429",
    "65": "2.466666666666667",
    "66": "3.0",
    "67": "2.090909090909091",
    "68": "1.0",
    "69": "1.875",
    "70": "2.0",
    "71": "2.666666666666667",
    "72": "2.5",
    "73": "1.0",
    "74": "3.0",
    "75": "3.0",
    "77": "4.0",
    "NULL": "1.777777777777778"
  },
  {
    "18": "3.0",
    "19": "3.0",
    "20": "3.142857142857143",
    "21": "3.4",
    "22": "3.181818181818182",
    "23": "3.166666666666667",
    "24": "3.636363636363636",
    "25": "3.210526315789474",
    "26": "3.208333333333333",
    "27": "2.894736842105263",
    "28": "3.454545454545455",
    "29": "3.181818181818182",
    "30": "2.818181818181818",
    "31": "2.384615384615385",
    "32": "3.028571428571429",
    "33": "3.125",
    "34": "2.884615384615385",
    "35": "3.375",
    "36": "3.433333333333333",
    "37": "3.307692307692308",
    "38": "3.4",
    "39": "3.282051282051282",
    "40": "3.594594594594595",
    "41": "3.576923076923077",
    "42": "4.592592592592593",
    "43": "3.740740740740741",
    "44": "3.807692307692308",
    "45": "4.083333333333333",
    "46": "3.615384615384615",
    "47": "3.75",
    "48": "4.194444444444444",
    "49": "4.060606060606061",
    "50": "3.742857142857143",
    "51": "4.090909090909091",
    "52": "3.8",
    "53": "4.321428571428571",
    "54": "3.888888888888889",
    "55": "3.875",
    "56": "4.166666666666667",
    "57": "3.92",
    "58": "3.892857142857143",
    "59": "4.0",
    "60": "3.333333333333333",
    "61": "3.8",
    "62": "3.666666666666667",
    "63": "3.75",
    "64": "3.357142857142857",
    "65": "4.266666666666667",
    "66": "3.714285714285714",
    "67": "3.727272727272727",
    "68": "2.833333333333333",
    "69": "2.25",
    "70": "3.2",
    "71": "4.666666666666667",
    "72": "3.0",
    "73": "4.5",
    "74": "5.0",
    "75": "4.0",
    "77": "4.0",
    "NULL": "3.814814814814815"
  },
  {
    "18": "2.5",
    "19": "1.5",
    "20": "2.285714285714286",
    "21": "2.5",
    "22": "1.727272727272727",
    "23": "3.166666666666667",
    "24": "2.681818181818182",
    "25": "2.157894736842105",
    "26": "2.541666666666667",
    "27": "2.157894736842105",
    "28": "2.636363636363636",
    "29": "2.5",
    "30": "2.515151515151515",
    "31": "2.423076923076923",
    "32": "2.314285714285714",
    "33": "2.875",
    "34": "2.538461538461538",
    "35": "2.65625",
    "36": "2.566666666666667",
    "37": "2.666666666666667",
    "38": "2.8",
    "39": "2.666666666666667",
    "40": "2.945945945945946",
    "41": "3.076923076923077",
    "42": "3.037037037037037",
    "43": "3.185185185185185",
    "44": "3.115384615384615",
    "45": "3.291666666666667",
    "46": "2.730769230769231",
    "47": "3.21875",
    "48": "3.388888888888889",
    "49": "3.272727272727273",
    "50": "3.228571428571429",
    "51": "3.03030303030303",
    "52": "3.1",
    "53": "3.0",
    "54": "3.518518518518519",
    "55": "3.0",
    "56": "3.777777777777778",
    "57": "3.32",
    "58": "2.964285714285714",
    "59": "3.407407407407407",
    "60": "3.19047619047619",
    "61": "3.066666666666667",
    "62": "3.277777777777778",
    "63": "2.95",
    "64": "2.571428571428571",
    "65": "3.533333333333333",
    "66": "2.714285714285714",
    "67": "2.545454545454545",
    "68": "3.5",
    "69": "2.5",
    "70": "3.6",
    "71": "4.333333333333333",
    "72": "4.0",
    "73": "4.5",
    "74": "3.0",
    "75": "5.0",
    "77": "1.0",
    "NULL": "3.148148148148148"
  },
  {
    "18": "4.5",
    "19": "5.0",
    "20": "4.714285714285714",
    "21": "4.3",
    "22": "4.909090909090909",
    "23": "4.0",
    "24": "4.590909090909091",
    "25": "4.210526315789474",
    "26": "4.666666666666667",
    "27": "4.631578947368421",
    "28": "4.136363636363636",
    "29": "4.363636363636364",
    "30": "4.303030303030303",
    "31": "4.730769230769231",
    "32": "4.228571428571429",
    "33": "4.208333333333333",
    "34": "4.461538461538462",
    "35": "4.40625",
    "36": "4.1",
    "37": "4.282051282051282",
    "38": "4.133333333333333",
    "39": "4.0",
    "40": "4.108108108108108",
    "41": "3.884615384615385",
    "42": "3.555555555555556",
    "43": "3.407407407407407",
    "44": "3.692307692307692",
    "45": "3.416666666666667",
    "46": "3.769230769230769",
    "47": "3.5",
    "48": "2.833333333333333",
    "49": "3.393939393939394",
    "50": "3.657142857142857",
    "51": "3.181818181818182",
    "52": "3.566666666666667",
    "53": "2.892857142857143",
    "54": "3.111111111111111",
    "55": "2.75",
    "56": "3.166666666666667",
    "57": "3.2",
    "58": "3.357142857142857",
    "59": "3.296296296296296",
    "60": "3.666666666666667",
    "61": "2.666666666666667",
    "62": "2.777777777777778",
    "63": "3.15",
    "64": "3.357142857142857",
    "65": "2.6",
    "66": "3.714285714285714",
    "67": "3.272727272727273",
    "68": "3.833333333333333",
    "69": "4.5",
    "70": "2.8",
    "71": "1.666666666666667",
    "72": "3.0",
    "73": "1.0",
    "74": "2.0",
    "75": "1.0",
    "77": "1.0",
    "NULL": "3.111111111111111"
  },
  {
    "18": "4.0",
    "19": "5.0",
    "20": "4.428571428571429",
    "21": "3.8",
    "22": "4.272727272727273",
    "23": "3.166666666666667",
    "24": "3.545454545454545",
    "25": "3.894736842105263",
    "26": "3.916666666666667",
    "27": "4.210526315789474",
    "28": "3.636363636363636",
    "29": "3.272727272727273",
    "30": "3.848484848484848",
    "31": "4.153846153846154",
    "32": "3.142857142857143",
    "33": "3.125",
    "34": "4.115384615384615",
    "35": "3.84375",
    "36": "3.766666666666667",
    "37": "3.435897435897436",
    "38": "3.633333333333333",
    "39": "3.769230769230769",
    "40": "3.756756756756757",
    "41": "3.576923076923077",
    "42": "2.925925925925926",
    "43": "3.222222222222222",
    "44": "3.384615384615385",
    "45": "3.0",
    "46": "3.846153846153846",
    "47": "3.8125",
    "48": "3.166666666666667",
    "49": "3.212121212121212",
    "50": "3.342857142857143",
    "51": "3.242424242424242",
    "52": "3.533333333333333",
    "53": "3.464285714285714",
    "54": "3.592592592592593",
    "55": "3.3125",
    "56": "3.722222222222222",
    "57": "3.68",
    "58": "4.071428571428571",
    "59": "3.37037037037037",
    "60": "3.571428571428571",
    "61": "3.333333333333333",
    "62": "3.611111111111111",
    "63": "3.9",
    "64": "3.571428571428571",
    "65": "3.066666666666667",
    "66": "4.428571428571429",
    "67": "4.363636363636364",
    "68": "4.0",
    "69": "4.25",
    "70": "3.4",
    "71": "1.333333333333333",
    "72": "1.0",
    "73": "3.0",
    "74": "3.5",
    "75": "2.0",
    "77": "5.0",
    "NULL": "3.592592592592593"
  },
  {
    "18": "1.5",
    "19": "1.0",
    "20": "3.0",
    "21": "3.0",
    "22": "2.272727272727273",
    "23": "2.5",
    "24": "2.681818181818182",
    "25": "2.210526315789474",
    "26": "2.291666666666667",
    "27": "2.184210526315789",
    "28": "2.5",
    "29": "2.363636363636364",
    "30": "3.0",
    "31": "2.5",
    "32": "2.6",
    "33": "3.0",
    "34": "2.423076923076923",
    "35": "3.03125",
    "36": "3.1",
    "37": "2.615384615384615",
    "38": "2.3",
    "39": "2.820512820512821",
    "40": "2.594594594594595",
    "41": "2.846153846153846",
    "42": "3.074074074074074",
    "43": "3.592592592592593",
    "44": "3.153846153846154",
    "45": "3.875",
    "46": "3.076923076923077",
    "47": "3.125",
    "48": "3.055555555555556",
    "49": "2.96969696969697",
    "50": "2.657142857142857",
    "51": "3.151515151515152",
    "52": "2.766666666666667",
    "53": "3.071428571428571",
    "54": "3.111111111111111",
    "55": "2.3125",
    "56": "3.444444444444444",
    "57": "2.48",
    "58": "2.642857142857143",
    "59": "3.0",
    "60": "2.333333333333333",
    "61": "2.866666666666667",
    "62": "2.888888888888889",
    "63": "2.55",
    "64": "2.571428571428571",
    "65": "3.533333333333333",
    "66": "3.0",
    "67": "3.090909090909091",
    "68": "1.166666666666667",
    "69": "2.75",
    "70": "3.0",
    "71": "4.333333333333333",
    "72": "5.0",
    "73": "3.0",
    "74": "3.5",
    "75": "3.0",
    "77": "4.0",
    "NULL": "3.111111111111111"
  },
  {
    "18": "3.0",
    "19": "1.5",
    "20": "2.571428571428571",
    "21": "2.8",
    "22": "2.363636363636364",
    "23": "2.833333333333333",
    "24": "3.0",
    "25": "2.631578947368421",
    "26": "2.5",
    "27": "2.210526315789474",
    "28": "2.272727272727273",
    "29": "2.590909090909091",
    "30": "2.575757575757576",
    "31": "2.5",
    "32": "2.8",
    "33": "2.916666666666667",
    "34": "2.5",
    "35": "2.65625",
    "36": "3.066666666666667",
    "37": "3.076923076923077",
    "38": "3.4",
    "39": "3.051282051282051",
    "40": "3.243243243243243",
    "41": "3.576923076923077",
    "42": "3.777777777777778",
    "43": "4.111111111111111",
    "44": "3.461538461538462",
    "45": "3.708333333333333",
    "46": "3.346153846153846",
    "47": "3.59375",
    "48": "3.916666666666667",
    "49": "3.727272727272727",
    "50": "3.428571428571429",
    "51": "3.757575757575758",
    "52": "3.866666666666667",
    "53": "4.25",
    "54": "3.814814814814815",
    "55": "3.75",
    "56": "3.611111111111111",
    "57": "3.36",
    "58": "3.464285714285714",
    "59": "4.037037037037037",
    "60": "3.047619047619048",
    "61": "3.933333333333333",
    "62": "3.333333333333333",
    "63": "3.85",
    "64": "3.071428571428571",
    "65": "4.333333333333333",
    "66": "3.428571428571429",
    "67": "3.454545454545455",
    "68": "2.5",
    "69": "3.5",
    "70": "3.2",
    "71": "3.666666666666667",
    "72": "3.0",
    "73": "5.0",
    "74": "5.0",
    "75": "5.0",
    "77": "5.0",
    "NULL": "4.074074074074074"
  },
  {
    "18": "3.0",
    "19": "1.5",
    "20": "3.142857142857143",
    "21": "2.7",
    "22": "2.727272727272727",
    "23": "2.166666666666667",
    "24": "2.363636363636364",
    "25": "2.894736842105263",
    "26": "2.5",
    "27": "2.368421052631579",
    "28": "2.454545454545455",
    "29": "2.318181818181818",
    "30": "2.545454545454545",
    "31": "1.884615384615385",
    "32": "2.2",
    "33": "2.5",
    "34": "1.961538461538462",
    "35": "2.4375",
    "36": "2.5",
    "37": "2.487179487179487",
    "38": "2.233333333333333",
    "39": "2.282051282051282",
    "40": "2.594594594594595",
    "41": "2.538461538461538",
    "42": "2.37037037037037",
    "43": "2.777777777777778",
    "44": "2.538461538461538",
    "45": "2.666666666666667",
    "46": "2.615384615384615",
    "47": "2.84375",
    "48": "2.611111111111111",
    "49": "2.787878787878788",
    "50": "2.485714285714286",
    "51": "2.575757575757576",
    "52": "2.666666666666667",
    "53": "2.892857142857143",
    "54": "2.481481481481481",
    "55": "2.75",
    "56": "2.388888888888889",
    "57": "2.28",
    "58": "2.214285714285714",
    "59": "2.518518518518519",
    "60": "2.428571428571429",
    "61": "2.666666666666667",
    "62": "2.222222222222222",
    "63": "2.25",
    "64": "2.214285714285714",
    "65": "3.133333333333333",
    "66": "2.142857142857143",
    "67": "2.545454545454545",
    "68": "1.5",
    "69": "2.125",
    "70": "2.6",
    "71": "3.0",
    "72": "3.0",
    "73": "2.0",
    "74": "2.5",
    "75": "2.0",
    "77": "4.0",
    "NULL": "2.703703703703704"
  },
  {
    "18": "3.0",
    "19": "3.0",
    "20": "2.571428571428571",
    "21": "3.1",
    "22": "3.090909090909091",
    "23": "3.666666666666667",
    "24": "3.227272727272727",
    "25": "3.052631578947368",
    "26": "3.125",
    "27": "3.552631578947368",
    "28": "3.409090909090909",
    "29": "3.318181818181818",
    "30": "3.515151515151515",
    "31": "3.923076923076923",
    "32": "3.371428571428571",
    "33": "3.125",
    "34": "3.576923076923077",
    "35": "3.1875",
    "36": "3.066666666666667",
    "37": "3.076923076923077",
    "38": "3.433333333333333",
    "39": "3.384615384615385",
    "40": "3.297297297297297",
    "41": "3.192307692307692",
    "42": "2.925925925925926",
    "43": "2.925925925925926",
    "44": "3.230769230769231",
    "45": "2.708333333333333",
    "46": "2.846153846153846",
    "47": "2.875",
    "48": "2.611111111111111",
    "49": "2.939393939393939",
    "50": "3.114285714285714",
    "51": "2.939393939393939",
    "52": "3.166666666666667",
    "53": "2.535714285714286",
    "54": "3.148148148148148",
    "55": "3.25",
    "56": "3.5",
    "57": "3.24",
    "58": "3.607142857142857",
    "59": "3.62962962962963",
    "60": "3.619047619047619",
    "61": "2.8",
    "62": "3.444444444444444",
    "63": "3.4",
    "64": "3.785714285714286",
    "65": "2.866666666666667",
    "66": "3.571428571428571",
    "67": "3.181818181818182",
    "68": "4.5",
    "69": "4.25",
    "70": "3.8",
    "71": "3.666666666666667",
    "72": "3.0",
    "73": "3.0",
    "74": "2.5",
    "75": "3.0",
    "77": "1.0",
    "NULL": "3.777777777777778"
  },
  {
    "18": "3.5",
    "19": "2.5",
    "20": "2.428571428571429",
    "21": "2.2",
    "22": "2.272727272727273",
    "23": "2.0",
    "24": "2.272727272727273",
    "25": "2.473684210526316",
    "26": "2.166666666666667",
    "27": "2.184210526315789",
    "28": "2.363636363636364",
    "29": "2.090909090909091",
    "30": "2.0",
    "31": "1.961538461538462",
    "32": "2.342857142857143",
    "33": "2.541666666666667",
    "34": "1.653846153846154",
    "35": "2.28125",
    "36": "2.366666666666667",
    "37": "2.333333333333333",
    "38": "2.2",
    "39": "2.102564102564103",
    "40": "2.540540540540541",
    "41": "2.269230769230769",
    "42": "2.518518518518519",
    "43": "2.407407407407407",
    "44": "1.961538461538462",
    "45": "3.166666666666667",
    "46": "2.5",
    "47": "2.375",
    "48": "2.611111111111111",
    "49": "2.303030303030303",
    "50": "2.057142857142857",
    "51": "2.303030303030303",
    "52": "2.233333333333333",
    "53": "2.464285714285714",
    "54": "2.185185185185185",
    "55": "2.1875",
    "56": "2.277777777777778",
    "57": "1.84",
    "58": "1.928571428571429",
    "59": "2.518518518518519",
    "60": "1.904761904761905",
    "61": "2.066666666666667",
    "62": "1.944444444444444",
    "63": "1.95",
    "64": "1.642857142857143",
    "65": "3.333333333333333",
    "66": "2.0",
    "67": "2.181818181818182",
    "68": "1.333333333333333",
    "69": "1.875",
    "70": "1.8",
    "71": "2.666666666666667",
    "72": "1.5",
    "73": "2.5",
    "74": "3.5",
    "75": "2.0",
    "77": "5.0",
    "NULL": "2.518518518518519"
  },
  {
    "18": "3.0",
    "19": "3.0",
    "20": "3.142857142857143",
    "21": "2.6",
    "22": "2.454545454545455",
    "23": "2.0",
    "24": "2.909090909090909",
    "25": "2.894736842105263",
    "26": "2.625",
    "27": "2.368421052631579",
    "28": "2.818181818181818",
    "29": "2.909090909090909",
    "30": "2.818181818181818",
    "31": "2.269230769230769",
    "32": "2.942857142857143",
    "33": "2.583333333333333",
    "34": "2.346153846153846",
    "35": "2.96875",
    "36": "3.133333333333333",
    "37": "2.794871794871795",
    "38": "2.666666666666667",
    "39": "2.58974358974359",
    "40": "2.567567567567568",
    "41": "3.115384615384615",
    "42": "3.037037037037037",
    "43": "3.555555555555556",
    "44": "3.153846153846154",
    "45": "3.5",
    "46": "3.153846153846154",
    "47": "3.25",
    "48": "3.277777777777778",
    "49": "3.090909090909091",
    "50": "2.685714285714286",
    "51": "3.121212121212121",
    "52": "3.033333333333333",
    "53": "3.75",
    "54": "3.222222222222222",
    "55": "3.25",
    "56": "2.555555555555556",
    "57": "3.0",
    "58": "2.678571428571429",
    "59": "2.62962962962963",
    "60": "2.523809523809524",
    "61": "2.933333333333333",
    "62": "2.666666666666667",
    "63": "2.5",
    "64": "2.428571428571429",
    "65": "3.0",
    "66": "2.714285714285714",
    "67": "2.909090909090909",
    "68": "1.833333333333333",
    "69": "1.5",
    "70": "2.0",
    "71": "4.0",
    "72": "4.0",
    "73": "3.0",
    "74": "3.0",
    "75": "3.0",
    "77": "5.0",
    "NULL": "3.222222222222222"
  },
  {
    "18": "2.5",
    "19": "2.0",
    "20": "2.0",
    "21": "2.6",
    "22": "2.181818181818182",
    "23": "2.333333333333333",
    "24": "2.136363636363636",
    "25": "2.0",
    "26": "2.041666666666667",
    "27": "1.973684210526316",
    "28": "2.363636363636364",
    "29": "2.136363636363636",
    "30": "2.151515151515152",
    "31": "1.730769230769231",
    "32": "2.142857142857143",
    "33": "2.375",
    "34": "1.961538461538462",
    "35": "2.15625",
    "36": "2.433333333333333",
    "37": "2.358974358974359",
    "38": "2.133333333333333",
    "39": "2.025641025641026",
    "40": "2.432432432432432",
    "41": "2.5",
    "42": "2.814814814814815",
    "43": "2.666666666666667",
    "44": "2.692307692307692",
    "45": "2.666666666666667",
    "46": "2.384615384615385",
    "47": "2.21875",
    "48": "2.694444444444444",
    "49": "2.696969696969697",
    "50": "2.285714285714286",
    "51": "2.757575757575758",
    "52": "2.533333333333333",
    "53": "2.5",
    "54": "2.444444444444444",
    "55": "2.0625",
    "56": "2.833333333333333",
    "57": "2.48",
    "58": "2.607142857142857",
    "59": "2.444444444444444",
    "60": "2.285714285714286",
    "61": "2.466666666666667",
    "62": "2.833333333333333",
    "63": "2.3",
    "64": "2.285714285714286",
    "65": "2.933333333333333",
    "66": "2.142857142857143",
    "67": "2.727272727272727",
    "68": "2.666666666666667",
    "69": "2.25",
    "70": "2.4",
    "71": "3.0",
    "72": "3.0",
    "73": "3.5",
    "74": "3.0",
    "75": "2.0",
    "77": "4.0",
    "NULL": "2.481481481481481"
  },
  {
    "18": "4.5",
    "19": "5.0",
    "20": "4.428571428571429",
    "21": "4.0",
    "22": "4.454545454545455",
    "23": "4.666666666666667",
    "24": "4.090909090909091",
    "25": "4.105263157894737",
    "26": "4.291666666666667",
    "27": "4.473684210526316",
    "28": "3.954545454545455",
    "29": "4.227272727272727",
    "30": "4.090909090909091",
    "31": "4.269230769230769",
    "32": "3.857142857142857",
    "33": "4.166666666666667",
    "34": "4.423076923076923",
    "35": "4.09375",
    "36": "4.2",
    "37": "4.0",
    "38": "4.1",
    "39": "4.205128205128205",
    "40": "4.162162162162162",
    "41": "4.192307692307692",
    "42": "3.592592592592593",
    "43": "4.222222222222222",
    "44": "3.961538461538462",
    "45": "3.875",
    "46": "4.076923076923077",
    "47": "3.8125",
    "48": "3.972222222222222",
    "49": "3.787878787878788",
    "50": "4.028571428571429",
    "51": "4.181818181818182",
    "52": "3.933333333333333",
    "53": "3.964285714285714",
    "54": "4.0",
    "55": "4.0",
    "56": "3.944444444444444",
    "57": "4.12",
    "58": "4.0",
    "59": "4.259259259259259",
    "60": "4.142857142857143",
    "61": "3.733333333333333",
    "62": "3.888888888888889",
    "63": "4.25",
    "64": "4.214285714285714",
    "65": "3.533333333333333",
    "66": "4.571428571428571",
    "67": "3.909090909090909",
    "68": "4.666666666666667",
    "69": "4.5",
    "70": "3.4",
    "71": "4.0",
    "72": "3.5",
    "73": "4.0",
    "74": "4.5",
    "75": "5.0",
    "77": "4.0",
    "NULL": "3.962962962962963"
  }
];
},{}],"/Users/salmiju/Documents/koulujutut/information_visualisation/infoviz/app/data/age-variance.csv":[function(require,module,exports){
module.exports = [
  {
    "18": "0.0",
    "19": "4.5",
    "20": "2.285714285714286",
    "21": "2.677777777777778",
    "22": "2.563636363636363",
    "23": "2.166666666666667",
    "24": "2.7532467532467533",
    "25": "2.052631578947369",
    "26": "1.9710144927536233",
    "27": "2.028449502133711",
    "28": "1.8701298701298699",
    "29": "2.045454545454546",
    "30": "1.9848484848484849",
    "31": "1.8538461538461533",
    "32": "2.2638655462184865",
    "33": "2.0869565217391304",
    "34": "2.013846153846154",
    "35": "2.095766129032258",
    "36": "2.102298850574713",
    "37": "1.8839406207827256",
    "38": "1.7298850574712645",
    "39": "2.1309041835357627",
    "40": "1.7252252252252251",
    "41": "1.7784615384615379",
    "42": "1.934472934472935",
    "43": "1.846153846153847",
    "44": "1.421538461538461",
    "45": "1.4329710144927534",
    "46": "1.6938461538461542",
    "47": "2.063508064516129",
    "48": "1.4753968253968255",
    "49": "2.251893939393939",
    "50": "2.322689075630251",
    "51": "1.5075757575757571",
    "52": "1.636781609195402",
    "53": "1.1150793650793653",
    "54": "1.8319088319088324",
    "55": "1.7166666666666666",
    "56": "2.0294117647058822",
    "57": "1.7500000000000002",
    "58": "2.1269841269841274",
    "59": "1.5925925925925921",
    "60": "2.5476190476190474",
    "61": "1.6952380952380948",
    "62": "1.9379084967320261",
    "63": "1.5236842105263158",
    "64": "2.1318681318681323",
    "65": "0.9809523809523808",
    "66": "2.142857142857143",
    "67": "2.0181818181818185",
    "68": "3.0666666666666673",
    "69": "2.7857142857142856",
    "70": "3.3",
    "71": "0.33333333333333337",
    "72": "8.0",
    "73": "0.0",
    "74": "0.0",
    "75": "NaN",
    "77": "NaN",
    "NULL": "1.8461538461538463"
  },
  {
    "18": "2.0",
    "19": "2.0",
    "20": "1.5714285714285714",
    "21": "1.822222222222222",
    "22": "1.963636363636363",
    "23": "2.0",
    "24": "2.028138528138528",
    "25": "1.8947368421052628",
    "26": "1.8532608695652173",
    "27": "2.1344238975817924",
    "28": "1.8722943722943723",
    "29": "1.5844155844155838",
    "30": "1.7803030303030305",
    "31": "1.8461538461538458",
    "32": "1.9697478991596644",
    "33": "1.7391304347826086",
    "34": "1.5753846153846152",
    "35": "1.7973790322580645",
    "36": "2.0931034482758615",
    "37": "1.9473684210526316",
    "38": "1.8206896551724139",
    "39": "1.5357624831309038",
    "40": "1.9879879879879883",
    "41": "1.86",
    "42": "2.17948717948718",
    "43": "1.9344729344729354",
    "44": "1.5153846153846158",
    "45": "1.780797101449275",
    "46": "1.864615384615384",
    "47": "1.6129032258064515",
    "48": "1.6214285714285719",
    "49": "1.7462121212121215",
    "50": "2.011764705882353",
    "51": "1.7348484848484842",
    "52": "1.3436781609195403",
    "53": "1.2314814814814814",
    "54": "1.5584045584045587",
    "55": "1.1333333333333333",
    "56": "1.4771241830065358",
    "57": "1.2400000000000002",
    "58": "1.7301587301587293",
    "59": "1.4814814814814818",
    "60": "2.1619047619047613",
    "61": "2.066666666666667",
    "62": "1.676470588235294",
    "63": "1.8421052631578947",
    "64": "2.2637362637362637",
    "65": "1.780952380952381",
    "66": "1.5714285714285718",
    "67": "1.0545454545454545",
    "68": "1.5",
    "69": "1.7142857142857142",
    "70": "1.2",
    "71": "0.33333333333333337",
    "72": "0.5",
    "73": "0.0",
    "74": "4.5",
    "75": "NaN",
    "77": "NaN",
    "NULL": "1.2564102564102564"
  },
  {
    "18": "0.5",
    "19": "0.0",
    "20": "1.2857142857142858",
    "21": "2.5",
    "22": "2.454545454545454",
    "23": "3.066666666666667",
    "24": "2.1666666666666665",
    "25": "2.2865497076023398",
    "26": "2.215579710144928",
    "27": "2.2560455192034143",
    "28": "2.4090909090909087",
    "29": "2.538961038961039",
    "30": "3.1306818181818183",
    "31": "1.421538461538461",
    "32": "2.0789915966386556",
    "33": "2.4764492753623193",
    "34": "1.8661538461538467",
    "35": "2.4475806451612905",
    "36": "2.2482758620689656",
    "37": "2.2483130904183533",
    "38": "2.5931034482758615",
    "39": "1.8596491228070178",
    "40": "2.18918918918919",
    "41": "2.098461538461538",
    "42": "2.515669515669515",
    "43": "2.4102564102564106",
    "44": "2.1246153846153852",
    "45": "1.9547101449275364",
    "46": "1.9338461538461538",
    "47": "2.3296370967741935",
    "48": "1.9301587301587302",
    "49": "1.704545454545454",
    "50": "2.534453781512605",
    "51": "2.195075757575758",
    "52": "2.5068965517241386",
    "53": "1.8981481481481481",
    "54": "2.5242165242165244",
    "55": "1.9833333333333334",
    "56": "2.1470588235294117",
    "57": "1.6766666666666667",
    "58": "2.3214285714285716",
    "59": "1.8717948717948714",
    "60": "2.4571428571428564",
    "61": "2.142857142857143",
    "62": "2.1830065359477118",
    "63": "2.2526315789473688",
    "64": "2.2472527472527473",
    "65": "2.123809523809524",
    "66": "2.142857142857143",
    "67": "2.8909090909090907",
    "68": "1.9",
    "69": "1.6964285714285714",
    "70": "2.7",
    "71": "3.0",
    "72": "8.0",
    "73": "0.0",
    "74": "2.0",
    "75": "NaN",
    "77": "NaN",
    "NULL": "1.8717948717948718"
  },
  {
    "18": "0.5",
    "19": "0.0",
    "20": "2.5714285714285716",
    "21": "1.211111111111111",
    "22": "0.7636363636363636",
    "23": "2.7",
    "24": "1.7857142857142858",
    "25": "1.543859649122807",
    "26": "0.46195652173913043",
    "27": "0.6692745376955903",
    "28": "1.4047619047619047",
    "29": "0.8852813852813851",
    "30": "1.568181818181819",
    "31": "0.7646153846153844",
    "32": "1.7226890756302506",
    "33": "0.954710144927536",
    "34": "1.644615384615385",
    "35": "1.5483870967741935",
    "36": "1.9091954022988509",
    "37": "1.280701754385965",
    "38": "1.5678160919540223",
    "39": "1.418353576248313",
    "40": "1.7807807807807805",
    "41": "1.8215384615384613",
    "42": "1.5413105413105406",
    "43": "1.9601139601139606",
    "44": "1.015384615384615",
    "45": "1.6449275362318845",
    "46": "1.7061538461538461",
    "47": "1.4909274193548387",
    "48": "1.6634920634920636",
    "49": "1.6325757575757567",
    "50": "1.6924369747899162",
    "51": "1.1212121212121215",
    "52": "1.34367816091954",
    "53": "1.3862433862433865",
    "54": "1.17948717948718",
    "55": "1.2",
    "56": "1.2058823529411764",
    "57": "1.0833333333333337",
    "58": "1.5502645502645511",
    "59": "1.233618233618233",
    "60": "1.4142857142857148",
    "61": "0.980952380952381",
    "62": "1.9379084967320257",
    "63": "1.2921052631578949",
    "64": "1.0769230769230769",
    "65": "0.9714285714285713",
    "66": "2.142857142857143",
    "67": "1.618181818181818",
    "68": "1.1",
    "69": "1.2678571428571428",
    "70": "1.2",
    "71": "0.33333333333333337",
    "72": "2.0",
    "73": "0.0",
    "74": "2.0",
    "75": "NaN",
    "77": "NaN",
    "NULL": "1.1054131054131053"
  },
  {
    "18": "0.5",
    "19": "4.5",
    "20": "1.2857142857142858",
    "21": "2.5",
    "22": "2.563636363636363",
    "23": "2.166666666666667",
    "24": "2.3744588744588744",
    "25": "2.5555555555555554",
    "26": "2.4619565217391304",
    "27": "2.4018492176386923",
    "28": "2.4675324675324677",
    "29": "2.7121212121212124",
    "30": "2.297348484848484",
    "31": "1.9384615384615385",
    "32": "2.7613445378151247",
    "33": "2.215579710144928",
    "34": "1.86",
    "35": "2.2651209677419355",
    "36": "2.148275862068966",
    "37": "2.4304993252361666",
    "38": "2.23448275862069",
    "39": "2.1551956815114712",
    "40": "1.7447447447447444",
    "41": "1.9446153846153842",
    "42": "1.7977207977207983",
    "43": "1.985754985754985",
    "44": "2.321538461538462",
    "45": "1.7101449275362317",
    "46": "2.166153846153846",
    "47": "2.507056451612903",
    "48": "1.844444444444444",
    "49": "2.2973484848484853",
    "50": "2.786554621848739",
    "51": "1.926136363636364",
    "52": "1.903448275862069",
    "53": "1.4074074074074074",
    "54": "2.5840455840455836",
    "55": "2.7625",
    "56": "2.264705882352941",
    "57": "2.0833333333333335",
    "58": "2.571428571428572",
    "59": "2.17948717948718",
    "60": "2.0285714285714294",
    "61": "1.8380952380952373",
    "62": "2.133986928104575",
    "63": "2.0947368421052635",
    "64": "2.4395604395604398",
    "65": "0.9238095238095239",
    "66": "3.571428571428571",
    "67": "3.0181818181818185",
    "68": "1.5",
    "69": "1.3571428571428572",
    "70": "4.800000000000001",
    "71": "0.33333333333333337",
    "72": "8.0",
    "73": "0.0",
    "74": "0.0",
    "75": "NaN",
    "77": "NaN",
    "NULL": "2.0"
  },
  {
    "18": "8.0",
    "19": "0.5",
    "20": "2.285714285714286",
    "21": "2.5",
    "22": "2.672727272727273",
    "23": "2.4",
    "24": "1.8787878787878791",
    "25": "1.8128654970760232",
    "26": "2.4184782608695654",
    "27": "2.3477951635846384",
    "28": "2.303030303030303",
    "29": "2.207792207792208",
    "30": "2.2784090909090917",
    "31": "1.8153846153846154",
    "32": "2.181512605042017",
    "33": "1.5199275362318845",
    "34": "1.8461538461538456",
    "35": "2.129032258064516",
    "36": "2.0471264367816087",
    "37": "2.3778677462887985",
    "38": "1.9367816091954027",
    "39": "2.0944669365722",
    "40": "2.3423423423423424",
    "41": "1.9015384615384614",
    "42": "2.1794871794871793",
    "43": "1.7464387464387463",
    "44": "2.406153846153845",
    "45": "1.5579710144927534",
    "46": "2.4384615384615382",
    "47": "2.466733870967742",
    "48": "2.1420634920634924",
    "49": "1.9848484848484835",
    "50": "2.078991596638655",
    "51": "2.176136363636363",
    "52": "2.2022988505747128",
    "53": "2.003968253968254",
    "54": "1.9002849002849003",
    "55": "2.1166666666666667",
    "56": "2.617647058823529",
    "57": "1.916666666666667",
    "58": "2.1428571428571437",
    "59": "2.3019943019943025",
    "60": "2.433333333333333",
    "61": "1.2666666666666668",
    "62": "1.869281045751634",
    "63": "2.365789473684211",
    "64": "1.6318681318681314",
    "65": "2.3523809523809525",
    "66": "1.8095238095238093",
    "67": "2.4181818181818184",
    "68": "0.4",
    "69": "0.2857142857142857",
    "70": "2.7",
    "71": "0.33333333333333337",
    "72": "8.0",
    "73": "0.5",
    "74": "0.0",
    "75": "NaN",
    "77": "NaN",
    "NULL": "2.5840455840455836"
  },
  {
    "18": "2.0",
    "19": "0.5",
    "20": "2.6666666666666665",
    "21": "2.1",
    "22": "2.618181818181818",
    "23": "1.2",
    "24": "1.3246753246753253",
    "25": "2.9122807017543857",
    "26": "0.9492753623188404",
    "27": "1.4879089615931727",
    "28": "1.489177489177489",
    "29": "1.4285714285714286",
    "30": "2.09280303030303",
    "31": "1.6815384615384616",
    "32": "1.8571428571428577",
    "33": "0.9565217391304348",
    "34": "1.478461538461538",
    "35": "1.8618951612903225",
    "36": "1.8264367816091949",
    "37": "1.9649122807017534",
    "38": "1.8402298850574708",
    "39": "2.1025641025641026",
    "40": "1.996996996996997",
    "41": "1.5215384615384615",
    "42": "2.0028490028490022",
    "43": "1.6609686609686596",
    "44": "1.9015384615384614",
    "45": "1.7318840579710142",
    "46": "1.5461538461538464",
    "47": "2.0473790322580645",
    "48": "1.8000000000000005",
    "49": "1.3087121212121215",
    "50": "1.840336134453781",
    "51": "1.5587121212121215",
    "52": "1.886206896551724",
    "53": "1.2751322751322745",
    "54": "1.5641025641025643",
    "55": "1.3625",
    "56": "2.486928104575163",
    "57": "2.0",
    "58": "1.8875661375661374",
    "59": "1.7293447293447295",
    "60": "2.247619047619048",
    "61": "1.3523809523809527",
    "62": "1.781045751633987",
    "63": "2.1973684210526314",
    "64": "1.8736263736263732",
    "65": "1.5238095238095237",
    "66": "3.142857142857143",
    "67": "1.6181818181818184",
    "68": "2.166666666666667",
    "69": "2.2142857142857144",
    "70": "2.7",
    "71": "0.33333333333333337",
    "72": "8.0",
    "73": "2.0",
    "74": "0.0",
    "75": "NaN",
    "77": "NaN",
    "NULL": "2.190883190883191"
  },
  {
    "18": "2.0",
    "19": "2.0",
    "20": "1.8095238095238095",
    "21": "1.7333333333333334",
    "22": "1.0545454545454547",
    "23": "1.6",
    "24": "1.2056277056277056",
    "25": "0.7777777777777778",
    "26": "1.391304347826087",
    "27": "1.391180654338549",
    "28": "1.7142857142857142",
    "29": "1.6125541125541127",
    "30": "1.4678030303030303",
    "31": "1.3738461538461535",
    "32": "1.7848739495798316",
    "33": "1.7318840579710146",
    "34": "1.4584615384615378",
    "35": "1.2903225806451613",
    "36": "1.2919540229885056",
    "37": "1.681511470985157",
    "38": "1.7482758620689656",
    "39": "1.6815114709851566",
    "40": "1.4714714714714718",
    "41": "1.1584615384615384",
    "42": "1.5925925925925921",
    "43": "1.5413105413105408",
    "44": "1.3553846153846154",
    "45": "1.826086956521739",
    "46": "1.2261538461538461",
    "47": "1.845766129032258",
    "48": "1.3682539682539676",
    "49": "1.1761363636363633",
    "50": "1.2554621848739498",
    "51": "1.376893939393939",
    "52": "1.3344827586206898",
    "53": "1.9616402116402116",
    "54": "1.5840455840455834",
    "55": "1.85",
    "56": "1.4117647058823533",
    "57": "1.7099999999999997",
    "58": "1.3862433862433863",
    "59": "1.3333333333333335",
    "60": "1.6285714285714288",
    "61": "2.028571428571429",
    "62": "1.281045751633987",
    "63": "1.713157894736842",
    "64": "1.978021978021978",
    "65": "1.4095238095238094",
    "66": "0.2857142857142857",
    "67": "2.0",
    "68": "1.5",
    "69": "0.9821428571428571",
    "70": "1.3",
    "71": "2.333333333333333",
    "72": "4.5",
    "73": "4.5",
    "74": "2.0",
    "75": "NaN",
    "77": "NaN",
    "NULL": "1.8062678062678066"
  },
  {
    "18": "0.5",
    "19": "0.5",
    "20": "0.4761904761904762",
    "21": "0.9333333333333331",
    "22": "0.47272727272727283",
    "23": "0.8",
    "24": "1.3246753246753247",
    "25": "1.0994152046783627",
    "26": "1.565217391304348",
    "27": "1.4025604551920345",
    "28": "1.9329004329004327",
    "29": "1.8268398268398267",
    "30": "1.210227272727273",
    "31": "1.1461538461538465",
    "32": "1.0084033613445378",
    "33": "1.8677536231884053",
    "34": "1.7046153846153844",
    "35": "1.8054435483870968",
    "36": "2.050574712643678",
    "37": "1.6774628879892033",
    "38": "1.7344827586206895",
    "39": "1.7975708502024295",
    "40": "1.810810810810811",
    "41": "1.46",
    "42": "1.4985754985754984",
    "43": "2.07977207977208",
    "44": "2.161538461538462",
    "45": "2.1449275362318843",
    "46": "2.0184615384615388",
    "47": "2.6683467741935485",
    "48": "1.7928571428571434",
    "49": "1.6837121212121218",
    "50": "1.7647058823529411",
    "51": "1.6553030303030296",
    "52": "2.022988505747126",
    "53": "2.497354497354498",
    "54": "1.9173789173789177",
    "55": "1.45",
    "56": "2.1045751633986933",
    "57": "2.4733333333333323",
    "58": "2.1732804232804233",
    "59": "2.0541310541310533",
    "60": "1.9904761904761898",
    "61": "2.066666666666666",
    "62": "2.2647058823529407",
    "63": "1.9447368421052629",
    "64": "2.423076923076923",
    "65": "1.6952380952380952",
    "66": "2.3333333333333335",
    "67": "1.2909090909090908",
    "68": "1.5",
    "69": "2.267857142857143",
    "70": "0.20000000000000007",
    "71": "2.3333333333333335",
    "72": "2.0",
    "73": "4.5",
    "74": "4.5",
    "75": "NaN",
    "77": "NaN",
    "NULL": "1.948717948717948"
  },
  {
    "18": "0.5",
    "19": "0.5",
    "20": "1.9047619047619049",
    "21": "2.1",
    "22": "2.2909090909090906",
    "23": "0.3",
    "24": "1.941558441558442",
    "25": "1.3567251461988301",
    "26": "1.4492753623188404",
    "27": "1.4971550497866288",
    "28": "0.7900432900432899",
    "29": "1.5757575757575752",
    "30": "1.6950757575757571",
    "31": "1.521538461538462",
    "32": "2.122689075630252",
    "33": "0.8405797101449276",
    "34": "1.3846153846153841",
    "35": "1.7973790322580645",
    "36": "1.6367816091954024",
    "37": "1.797570850202429",
    "38": "1.1091954022988508",
    "39": "1.3616734143049924",
    "40": "1.4669669669669672",
    "41": "1.6138461538461542",
    "42": "1.5327635327635332",
    "43": "1.6524216524216524",
    "44": "1.4953846153846155",
    "45": "1.8840579710144931",
    "46": "1.4353846153846157",
    "47": "1.8064516129032258",
    "48": "0.8634920634920634",
    "49": "1.4659090909090906",
    "50": "1.492436974789916",
    "51": "1.1553030303030303",
    "52": "1.6505747126436783",
    "53": "1.2103174603174607",
    "54": "1.487179487179487",
    "55": "0.7625",
    "56": "1.633986928104575",
    "57": "1.6099999999999997",
    "58": "1.2857142857142856",
    "59": "1.5754985754985757",
    "60": "1.7142857142857142",
    "61": "1.3523809523809525",
    "62": "0.888888888888889",
    "63": "1.4631578947368427",
    "64": "1.917582417582417",
    "65": "1.7142857142857142",
    "66": "3.142857142857143",
    "67": "2.218181818181818",
    "68": "2.5666666666666673",
    "69": "0.2857142857142857",
    "70": "1.8000000000000003",
    "71": "0.3333333333333333",
    "72": "4.5",
    "73": "0.5",
    "74": "8.0",
    "75": "NaN",
    "77": "NaN",
    "NULL": "1.4387464387464386"
  },
  {
    "18": "0.5",
    "19": "0.5",
    "20": "1.8095238095238095",
    "21": "2.8999999999999995",
    "22": "2.272727272727273",
    "23": "3.1",
    "24": "2.0606060606060606",
    "25": "2.368421052631579",
    "26": "1.780797101449275",
    "27": "1.6216216216216217",
    "28": "1.8463203463203466",
    "29": "1.75974025974026",
    "30": "1.422348484848485",
    "31": "1.3615384615384618",
    "32": "1.969747899159663",
    "33": "1.6793478260869565",
    "34": "0.4984615384615384",
    "35": "1.9022177419354838",
    "36": "1.5172413793103448",
    "37": "1.6734143049932524",
    "38": "1.0816091954022988",
    "39": "1.5991902834008098",
    "40": "1.270270270270271",
    "41": "1.3615384615384623",
    "42": "2.230769230769231",
    "43": "2.0284900284900287",
    "44": "1.0215384615384613",
    "45": "2.346014492753624",
    "46": "1.6261538461538458",
    "47": "1.53125",
    "48": "1.4563492063492058",
    "49": "1.5",
    "50": "1.4403361344537808",
    "51": "1.3352272727272736",
    "52": "1.9551724137931041",
    "53": "2.2261904761904767",
    "54": "1.41025641025641",
    "55": "0.6958333333333333",
    "56": "1.8202614379084958",
    "57": "1.1099999999999997",
    "58": "1.8134920634920633",
    "59": "0.9487179487179491",
    "60": "1.414285714285714",
    "61": "1.2095238095238094",
    "62": "1.467320261437908",
    "63": "1.6289473684210525",
    "64": "1.6703296703296704",
    "65": "2.1142857142857148",
    "66": "1.2380952380952381",
    "67": "1.8",
    "68": "0.16666666666666669",
    "69": "1.1428571428571428",
    "70": "2.7",
    "71": "2.3333333333333335",
    "72": "2.0",
    "73": "2.0",
    "74": "2.0",
    "75": "NaN",
    "77": "NaN",
    "NULL": "1.977207977207977"
  },
  {
    "18": "0.0",
    "19": "0.5",
    "20": "1.6666666666666667",
    "21": "1.655555555555556",
    "22": "1.3636363636363638",
    "23": "1.0666666666666667",
    "24": "1.8268398268398263",
    "25": "2.321637426900585",
    "26": "1.5362318840579712",
    "27": "2.0512091038406832",
    "28": "1.6818181818181817",
    "29": "1.6645021645021645",
    "30": "1.7973484848484842",
    "31": "2.2215384615384615",
    "32": "1.7932773109243687",
    "33": "2.4275362318840585",
    "34": "2.326153846153846",
    "35": "1.7258064516129032",
    "36": "1.8574712643678164",
    "37": "1.4453441295546552",
    "38": "1.4816091954022985",
    "39": "1.7786774628879893",
    "40": "1.6306306306306302",
    "41": "1.7738461538461536",
    "42": "1.908831908831909",
    "43": "1.6780626780626782",
    "44": "1.6984615384615387",
    "45": "1.3894927536231876",
    "46": "1.1446153846153846",
    "47": "1.3618951612903225",
    "48": "1.5515873015873012",
    "49": "1.5075757575757565",
    "50": "1.381512605042017",
    "51": "1.3541666666666674",
    "52": "1.6781609195402303",
    "53": "0.8187830687830687",
    "54": "1.6923076923076923",
    "55": "0.8625",
    "56": "1.2712418300653598",
    "57": "1.5599999999999998",
    "58": "1.2208994708994712",
    "59": "0.840455840455841",
    "60": "0.7619047619047621",
    "61": "0.6000000000000002",
    "62": "0.761437908496732",
    "63": "1.0526315789473684",
    "64": "1.71978021978022",
    "65": "0.923809523809524",
    "66": "0.2857142857142857",
    "67": "0.27272727272727265",
    "68": "2.2666666666666666",
    "69": "0.9821428571428571",
    "70": "0.30000000000000004",
    "71": "0.33333333333333337",
    "72": "4.5",
    "73": "0.0",
    "74": "8.0",
    "75": "NaN",
    "77": "NaN",
    "NULL": "0.7948717948717946"
  },
  {
    "18": "0.5",
    "19": "2.0",
    "20": "3.1428571428571437",
    "21": "2.7111111111111112",
    "22": "2.0545454545454542",
    "23": "3.1",
    "24": "2.4935064935064934",
    "25": "2.5555555555555554",
    "26": "1.3894927536231882",
    "27": "1.8065433854907542",
    "28": "2.4523809523809526",
    "29": "1.6883116883116882",
    "30": "1.8636363636363642",
    "31": "1.958461538461538",
    "32": "2.188235294117646",
    "33": "2.2590579710144936",
    "34": "1.8661538461538456",
    "35": "1.6733870967741935",
    "36": "2.047126436781609",
    "37": "1.8272604588394057",
    "38": "2.1850574712643676",
    "39": "1.774628879892038",
    "40": "1.9084084084084079",
    "41": "2.013846153846153",
    "42": "2.720797720797721",
    "43": "2.17948717948718",
    "44": "2.381538461538462",
    "45": "2.108695652173913",
    "46": "2.0138461538461536",
    "47": "2.2006048387096775",
    "48": "2.0785714285714287",
    "49": "1.9166666666666665",
    "50": "1.7025210084033615",
    "51": "1.5075757575757571",
    "52": "2.010344827586207",
    "53": "1.8769841269841274",
    "54": "1.8404558404558409",
    "55": "1.4625",
    "56": "1.8986928104575165",
    "57": "1.4233333333333331",
    "58": "2.406084656084656",
    "59": "1.6410256410256407",
    "60": "2.657142857142857",
    "61": "2.2095238095238092",
    "62": "2.379084967320262",
    "63": "2.2210526315789476",
    "64": "2.423076923076923",
    "65": "1.638095238095238",
    "66": "3.142857142857143",
    "67": "2.163636363636363",
    "68": "1.3666666666666667",
    "69": "2.8392857142857144",
    "70": "3.8",
    "71": "0.33333333333333337",
    "72": "4.5",
    "73": "2.0",
    "74": "2.0",
    "75": "NaN",
    "77": "NaN",
    "NULL": "2.333333333333333"
  },
  {
    "18": "0.0",
    "19": "0.5",
    "20": "1.9523809523809526",
    "21": "1.8333333333333333",
    "22": "1.6545454545454548",
    "23": "0.7",
    "24": "1.2748917748917756",
    "25": "1.6900584795321634",
    "26": "1.4619565217391304",
    "27": "1.6963015647226178",
    "28": "1.6818181818181819",
    "29": "1.4978354978354984",
    "30": "1.75",
    "31": "1.6984615384615385",
    "32": "1.3983193277310935",
    "33": "1.5199275362318838",
    "34": "1.1461538461538463",
    "35": "1.8064516129032258",
    "36": "1.6333333333333326",
    "37": "1.462887989203778",
    "38": "1.540229885057471",
    "39": "1.4062078272604592",
    "40": "1.2552552552552556",
    "41": "1.1953846153846153",
    "42": "1.4871794871794874",
    "43": "1.4102564102564108",
    "44": "1.6984615384615385",
    "45": "1.3043478260869565",
    "46": "1.146153846153846",
    "47": "1.6522177419354838",
    "48": "1.4539682539682541",
    "49": "1.1534090909090906",
    "50": "1.4756302521008404",
    "51": "1.507575757575757",
    "52": "1.7712643678160924",
    "53": "1.1640211640211637",
    "54": "1.874643874643875",
    "55": "1.3333333333333333",
    "56": "2.133986928104575",
    "57": "1.6666666666666663",
    "58": "1.962962962962963",
    "59": "1.1538461538461537",
    "60": "2.5619047619047617",
    "61": "2.142857142857143",
    "62": "1.124183006535948",
    "63": "0.9368421052631581",
    "64": "0.6868131868131871",
    "65": "1.1714285714285713",
    "66": "1.1428571428571426",
    "67": "0.8181818181818183",
    "68": "3.6",
    "69": "1.7142857142857142",
    "70": "1.7",
    "71": "0.33333333333333337",
    "72": "0.5",
    "73": "0.0",
    "74": "0.5",
    "75": "NaN",
    "77": "NaN",
    "NULL": "1.102564102564102"
  },
  {
    "18": "4.5",
    "19": "4.5",
    "20": "1.2857142857142858",
    "21": "2.0555555555555554",
    "22": "1.5636363636363637",
    "23": "1.9",
    "24": "1.3614718614718615",
    "25": "1.9824561403508763",
    "26": "2.3188405797101446",
    "27": "2.0149359886202003",
    "28": "2.0519480519480524",
    "29": "2.441558441558441",
    "30": "1.6477272727272732",
    "31": "2.1061538461538456",
    "32": "1.8235294117647058",
    "33": "2.1286231884057973",
    "34": "1.6384615384615384",
    "35": "1.8860887096774193",
    "36": "1.7747126436781604",
    "37": "1.9392712550607287",
    "38": "1.7057471264367816",
    "39": "1.6639676113360318",
    "40": "1.9534534534534538",
    "41": "1.2861538461538458",
    "42": "2.131054131054131",
    "43": "1.4871794871794877",
    "44": "1.4215384615384616",
    "45": "1.5634057971014506",
    "46": "1.3846153846153846",
    "47": "1.9747983870967742",
    "48": "1.392857142857144",
    "49": "1.229166666666666",
    "50": "1.5344537815126051",
    "51": "1.8428030303030303",
    "52": "1.7655172413793105",
    "53": "1.3492063492063489",
    "54": "1.41025641025641",
    "55": "1.9958333333333333",
    "56": "2.055555555555555",
    "57": "1.5000000000000002",
    "58": "1.3055555555555556",
    "59": "1.3532763532763528",
    "60": "1.514285714285714",
    "61": "1.20952380952381",
    "62": "1.3888888888888886",
    "63": "2.4631578947368418",
    "64": "2.379120879120879",
    "65": "1.123809523809524",
    "66": "1.2380952380952381",
    "67": "1.872727272727273",
    "68": "0.5666666666666667",
    "69": "1.9285714285714286",
    "70": "0.20000000000000007",
    "71": "4.333333333333334",
    "72": "2.0",
    "73": "0.0",
    "74": "0.0",
    "75": "NaN",
    "77": "NaN",
    "NULL": "2.0"
  },
  {
    "18": "0.0",
    "19": "4.5",
    "20": "0.5714285714285715",
    "21": "1.7333333333333334",
    "22": "1.8",
    "23": "2.666666666666667",
    "24": "2.354978354978355",
    "25": "1.39766081871345",
    "26": "2.2318840579710146",
    "27": "1.485775248933144",
    "28": "2.0519480519480515",
    "29": "2.062770562770563",
    "30": "2.1950757575757565",
    "31": "2.7338461538461543",
    "32": "2.1815126050420166",
    "33": "1.7807971014492754",
    "34": "2.2538461538461543",
    "35": "1.9193548387096775",
    "36": "1.8954022988505748",
    "37": "1.8218623481781369",
    "38": "1.9724137931034482",
    "39": "1.3400809716599191",
    "40": "1.9519519519519513",
    "41": "1.4646153846153844",
    "42": "2.857549857549858",
    "43": "2.2507122507122514",
    "44": "2.1784615384615384",
    "45": "1.971014492753623",
    "46": "1.4338461538461535",
    "47": "1.8346774193548387",
    "48": "1.9896825396825395",
    "49": "1.6950757575757565",
    "50": "2.3579831932773105",
    "51": "2.3181818181818175",
    "52": "1.706896551724138",
    "53": "2.396825396825397",
    "54": "2.13105413105413",
    "55": "1.2",
    "56": "2.617647058823529",
    "57": "2.0000000000000004",
    "58": "1.9722222222222223",
    "59": "1.874643874643875",
    "60": "2.247619047619048",
    "61": "1.6000000000000003",
    "62": "2.2647058823529407",
    "63": "3.042105263157895",
    "64": "2.4890109890109895",
    "65": "1.8095238095238098",
    "66": "1.80952380952381",
    "67": "3.490909090909091",
    "68": "2.166666666666667",
    "69": "2.6964285714285716",
    "70": "2.7",
    "71": "0.3333333333333333",
    "72": "4.5",
    "73": "0.5",
    "74": "4.5",
    "75": "NaN",
    "77": "NaN",
    "NULL": "2.2250712250712255"
  },
  {
    "18": "2.0",
    "19": "4.5",
    "20": "2.4761904761904763",
    "21": "3.1555555555555563",
    "22": "2.8181818181818183",
    "23": "3.066666666666667",
    "24": "2.6666666666666665",
    "25": "2.432748538011697",
    "26": "2.5634057971014497",
    "27": "2.2446657183499283",
    "28": "3.1341991341991333",
    "29": "3.108225108225108",
    "30": "2.320075757575756",
    "31": "1.7861538461538462",
    "32": "2.8823529411764706",
    "33": "2.8623188405797104",
    "34": "2.7953846153846156",
    "35": "2.2409274193548385",
    "36": "2.689655172413793",
    "37": "2.20782726045884",
    "38": "2.4195402298850572",
    "39": "2.5681511470985163",
    "40": "2.3303303303303307",
    "41": "2.758461538461538",
    "42": "2.4643874643874644",
    "43": "2.7464387464387463",
    "44": "2.1984615384615385",
    "45": "1.4782608695652173",
    "46": "1.5461538461538458",
    "47": "2.442540322580645",
    "48": "2.5714285714285703",
    "49": "2.172348484848484",
    "50": "2.205042016806722",
    "51": "2.445075757575756",
    "52": "1.9816091954022985",
    "53": "1.3862433862433863",
    "54": "1.3703703703703705",
    "55": "1.9291666666666667",
    "56": "2.588235294117647",
    "57": "1.31",
    "58": "2.035714285714286",
    "59": "2.4216524216524222",
    "60": "2.7285714285714286",
    "61": "2.4095238095238103",
    "62": "1.8823529411764706",
    "63": "2.6184210526315788",
    "64": "2.10989010989011",
    "65": "2.7428571428571433",
    "66": "0.6190476190476191",
    "67": "1.8545454545454543",
    "68": "0.8",
    "69": "1.4285714285714286",
    "70": "3.3000000000000003",
    "71": "3.0",
    "72": "4.5",
    "73": "0.0",
    "74": "2.0",
    "75": "NaN",
    "77": "NaN",
    "NULL": "1.9259259259259258"
  },
  {
    "18": "0.5",
    "19": "0.5",
    "20": "1.1428571428571428",
    "21": "1.5666666666666667",
    "22": "3.0181818181818185",
    "23": "1.4666666666666663",
    "24": "2.5649350649350646",
    "25": "2.339181286549708",
    "26": "2.108695652173913",
    "27": "2.298719772403982",
    "28": "2.538961038961039",
    "29": "1.9047619047619047",
    "30": "2.022727272727273",
    "31": "1.718461538461538",
    "32": "1.6336134453781515",
    "33": "2.1739130434782608",
    "34": "1.1015384615384614",
    "35": "1.6360887096774193",
    "36": "2.3000000000000003",
    "37": "1.9446693657219978",
    "38": "1.6333333333333333",
    "39": "1.604588394062079",
    "40": "1.7492492492492488",
    "41": "1.6261538461538465",
    "42": "2.43019943019943",
    "43": "2.564102564102564",
    "44": "1.593846153846154",
    "45": "1.824275362318841",
    "46": "2.1846153846153853",
    "47": "2.8225806451612905",
    "48": "1.58968253968254",
    "49": "1.4223484848484842",
    "50": "1.692436974789916",
    "51": "1.710227272727273",
    "52": "1.7574712643678159",
    "53": "2.109788359788359",
    "54": "1.4985754985754989",
    "55": "1.45",
    "56": "1.241830065359477",
    "57": "1.456666666666667",
    "58": "1.7566137566137572",
    "59": "1.2079772079772082",
    "60": "1.1476190476190475",
    "61": "1.6380952380952378",
    "62": "1.2418300653594767",
    "63": "2.2000000000000006",
    "64": "0.5714285714285714",
    "65": "1.980952380952381",
    "66": "3.0",
    "67": "2.8909090909090907",
    "68": "0.0",
    "69": "1.8392857142857142",
    "70": "2.0",
    "71": "4.333333333333334",
    "72": "4.5",
    "73": "0.0",
    "74": "8.0",
    "75": "NaN",
    "77": "NaN",
    "NULL": "0.8717948717948715"
  },
  {
    "18": "0.0",
    "19": "2.0",
    "20": "3.1428571428571423",
    "21": "1.822222222222222",
    "22": "1.3636363636363633",
    "23": "2.966666666666667",
    "24": "2.0519480519480533",
    "25": "1.9532163742690056",
    "26": "1.4764492753623188",
    "27": "2.204836415362731",
    "28": "2.354978354978355",
    "29": "2.06060606060606",
    "30": "2.028409090909091",
    "31": "1.9261538461538452",
    "32": "2.6756302521008406",
    "33": "2.375",
    "34": "1.7061538461538468",
    "35": "1.9838709677419355",
    "36": "2.3919540229885055",
    "37": "2.0080971659919036",
    "38": "2.179310344827586",
    "39": "1.9973009446693666",
    "40": "1.9144144144144153",
    "41": "1.853846153846153",
    "42": "0.4814814814814813",
    "43": "1.66096866096866",
    "44": "1.6815384615384619",
    "45": "1.4710144927536226",
    "46": "1.6861538461538457",
    "47": "2.0",
    "48": "1.246825396825397",
    "49": "1.183712121212121",
    "50": "1.549579831932773",
    "51": "0.7102272727272727",
    "52": "0.993103448275862",
    "53": "1.1891534391534395",
    "54": "1.5641025641025645",
    "55": "1.85",
    "56": "1.558823529411765",
    "57": "1.4933333333333332",
    "58": "1.5066137566137565",
    "59": "1.3076923076923077",
    "60": "2.7333333333333334",
    "61": "1.5999999999999999",
    "62": "2.7058823529411775",
    "63": "1.5657894736842106",
    "64": "1.7857142857142856",
    "65": "0.6380952380952379",
    "66": "0.904761904761905",
    "67": "2.6181818181818186",
    "68": "1.3666666666666667",
    "69": "2.2142857142857144",
    "70": "2.7",
    "71": "0.33333333333333337",
    "72": "8.0",
    "73": "0.5",
    "74": "0.0",
    "75": "NaN",
    "77": "NaN",
    "NULL": "1.618233618233618"
  },
  {
    "18": "4.5",
    "19": "0.5",
    "20": "1.5714285714285714",
    "21": "1.3888888888888888",
    "22": "0.6181818181818183",
    "23": "2.5666666666666664",
    "24": "1.9415584415584415",
    "25": "1.91812865497076",
    "26": "2.0851449275362324",
    "27": "1.9203413940256038",
    "28": "2.623376623376623",
    "29": "2.1666666666666665",
    "30": "1.7575757575757567",
    "31": "1.853846153846154",
    "32": "2.2218487394957993",
    "33": "1.6793478260869565",
    "34": "2.3384615384615386",
    "35": "1.9747983870967742",
    "36": "2.5988505747126434",
    "37": "2.1228070175438596",
    "38": "2.441379310344828",
    "39": "1.807017543859649",
    "40": "2.4969969969969963",
    "41": "2.233846153846154",
    "42": "2.4216524216524222",
    "43": "1.9259259259259252",
    "44": "2.1061538461538465",
    "45": "1.8677536231884062",
    "46": "2.0446153846153847",
    "47": "2.628024193548387",
    "48": "1.7301587301587298",
    "49": "2.079545454545454",
    "50": "2.0050420168067227",
    "51": "2.5303030303030303",
    "52": "2.162068965517242",
    "53": "2.1481481481481484",
    "54": "1.566951566951567",
    "55": "1.6",
    "56": "2.1830065359477113",
    "57": "1.5599999999999998",
    "58": "1.5912698412698416",
    "59": "1.8660968660968664",
    "60": "2.3619047619047624",
    "61": "1.6380952380952383",
    "62": "1.8594771241830064",
    "63": "2.155263157894738",
    "64": "1.4945054945054943",
    "65": "1.4095238095238096",
    "66": "2.571428571428571",
    "67": "2.0727272727272728",
    "68": "2.3",
    "69": "2.0",
    "70": "1.3",
    "71": "0.33333333333333337",
    "72": "0.0",
    "73": "0.5",
    "74": "2.0",
    "75": "NaN",
    "77": "NaN",
    "NULL": "1.9002849002848998"
  },
  {
    "18": "0.5",
    "19": "0.0",
    "20": "0.23809523809523805",
    "21": "1.788888888888889",
    "22": "0.0909090909090909",
    "23": "2.4",
    "24": "0.5389610389610391",
    "25": "2.1754385964912277",
    "26": "1.2753623188405796",
    "27": "1.0497866287339968",
    "28": "2.2186147186147185",
    "29": "1.4805194805194803",
    "30": "1.46780303030303",
    "31": "0.5246153846153845",
    "32": "1.8285714285714292",
    "33": "1.6503623188405798",
    "34": "1.458461538461538",
    "35": "1.6038306451612903",
    "36": "2.093103448275863",
    "37": "1.5236167341430502",
    "38": "1.4988505747126433",
    "39": "2.210526315789474",
    "40": "1.9879879879879876",
    "41": "1.946153846153846",
    "42": "2.8717948717948714",
    "43": "2.635327635327636",
    "44": "2.2215384615384624",
    "45": "2.340579710144928",
    "46": "1.7846153846153847",
    "47": "2.7096774193548385",
    "48": "2.6",
    "49": "2.121212121212122",
    "50": "2.3495798319327728",
    "51": "2.840909090909091",
    "52": "2.667816091954023",
    "53": "2.7658730158730154",
    "54": "2.871794871794871",
    "55": "2.8666666666666667",
    "56": "3.088235294117647",
    "57": "3.0833333333333335",
    "58": "2.7566137566137567",
    "59": "2.293447293447294",
    "60": "2.633333333333334",
    "61": "2.523809523809524",
    "62": "3.1241830065359477",
    "63": "3.186842105263158",
    "64": "3.939560439560439",
    "65": "2.2571428571428576",
    "66": "2.9047619047619047",
    "67": "2.2181818181818183",
    "68": "3.3666666666666663",
    "69": "0.5714285714285714",
    "70": "4.2",
    "71": "0.3333333333333333",
    "72": "8.0",
    "73": "0.0",
    "74": "2.0",
    "75": "NaN",
    "77": "NaN",
    "NULL": "3.4102564102564097"
  },
  {
    "18": "0.0",
    "19": "0.0",
    "20": "0.2857142857142857",
    "21": "2.4000000000000004",
    "22": "0.818181818181818",
    "23": "4.166666666666666",
    "24": "1.8787878787878793",
    "25": "1.4327485380116955",
    "26": "0.9492753623188406",
    "27": "0.7112375533428168",
    "28": "1.8614718614718615",
    "29": "2.3030303030303028",
    "30": "1.7575757575757576",
    "31": "1.6553846153846155",
    "32": "2.420168067226891",
    "33": "2.027173913043478",
    "34": "1.4661538461538464",
    "35": "1.684475806451613",
    "36": "2.3919540229885055",
    "37": "1.989203778677463",
    "38": "2.102298850574713",
    "39": "1.8663967611336034",
    "40": "1.911411411411412",
    "41": "2.0938461538461537",
    "42": "2.763532763532764",
    "43": "2.333333333333333",
    "44": "2.3261538461538462",
    "45": "2.608695652173913",
    "46": "1.4953846153846158",
    "47": "2.028225806451613",
    "48": "2.142857142857143",
    "49": "1.9223484848484849",
    "50": "2.2319327731092433",
    "51": "3.0018939393939412",
    "52": "1.84367816091954",
    "53": "1.7394179894179889",
    "54": "2.0199430199430193",
    "55": "2.095833333333333",
    "56": "1.8594771241830066",
    "57": "2.3100000000000005",
    "58": "1.5502645502645502",
    "59": "2.242165242165243",
    "60": "1.7571428571428573",
    "61": "1.6666666666666663",
    "62": "2.2516339869281046",
    "63": "1.0421052631578949",
    "64": "2.571428571428571",
    "65": "2.3523809523809525",
    "66": "0.619047619047619",
    "67": "1.4545454545454546",
    "68": "2.4",
    "69": "0.5",
    "70": "3.3000000000000003",
    "71": "0.3333333333333333",
    "72": "0.0",
    "73": "8.0",
    "74": "0.5",
    "75": "NaN",
    "77": "NaN",
    "NULL": "2.2507122507122506"
  },
  {
    "18": "0.5",
    "19": "0.0",
    "20": "1.6666666666666667",
    "21": "2.4444444444444446",
    "22": "1.018181818181818",
    "23": "1.9",
    "24": "2.2272727272727275",
    "25": "1.5087719298245612",
    "26": "1.7807971014492754",
    "27": "1.8840682788051217",
    "28": "1.880952380952381",
    "29": "2.1471861471861473",
    "30": "1.8125",
    "31": "2.18",
    "32": "2.1882352941176473",
    "33": "2.347826086956522",
    "34": "1.7738461538461534",
    "35": "1.7086693548387097",
    "36": "2.024137931034483",
    "37": "1.6113360323886632",
    "38": "2.079310344827586",
    "39": "1.8879892037786765",
    "40": "1.6366366366366365",
    "41": "2.2953846153846156",
    "42": "2.0712250712250713",
    "43": "1.4814814814814818",
    "44": "1.8153846153846154",
    "45": "1.940217391304348",
    "46": "1.833846153846154",
    "47": "2.2419354838709675",
    "48": "2.0539682539682533",
    "49": "1.5303030303030303",
    "50": "1.7025210084033606",
    "51": "1.8200757575757571",
    "52": "1.5643678160919543",
    "53": "1.846560846560847",
    "54": "1.7948717948717952",
    "55": "1.6958333333333333",
    "56": "1.6732026143790855",
    "57": "1.51",
    "58": "1.719576719576719",
    "59": "2.076923076923077",
    "60": "1.233333333333333",
    "61": "1.2666666666666664",
    "62": "1.869281045751634",
    "63": "2.0500000000000003",
    "64": "1.9560439560439562",
    "65": "1.980952380952381",
    "66": "2.6666666666666665",
    "67": "2.290909090909091",
    "68": "0.16666666666666666",
    "69": "1.9285714285714286",
    "70": "2.0",
    "71": "0.33333333333333337",
    "72": "0.0",
    "73": "2.0",
    "74": "4.5",
    "75": "NaN",
    "77": "NaN",
    "NULL": "1.9487179487179491"
  },
  {
    "18": "2.0",
    "19": "0.5",
    "20": "1.9523809523809526",
    "21": "1.9555555555555562",
    "22": "1.054545454545455",
    "23": "2.5666666666666673",
    "24": "2.5714285714285716",
    "25": "2.8011695906432745",
    "26": "2.0",
    "27": "2.332859174964438",
    "28": "2.2077922077922074",
    "29": "2.1580086580086584",
    "30": "2.1268939393939394",
    "31": "2.02",
    "32": "2.458823529411765",
    "33": "1.9057971014492754",
    "34": "2.26",
    "35": "2.0393145161290325",
    "36": "2.1333333333333337",
    "37": "2.283400809716599",
    "38": "1.903448275862069",
    "39": "2.2604588394062097",
    "40": "2.0225225225225225",
    "41": "2.3338461538461526",
    "42": "1.564102564102564",
    "43": "1.3333333333333341",
    "44": "1.6184615384615382",
    "45": "1.693840579710145",
    "46": "2.075384615384616",
    "47": "2.507056451612903",
    "48": "1.7928571428571434",
    "49": "1.5795454545454541",
    "50": "1.9579831932773104",
    "51": "1.7518939393939408",
    "52": "1.5678160919540227",
    "53": "1.3796296296296295",
    "54": "1.9259259259259254",
    "55": "2.466666666666667",
    "56": "2.2516339869281046",
    "57": "1.99",
    "58": "2.702380952380952",
    "59": "1.190883190883191",
    "60": "2.3476190476190473",
    "61": "2.066666666666667",
    "62": "2.3529411764705883",
    "63": "2.1342105263157896",
    "64": "3.1483516483516487",
    "65": "0.6666666666666666",
    "66": "1.9523809523809526",
    "67": "2.072727272727273",
    "68": "3.1",
    "69": "2.0",
    "70": "2.7",
    "71": "2.3333333333333335",
    "72": "2.0",
    "73": "0.0",
    "74": "0.0",
    "75": "NaN",
    "77": "NaN",
    "NULL": "1.3789173789173796"
  },
  {
    "18": "0.0",
    "19": "0.5",
    "20": "1.1428571428571428",
    "21": "2.011111111111111",
    "22": "2.2181818181818183",
    "23": "2.566666666666667",
    "24": "1.8614718614718613",
    "25": "2.321637426900585",
    "26": "1.7391304347826086",
    "27": "1.9687055476529163",
    "28": "1.7835497835497836",
    "29": "1.8463203463203466",
    "30": "1.8806818181818183",
    "31": "1.3061538461538462",
    "32": "1.8705882352941168",
    "33": "1.6521739130434783",
    "34": "1.2384615384615385",
    "35": "1.7379032258064515",
    "36": "1.706896551724138",
    "37": "1.9932523616734137",
    "38": "1.4264367816091956",
    "39": "1.681511470985155",
    "40": "2.136636636636637",
    "41": "1.8584615384615382",
    "42": "2.011396011396012",
    "43": "2.4871794871794872",
    "44": "1.8584615384615377",
    "45": "1.8840579710144925",
    "46": "2.3261538461538454",
    "47": "2.2651209677419355",
    "48": "1.6730158730158726",
    "49": "1.734848484848485",
    "50": "1.904201680672269",
    "51": "1.564393939393939",
    "52": "1.747126436781609",
    "53": "2.099206349206349",
    "54": "1.874643874643874",
    "55": "1.9333333333333333",
    "56": "1.8986928104575165",
    "57": "1.3766666666666667",
    "58": "2.174603174603174",
    "59": "2.1823361823361815",
    "60": "2.057142857142857",
    "61": "1.380952380952381",
    "62": "1.594771241830065",
    "63": "1.355263157894737",
    "64": "1.5659340659340657",
    "65": "1.695238095238095",
    "66": "1.8095238095238095",
    "67": "1.8727272727272726",
    "68": "0.7",
    "69": "1.8392857142857142",
    "70": "4.800000000000001",
    "71": "3.0",
    "72": "2.0",
    "73": "0.0",
    "74": "4.5",
    "75": "NaN",
    "77": "NaN",
    "NULL": "2.1396011396011394"
  },
  {
    "18": "2.0",
    "19": "8.0",
    "20": "1.9523809523809526",
    "21": "2.7666666666666666",
    "22": "2.8909090909090915",
    "23": "2.2666666666666666",
    "24": "2.7554112554112553",
    "25": "2.3859649122807016",
    "26": "1.940217391304348",
    "27": "1.6593172119487922",
    "28": "1.7770562770562768",
    "29": "1.7510822510822515",
    "30": "1.8825757575757567",
    "31": "1.593846153846154",
    "32": "1.9462184873949582",
    "33": "1.940217391304348",
    "34": "1.5338461538461539",
    "35": "2.157258064516129",
    "36": "1.9264367816091956",
    "37": "2.1781376518218623",
    "38": "1.7712643678160913",
    "39": "2.190283400809716",
    "40": "1.6591591591591595",
    "41": "2.241538461538462",
    "42": "1.9943019943019946",
    "43": "1.9943019943019946",
    "44": "1.5446153846153845",
    "45": "1.346014492753623",
    "46": "1.9753846153846157",
    "47": "2.7580645161290325",
    "48": "1.3301587301587299",
    "49": "1.6837121212121215",
    "50": "2.045378151260504",
    "51": "1.3712121212121215",
    "52": "1.5229885057471266",
    "53": "1.7394179894179889",
    "54": "1.8233618233618227",
    "55": "1.8",
    "56": "1.6764705882352942",
    "57": "1.6066666666666671",
    "58": "1.9510582010582012",
    "59": "1.5498575498575506",
    "60": "2.1476190476190475",
    "61": "1.6",
    "62": "1.5555555555555558",
    "63": "1.9368421052631581",
    "64": "1.7197802197802199",
    "65": "2.266666666666667",
    "66": "1.2857142857142858",
    "67": "1.3636363636363633",
    "68": "0.3",
    "69": "1.0714285714285714",
    "70": "1.7",
    "71": "2.333333333333333",
    "72": "2.0",
    "73": "2.0",
    "74": "4.5",
    "75": "NaN",
    "77": "NaN",
    "NULL": "1.4102564102564097"
  },
  {
    "18": "4.5",
    "19": "4.5",
    "20": "1.2857142857142858",
    "21": "1.7333333333333334",
    "22": "2.2181818181818183",
    "23": "2.4",
    "24": "2.2077922077922074",
    "25": "2.2631578947368416",
    "26": "1.710144927536232",
    "27": "2.1543385490753915",
    "28": "1.8614718614718608",
    "29": "1.7056277056277058",
    "30": "1.4375",
    "31": "1.5584615384615383",
    "32": "2.0554621848739494",
    "33": "2.0851449275362315",
    "34": "0.7153846153846155",
    "35": "1.8215725806451613",
    "36": "1.9643678160919544",
    "37": "1.9122807017543861",
    "38": "1.8206896551724134",
    "39": "1.673414304993252",
    "40": "1.866366366366366",
    "41": "1.5646153846153845",
    "42": "2.1823361823361824",
    "43": "1.7122507122507122",
    "44": "1.3184615384615384",
    "45": "2.144927536231884",
    "46": "1.7",
    "47": "2.1774193548387095",
    "48": "2.2444444444444445",
    "49": "1.46780303030303",
    "50": "1.5260504201680678",
    "51": "1.40530303030303",
    "52": "1.4264367816091954",
    "53": "1.4431216931216928",
    "54": "1.8490028490028487",
    "55": "1.3625",
    "56": "2.0947712418300655",
    "57": "0.9733333333333337",
    "58": "1.328042328042328",
    "59": "2.182336182336182",
    "60": "1.5904761904761906",
    "61": "0.9238095238095239",
    "62": "1.5849673202614376",
    "63": "1.1026315789473682",
    "64": "1.1703296703296704",
    "65": "1.952380952380952",
    "66": "2.0",
    "67": "1.5636363636363637",
    "68": "0.2666666666666667",
    "69": "1.2678571428571428",
    "70": "1.7000000000000002",
    "71": "1.3333333333333333",
    "72": "0.5",
    "73": "4.5",
    "74": "0.5",
    "75": "NaN",
    "77": "NaN",
    "NULL": "2.028490028490028"
  },
  {
    "18": "0.0",
    "19": "8.0",
    "20": "1.1428571428571428",
    "21": "1.822222222222222",
    "22": "2.2727272727272725",
    "23": "2.4",
    "24": "2.4675324675324677",
    "25": "1.8771929824561404",
    "26": "2.157608695652174",
    "27": "1.6443812233285915",
    "28": "2.1558441558441563",
    "29": "2.4675324675324672",
    "30": "2.215909090909091",
    "31": "1.884615384615385",
    "32": "2.05546218487395",
    "33": "1.818840579710145",
    "34": "1.835384615384616",
    "35": "2.095766129032258",
    "36": "1.9126436781609193",
    "37": "2.062078272604588",
    "38": "1.747126436781609",
    "39": "1.985155195681511",
    "40": "1.4744744744744744",
    "41": "1.866153846153846",
    "42": "2.4216524216524222",
    "43": "1.8717948717948718",
    "44": "1.495384615384615",
    "45": "1.565217391304348",
    "46": "2.215384615384616",
    "47": "2.129032258064516",
    "48": "1.5206349206349206",
    "49": "1.7102272727272732",
    "50": "2.1630252100840335",
    "51": "1.484848484848484",
    "52": "1.8264367816091955",
    "53": "1.5277777777777777",
    "54": "1.6410256410256407",
    "55": "1.5333333333333334",
    "56": "1.5555555555555558",
    "57": "1.9166666666666667",
    "58": "2.1521164021164028",
    "59": "1.4729344729344733",
    "60": "2.161904761904762",
    "61": "2.3523809523809525",
    "62": "2.0",
    "63": "2.0526315789473686",
    "64": "1.8021978021978025",
    "65": "2.142857142857143",
    "66": "1.9047619047619049",
    "67": "1.690909090909091",
    "68": "1.3666666666666667",
    "69": "0.2857142857142857",
    "70": "1.5",
    "71": "0.0",
    "72": "0.0",
    "73": "2.0",
    "74": "2.0",
    "75": "NaN",
    "77": "NaN",
    "NULL": "2.487179487179487"
  },
  {
    "18": "4.5",
    "19": "0.0",
    "20": "2.0",
    "21": "1.6",
    "22": "1.5636363636363637",
    "23": "1.8666666666666665",
    "24": "1.4567099567099568",
    "25": "1.0",
    "26": "0.9112318840579708",
    "27": "1.323613086770981",
    "28": "2.051948051948052",
    "29": "1.4567099567099568",
    "30": "2.070075757575758",
    "31": "1.1646153846153846",
    "32": "1.5966386554621856",
    "33": "1.6358695652173914",
    "34": "1.5584615384615375",
    "35": "1.4264112903225807",
    "36": "1.6333333333333329",
    "37": "1.4466936572199727",
    "38": "1.6367816091954026",
    "39": "1.2361673414304999",
    "40": "1.5855855855855852",
    "41": "1.94",
    "42": "1.7720797720797716",
    "43": "1.538461538461538",
    "44": "1.5815384615384613",
    "45": "1.797101449275362",
    "46": "1.5261538461538455",
    "47": "1.6602822580645162",
    "48": "1.5896825396825396",
    "49": "1.4053030303030305",
    "50": "1.5042016806722691",
    "51": "1.876893939393941",
    "52": "1.4298850574712643",
    "53": "1.3703703703703705",
    "54": "1.3333333333333337",
    "55": "1.1291666666666667",
    "56": "2.264705882352941",
    "57": "1.4266666666666665",
    "58": "1.802910052910053",
    "59": "1.4102564102564108",
    "60": "2.0142857142857147",
    "61": "1.2666666666666668",
    "62": "1.6764705882352937",
    "63": "1.589473684210526",
    "64": "2.065934065934066",
    "65": "1.3523809523809525",
    "66": "0.8095238095238094",
    "67": "1.8181818181818183",
    "68": "2.2666666666666666",
    "69": "1.6428571428571428",
    "70": "1.3000000000000003",
    "71": "3.0",
    "72": "8.0",
    "73": "0.5",
    "74": "2.0",
    "75": "NaN",
    "77": "NaN",
    "NULL": "2.1054131054131067"
  },
  {
    "18": "0.5",
    "19": "0.0",
    "20": "0.2857142857142857",
    "21": "0.6666666666666666",
    "22": "0.4727272727272728",
    "23": "0.2666666666666667",
    "24": "1.2294372294372296",
    "25": "1.210526315789474",
    "26": "0.7373188405797101",
    "27": "0.5803698435277382",
    "28": "1.4740259740259738",
    "29": "1.0411255411255411",
    "30": "1.3352272727272732",
    "31": "1.244615384615385",
    "32": "1.8319327731092443",
    "33": "0.9275362318840581",
    "34": "0.8138461538461541",
    "35": "1.0554435483870968",
    "36": "0.5793103448275865",
    "37": "1.0",
    "38": "0.9206896551724144",
    "39": "0.7989203778677463",
    "40": "0.9729729729729732",
    "41": "1.1215384615384616",
    "42": "1.712250712250712",
    "43": "0.41025641025641035",
    "44": "0.9184615384615386",
    "45": "1.5054347826086956",
    "46": "1.033846153846154",
    "47": "1.7056451612903225",
    "48": "0.8849206349206349",
    "49": "0.9223484848484852",
    "50": "0.9109243697478986",
    "51": "0.9034090909090907",
    "52": "1.2367816091954023",
    "53": "1.294973544973545",
    "54": "0.7692307692307693",
    "55": "0.8",
    "56": "0.996732026143791",
    "57": "0.8599999999999998",
    "58": "1.3333333333333333",
    "59": "0.6609686609686614",
    "60": "1.0285714285714287",
    "61": "1.4952380952380953",
    "62": "0.9281045751633985",
    "63": "0.8289473684210527",
    "64": "1.1043956043956045",
    "65": "1.2666666666666668",
    "66": "0.2857142857142857",
    "67": "0.6909090909090908",
    "68": "0.2666666666666667",
    "69": "0.2857142857142857",
    "70": "1.8",
    "71": "0.0",
    "72": "4.5",
    "73": "0.0",
    "74": "0.5",
    "75": "NaN",
    "77": "NaN",
    "NULL": "1.3447293447293447"
  }
];
},{}],"/Users/salmiju/Documents/koulujutut/information_visualisation/infoviz/app/data/district-mean.csv":[function(require,module,exports){
module.exports = [
  {
    "Varsinais-Suomi": "3.130434782608696",
    "Vaasa": "2.987654320987654",
    "Häme": "3.5125",
    "Oulu": "3.155555555555556",
    "Lappi": "3.018867924528302",
    "Kaakkois-Suomi": "3.333333333333333",
    "Helsinki": "3.01875",
    "Pirkanmaa": "3.145299145299145",
    "Uusimaa": "3.317460317460317",
    "Satakunta": "3.462962962962963",
    "Keski-Suomi": "3.077922077922078",
    "default": "4.0",
    "Savo-Karjala": "3.197802197802198"
  },
  {
    "Varsinais-Suomi": "3.076086956521739",
    "Vaasa": "3.234567901234568",
    "Häme": "3.275",
    "Oulu": "3.188888888888889",
    "Lappi": "3.471698113207547",
    "Kaakkois-Suomi": "3.244444444444444",
    "Helsinki": "3.0875",
    "Pirkanmaa": "3.188034188034188",
    "Uusimaa": "2.936507936507937",
    "Satakunta": "3.185185185185185",
    "Keski-Suomi": "3.350649350649351",
    "default": "2.0",
    "Savo-Karjala": "3.747252747252747"
  },
  {
    "Varsinais-Suomi": "2.478260869565217",
    "Vaasa": "2.493827160493827",
    "Häme": "2.5625",
    "Oulu": "2.777777777777778",
    "Lappi": "2.679245283018868",
    "Kaakkois-Suomi": "2.555555555555556",
    "Helsinki": "2.39375",
    "Pirkanmaa": "2.418803418803419",
    "Uusimaa": "2.626984126984127",
    "Satakunta": "3.37037037037037",
    "Keski-Suomi": "2.766233766233766",
    "default": "2.0",
    "Savo-Karjala": "2.615384615384615"
  },
  {
    "Varsinais-Suomi": "3.597826086956522",
    "Vaasa": "3.135802469135802",
    "Häme": "3.2875",
    "Oulu": "3.155555555555556",
    "Lappi": "2.981132075471698",
    "Kaakkois-Suomi": "3.355555555555556",
    "Helsinki": "3.59375",
    "Pirkanmaa": "3.307692307692308",
    "Uusimaa": "3.273809523809524",
    "Satakunta": "3.12962962962963",
    "Keski-Suomi": "3.402597402597403",
    "default": "2.0",
    "Savo-Karjala": "3.340659340659341"
  },
  {
    "Varsinais-Suomi": "2.891304347826087",
    "Vaasa": "3.160493827160494",
    "Häme": "3.25",
    "Oulu": "3.311111111111111",
    "Lappi": "3.320754716981132",
    "Kaakkois-Suomi": "3.222222222222222",
    "Helsinki": "2.90625",
    "Pirkanmaa": "3.145299145299145",
    "Uusimaa": "3.273809523809524",
    "Satakunta": "3.685185185185185",
    "Keski-Suomi": "3.064935064935065",
    "default": "2.0",
    "Savo-Karjala": "3.065934065934066"
  },
  {
    "Varsinais-Suomi": "2.945652173913043",
    "Vaasa": "2.716049382716049",
    "Häme": "3.3375",
    "Oulu": "3.4",
    "Lappi": "3.226415094339623",
    "Kaakkois-Suomi": "3.3",
    "Helsinki": "2.79375",
    "Pirkanmaa": "3.495726495726496",
    "Uusimaa": "3.115079365079365",
    "Satakunta": "3.611111111111111",
    "Keski-Suomi": "3.597402597402597",
    "default": "1.0",
    "Savo-Karjala": "3.527472527472527"
  },
  {
    "Varsinais-Suomi": "2.630434782608696",
    "Vaasa": "2.666666666666667",
    "Häme": "2.9",
    "Oulu": "2.744444444444444",
    "Lappi": "2.679245283018868",
    "Kaakkois-Suomi": "2.8",
    "Helsinki": "2.59375",
    "Pirkanmaa": "2.564102564102564",
    "Uusimaa": "2.76984126984127",
    "Satakunta": "3.037037037037037",
    "Keski-Suomi": "2.441558441558442",
    "default": "4.0",
    "Savo-Karjala": "2.692307692307692"
  },
  {
    "Varsinais-Suomi": "2.652173913043478",
    "Vaasa": "2.716049382716049",
    "Häme": "3.175",
    "Oulu": "2.455555555555556",
    "Lappi": "2.981132075471698",
    "Kaakkois-Suomi": "3.033333333333333",
    "Helsinki": "2.86875",
    "Pirkanmaa": "2.846153846153846",
    "Uusimaa": "2.662698412698413",
    "Satakunta": "3.148148148148148",
    "Keski-Suomi": "3.090909090909091",
    "default": "1.0",
    "Savo-Karjala": "2.945054945054945"
  },
  {
    "Varsinais-Suomi": "3.445652173913043",
    "Vaasa": "3.111111111111111",
    "Häme": "3.025",
    "Oulu": "3.222222222222222",
    "Lappi": "3.358490566037736",
    "Kaakkois-Suomi": "3.377777777777778",
    "Helsinki": "3.4875",
    "Pirkanmaa": "3.333333333333333",
    "Uusimaa": "3.55952380952381",
    "Satakunta": "3.222222222222222",
    "Keski-Suomi": "3.246753246753247",
    "default": "1.0",
    "Savo-Karjala": "3.076923076923077"
  },
  {
    "Varsinais-Suomi": "1.891304347826087",
    "Vaasa": "2.160493827160494",
    "Häme": "2.0875",
    "Oulu": "2.122222222222222",
    "Lappi": "2.471698113207547",
    "Kaakkois-Suomi": "2.166666666666667",
    "Helsinki": "2.5875",
    "Pirkanmaa": "2.025641025641026",
    "Uusimaa": "2.222222222222222",
    "Satakunta": "2.407407407407407",
    "Keski-Suomi": "1.896103896103896",
    "default": "2.0",
    "Savo-Karjala": "2.087912087912088"
  },
  {
    "Varsinais-Suomi": "2.032608695652174",
    "Vaasa": "1.864197530864198",
    "Häme": "2.0375",
    "Oulu": "1.955555555555556",
    "Lappi": "2.056603773584906",
    "Kaakkois-Suomi": "1.922222222222222",
    "Helsinki": "2.0125",
    "Pirkanmaa": "2.094017094017094",
    "Uusimaa": "2.150793650793651",
    "Satakunta": "2.166666666666667",
    "Keski-Suomi": "2.12987012987013",
    "default": "2.0",
    "Savo-Karjala": "1.758241758241758"
  },
  {
    "Varsinais-Suomi": "3.445652173913043",
    "Vaasa": "3.703703703703704",
    "Häme": "3.375",
    "Oulu": "3.966666666666667",
    "Lappi": "4.528301886792453",
    "Kaakkois-Suomi": "3.766666666666667",
    "Helsinki": "2.9375",
    "Pirkanmaa": "3.384615384615385",
    "Uusimaa": "3.333333333333333",
    "Satakunta": "3.611111111111111",
    "Keski-Suomi": "3.597402597402597",
    "default": "2.0",
    "Savo-Karjala": "4.043956043956044"
  },
  {
    "Varsinais-Suomi": "2.293478260869565",
    "Vaasa": "2.62962962962963",
    "Häme": "2.5125",
    "Oulu": "2.755555555555556",
    "Lappi": "2.584905660377358",
    "Kaakkois-Suomi": "2.4",
    "Helsinki": "2.4875",
    "Pirkanmaa": "2.615384615384615",
    "Uusimaa": "2.726190476190476",
    "Satakunta": "2.981481481481481",
    "Keski-Suomi": "2.61038961038961",
    "default": "2.0",
    "Savo-Karjala": "2.406593406593407"
  },
  {
    "Varsinais-Suomi": "3.554347826086957",
    "Vaasa": "4.061728395061728",
    "Häme": "3.7625",
    "Oulu": "3.722222222222222",
    "Lappi": "3.69811320754717",
    "Kaakkois-Suomi": "3.344444444444444",
    "Helsinki": "3.46875",
    "Pirkanmaa": "3.735042735042735",
    "Uusimaa": "3.488095238095238",
    "Satakunta": "3.481481481481481",
    "Keski-Suomi": "3.636363636363636",
    "default": "4.0",
    "Savo-Karjala": "3.285714285714286"
  },
  {
    "Varsinais-Suomi": "3.08695652173913",
    "Vaasa": "2.641975308641975",
    "Häme": "2.65",
    "Oulu": "2.644444444444444",
    "Lappi": "2.226415094339623",
    "Kaakkois-Suomi": "2.6",
    "Helsinki": "3.0625",
    "Pirkanmaa": "2.777777777777778",
    "Uusimaa": "2.952380952380952",
    "Satakunta": "3.037037037037037",
    "Keski-Suomi": "3.025974025974026",
    "default": "2.0",
    "Savo-Karjala": "2.516483516483516"
  },
  {
    "Varsinais-Suomi": "3.195652173913043",
    "Vaasa": "3.432098765432099",
    "Häme": "3.325",
    "Oulu": "3.366666666666667",
    "Lappi": "3.264150943396226",
    "Kaakkois-Suomi": "3.644444444444444",
    "Helsinki": "3.5875",
    "Pirkanmaa": "3.401709401709402",
    "Uusimaa": "3.44047619047619",
    "Satakunta": "3.296296296296296",
    "Keski-Suomi": "3.480519480519481",
    "default": "5.0",
    "Savo-Karjala": "3.615384615384615"
  },
  {
    "Varsinais-Suomi": "3.010869565217391",
    "Vaasa": "3.148148148148148",
    "Häme": "3.05",
    "Oulu": "3.011111111111111",
    "Lappi": "2.943396226415094",
    "Kaakkois-Suomi": "2.933333333333333",
    "Helsinki": "3.3125",
    "Pirkanmaa": "3.008547008547009",
    "Uusimaa": "2.896825396825397",
    "Satakunta": "2.574074074074074",
    "Keski-Suomi": "3.142857142857143",
    "default": "3.0",
    "Savo-Karjala": "3.076923076923077"
  },
  {
    "Varsinais-Suomi": "1.934782608695652",
    "Vaasa": "2.098765432098765",
    "Häme": "1.9125",
    "Oulu": "2.0",
    "Lappi": "1.867924528301887",
    "Kaakkois-Suomi": "2.011111111111111",
    "Helsinki": "2.29375",
    "Pirkanmaa": "2.102564102564103",
    "Uusimaa": "2.297619047619048",
    "Satakunta": "2.407407407407407",
    "Keski-Suomi": "1.857142857142857",
    "default": "2.0",
    "Savo-Karjala": "1.857142857142857"
  },
  {
    "Varsinais-Suomi": "3.673913043478261",
    "Vaasa": "3.407407407407407",
    "Häme": "3.775",
    "Oulu": "3.477777777777778",
    "Lappi": "3.679245283018868",
    "Kaakkois-Suomi": "3.777777777777778",
    "Helsinki": "3.28125",
    "Pirkanmaa": "3.521367521367521",
    "Uusimaa": "3.678571428571429",
    "Satakunta": "3.944444444444444",
    "Keski-Suomi": "3.337662337662338",
    "default": "5.0",
    "Savo-Karjala": "3.582417582417582"
  },
  {
    "Varsinais-Suomi": "3.08695652173913",
    "Vaasa": "2.814814814814815",
    "Häme": "3.0875",
    "Oulu": "3.0",
    "Lappi": "3.188679245283019",
    "Kaakkois-Suomi": "3.055555555555556",
    "Helsinki": "2.2",
    "Pirkanmaa": "3.085470085470085",
    "Uusimaa": "2.845238095238095",
    "Satakunta": "3.314814814814815",
    "Keski-Suomi": "2.805194805194805",
    "default": "1.0",
    "Savo-Karjala": "3.21978021978022"
  },
  {
    "Varsinais-Suomi": "3.891304347826087",
    "Vaasa": "3.617283950617284",
    "Häme": "3.625",
    "Oulu": "3.577777777777778",
    "Lappi": "3.867924528301887",
    "Kaakkois-Suomi": "3.522222222222222",
    "Helsinki": "4.1125",
    "Pirkanmaa": "3.760683760683761",
    "Uusimaa": "3.753968253968254",
    "Satakunta": "3.259259259259259",
    "Keski-Suomi": "3.844155844155844",
    "default": "4.0",
    "Savo-Karjala": "3.637362637362637"
  },
  {
    "Varsinais-Suomi": "3.58695652173913",
    "Vaasa": "3.493827160493827",
    "Häme": "3.5",
    "Oulu": "3.333333333333333",
    "Lappi": "3.452830188679245",
    "Kaakkois-Suomi": "3.455555555555556",
    "Helsinki": "4.03125",
    "Pirkanmaa": "3.615384615384615",
    "Uusimaa": "3.531746031746032",
    "Satakunta": "3.12962962962963",
    "Keski-Suomi": "3.818181818181818",
    "default": "4.0",
    "Savo-Karjala": "3.67032967032967"
  },
  {
    "Varsinais-Suomi": "2.782608695652174",
    "Vaasa": "2.703703703703704",
    "Häme": "2.675",
    "Oulu": "3.055555555555556",
    "Lappi": "2.566037735849057",
    "Kaakkois-Suomi": "3.066666666666667",
    "Helsinki": "2.44375",
    "Pirkanmaa": "2.863247863247863",
    "Uusimaa": "2.916666666666667",
    "Satakunta": "3.296296296296296",
    "Keski-Suomi": "2.779220779220779",
    "default": "4.0",
    "Savo-Karjala": "2.846153846153846"
  },
  {
    "Varsinais-Suomi": "3.25",
    "Vaasa": "3.469135802469136",
    "Häme": "3.525",
    "Oulu": "3.166666666666667",
    "Lappi": "3.245283018867925",
    "Kaakkois-Suomi": "3.433333333333333",
    "Helsinki": "2.80625",
    "Pirkanmaa": "3.35042735042735",
    "Uusimaa": "3.349206349206349",
    "Satakunta": "3.537037037037037",
    "Keski-Suomi": "3.194805194805195",
    "default": "4.0",
    "Savo-Karjala": "3.582417582417582"
  },
  {
    "Varsinais-Suomi": "2.391304347826087",
    "Vaasa": "2.679012345679012",
    "Häme": "2.4625",
    "Oulu": "2.533333333333333",
    "Lappi": "2.584905660377358",
    "Kaakkois-Suomi": "2.344444444444444",
    "Helsinki": "2.425",
    "Pirkanmaa": "2.512820512820513",
    "Uusimaa": "2.531746031746032",
    "Satakunta": "2.648148148148148",
    "Keski-Suomi": "2.558441558441558",
    "default": "2.0",
    "Savo-Karjala": "2.274725274725275"
  },
  {
    "Varsinais-Suomi": "3.282608695652174",
    "Vaasa": "3.432098765432099",
    "Häme": "3.0625",
    "Oulu": "3.244444444444444",
    "Lappi": "3.415094339622642",
    "Kaakkois-Suomi": "3.244444444444444",
    "Helsinki": "3.275",
    "Pirkanmaa": "3.162393162393162",
    "Uusimaa": "3.031746031746032",
    "Satakunta": "3.166666666666667",
    "Keski-Suomi": "3.285714285714286",
    "default": "4.0",
    "Savo-Karjala": "3.516483516483516"
  },
  {
    "Varsinais-Suomi": "2.195652173913043",
    "Vaasa": "2.209876543209877",
    "Häme": "2.0125",
    "Oulu": "2.311111111111111",
    "Lappi": "2.377358490566038",
    "Kaakkois-Suomi": "2.133333333333333",
    "Helsinki": "2.28125",
    "Pirkanmaa": "2.290598290598291",
    "Uusimaa": "2.496031746031746",
    "Satakunta": "2.462962962962963",
    "Keski-Suomi": "2.155844155844156",
    "default": "1.0",
    "Savo-Karjala": "1.879120879120879"
  },
  {
    "Varsinais-Suomi": "2.608695652173913",
    "Vaasa": "2.740740740740741",
    "Häme": "3.0",
    "Oulu": "2.788888888888889",
    "Lappi": "2.754716981132075",
    "Kaakkois-Suomi": "3.0",
    "Helsinki": "2.68125",
    "Pirkanmaa": "2.837606837606838",
    "Uusimaa": "3.107142857142857",
    "Satakunta": "3.074074074074074",
    "Keski-Suomi": "2.948051948051948",
    "default": "2.0",
    "Savo-Karjala": "2.813186813186813"
  },
  {
    "Varsinais-Suomi": "2.402173913043478",
    "Vaasa": "2.617283950617284",
    "Häme": "2.225",
    "Oulu": "2.311111111111111",
    "Lappi": "2.849056603773585",
    "Kaakkois-Suomi": "2.266666666666667",
    "Helsinki": "2.15",
    "Pirkanmaa": "2.290598290598291",
    "Uusimaa": "2.404761904761905",
    "Satakunta": "2.740740740740741",
    "Keski-Suomi": "2.441558441558442",
    "default": "2.0",
    "Savo-Karjala": "2.362637362637363"
  },
  {
    "Varsinais-Suomi": "4.08695652173913",
    "Vaasa": "3.938271604938272",
    "Häme": "4.15",
    "Oulu": "4.088888888888889",
    "Lappi": "3.811320754716981",
    "Kaakkois-Suomi": "4.044444444444444",
    "Helsinki": "4.225",
    "Pirkanmaa": "4.102564102564103",
    "Uusimaa": "4.071428571428571",
    "Satakunta": "3.777777777777778",
    "Keski-Suomi": "4.168831168831169",
    "default": "4.0",
    "Savo-Karjala": "4.142857142857143"
  }
];
},{}],"/Users/salmiju/Documents/koulujutut/information_visualisation/infoviz/app/data/district-variance.csv":[function(require,module,exports){
module.exports = [
  {
    "Varsinais-Suomi": "2.092689918776875",
    "Vaasa": "2.0873456790123477",
    "Häme": "1.847943037974682",
    "Oulu": "2.042946317103619",
    "Lappi": "2.28809869375907",
    "Kaakkois-Suomi": "1.7752808988764044",
    "Helsinki": "1.9556210691823936",
    "Pirkanmaa": "2.108016504568229",
    "Uusimaa": "1.7314867514070755",
    "Satakunta": "1.8759608665269043",
    "Keski-Suomi": "2.1517429938482544",
    "default": "NaN",
    "Savo-Karjala": "2.0048840048840044"
  },
  {
    "Varsinais-Suomi": "1.829311992355473",
    "Vaasa": "1.95679012345679",
    "Häme": "1.7462025316455692",
    "Oulu": "1.8852684144818985",
    "Lappi": "1.869375907111756",
    "Kaakkois-Suomi": "1.7822721598002482",
    "Helsinki": "1.8790880503144671",
    "Pirkanmaa": "1.7229590333038594",
    "Uusimaa": "1.6692594700562866",
    "Satakunta": "1.5122292103424175",
    "Keski-Suomi": "1.572795625427203",
    "default": "NaN",
    "Savo-Karjala": "1.7242979242979242"
  },
  {
    "Varsinais-Suomi": "2.010511227902529",
    "Vaasa": "2.0280864197530866",
    "Häme": "2.553006329113924",
    "Oulu": "2.3545568039950053",
    "Lappi": "2.298984034833091",
    "Kaakkois-Suomi": "2.1822721598002492",
    "Helsinki": "2.0389544025157242",
    "Pirkanmaa": "2.228264073091662",
    "Uusimaa": "2.027635489786884",
    "Satakunta": "2.199860237596086",
    "Keski-Suomi": "2.5235816814764216",
    "default": "NaN",
    "Savo-Karjala": "2.2837606837606805"
  },
  {
    "Varsinais-Suomi": "1.3199952221691351",
    "Vaasa": "1.443827160493827",
    "Häme": "1.194778481012658",
    "Oulu": "1.571036204744068",
    "Lappi": "1.634252539912917",
    "Kaakkois-Suomi": "1.4676654182272173",
    "Helsinki": "1.3496462264150944",
    "Pirkanmaa": "1.5769230769230793",
    "Uusimaa": "1.4267216846898103",
    "Satakunta": "1.43570929419986",
    "Keski-Suomi": "1.5857826384142177",
    "default": "NaN",
    "Savo-Karjala": "1.7604395604395602"
  },
  {
    "Varsinais-Suomi": "2.339703774486381",
    "Vaasa": "2.511419753086416",
    "Häme": "2.0126582278481013",
    "Oulu": "1.9021223470661677",
    "Lappi": "2.6835994194484747",
    "Kaakkois-Suomi": "2.579275905118605",
    "Helsinki": "2.286753144654088",
    "Pirkanmaa": "2.314913056292367",
    "Uusimaa": "2.175725668753561",
    "Satakunta": "1.616002795248077",
    "Keski-Suomi": "2.324675324675327",
    "default": "NaN",
    "Savo-Karjala": "2.173382173382173"
  },
  {
    "Varsinais-Suomi": "2.315695174390827",
    "Vaasa": "1.980864197530865",
    "Häme": "2.201107594936709",
    "Oulu": "2.2876404494382045",
    "Lappi": "2.178519593613932",
    "Kaakkois-Suomi": "1.9202247191011237",
    "Helsinki": "2.127004716981133",
    "Pirkanmaa": "1.9245505452401974",
    "Uusimaa": "2.3890944159868477",
    "Satakunta": "1.5628930817610078",
    "Keski-Suomi": "1.7963089542036905",
    "default": "NaN",
    "Savo-Karjala": "1.7409035409035423"
  },
  {
    "Varsinais-Suomi": "1.9058767319636911",
    "Vaasa": "1.774999999999998",
    "Häme": "1.8126582278481005",
    "Oulu": "1.9227215980024974",
    "Lappi": "1.7989840348330917",
    "Kaakkois-Suomi": "1.9595505617977513",
    "Helsinki": "1.9911556603773586",
    "Pirkanmaa": "2.127320954907163",
    "Uusimaa": "1.755580851198386",
    "Satakunta": "1.658979734451432",
    "Keski-Suomi": "1.9077238550922764",
    "default": "NaN",
    "Savo-Karjala": "1.9931623931623945"
  },
  {
    "Varsinais-Suomi": "1.7677974199713333",
    "Vaasa": "1.580864197530865",
    "Häme": "1.3360759493670893",
    "Oulu": "1.2171036204744083",
    "Lappi": "1.6342525399129177",
    "Kaakkois-Suomi": "1.4483146067415715",
    "Helsinki": "1.636753144654088",
    "Pirkanmaa": "1.49336870026525",
    "Uusimaa": "1.4276070321887036",
    "Satakunta": "1.2606568832983922",
    "Keski-Suomi": "1.6363636363636374",
    "default": "NaN",
    "Savo-Karjala": "1.630280830280832"
  },
  {
    "Varsinais-Suomi": "1.964046822742475",
    "Vaasa": "1.8999999999999992",
    "Häme": "2.1006329113924047",
    "Oulu": "2.1298377028714115",
    "Lappi": "2.119013062409289",
    "Kaakkois-Suomi": "2.282646691635456",
    "Helsinki": "1.8992138364779865",
    "Pirkanmaa": "1.9482758620689649",
    "Uusimaa": "1.6657655093910075",
    "Satakunta": "2.327044025157233",
    "Keski-Suomi": "2.319890635680109",
    "default": "NaN",
    "Savo-Karjala": "2.1384615384615375"
  },
  {
    "Varsinais-Suomi": "1.1968466316292397",
    "Vaasa": "1.4614197530864232",
    "Häme": "1.4985759493670865",
    "Oulu": "1.479275905118602",
    "Lappi": "1.9462989840348328",
    "Kaakkois-Suomi": "1.5561797752808983",
    "Helsinki": "1.7407232704402542",
    "Pirkanmaa": "1.3355437665782497",
    "Uusimaa": "1.4165559982293034",
    "Satakunta": "1.7931516422082454",
    "Keski-Suomi": "1.1206425153793576",
    "default": "NaN",
    "Savo-Karjala": "1.3032967032967053"
  },
  {
    "Varsinais-Suomi": "1.6143096034400397",
    "Vaasa": "1.443827160493828",
    "Häme": "1.5302215189873414",
    "Oulu": "1.6609238451935084",
    "Lappi": "1.7851959361393321",
    "Kaakkois-Suomi": "1.4433208489388247",
    "Helsinki": "1.7231132075471693",
    "Pirkanmaa": "1.6893604479811373",
    "Uusimaa": "1.7381268576487714",
    "Satakunta": "1.7264150943396233",
    "Keski-Suomi": "1.7987012987012998",
    "default": "NaN",
    "Savo-Karjala": "1.1853479853479842"
  },
  {
    "Varsinais-Suomi": "1.6783325370281892",
    "Vaasa": "1.436111111111111",
    "Häme": "1.8322784810126582",
    "Oulu": "0.976404494382022",
    "Lappi": "0.7155297532656023",
    "Kaakkois-Suomi": "1.3943820224719088",
    "Helsinki": "1.8073899371069182",
    "Pirkanmaa": "1.7559681697612708",
    "Uusimaa": "1.5697211155378505",
    "Satakunta": "1.4496855345911954",
    "Keski-Suomi": "1.7699931647300071",
    "default": "NaN",
    "Savo-Karjala": "1.0647130647130656"
  },
  {
    "Varsinais-Suomi": "1.8799569995222176",
    "Vaasa": "1.91111111111111",
    "Häme": "1.8479430379746833",
    "Oulu": "2.119350811485641",
    "Lappi": "2.4397677793904218",
    "Kaakkois-Suomi": "2.1078651685393255",
    "Helsinki": "2.1004716981132048",
    "Pirkanmaa": "2.1352785145888578",
    "Uusimaa": "1.8729368241320383",
    "Satakunta": "1.9430468204053128",
    "Keski-Suomi": "2.0304169514695833",
    "default": "NaN",
    "Savo-Karjala": "1.999511599511599"
  },
  {
    "Varsinais-Suomi": "1.678332537028189",
    "Vaasa": "1.2336419753086423",
    "Häme": "1.3479430379746828",
    "Oulu": "1.326466916354558",
    "Lappi": "1.4455732946298978",
    "Kaakkois-Suomi": "1.4867665418227216",
    "Helsinki": "1.5084512578616351",
    "Pirkanmaa": "1.6102269378131424",
    "Uusimaa": "1.4938816163915833",
    "Satakunta": "1.2732354996505935",
    "Keski-Suomi": "1.5765550239234443",
    "default": "NaN",
    "Savo-Karjala": "1.5619047619047604"
  },
  {
    "Varsinais-Suomi": "1.9264214046822716",
    "Vaasa": "1.8077160493827147",
    "Häme": "2.10379746835443",
    "Oulu": "1.6249687890137352",
    "Lappi": "1.5246734397677786",
    "Kaakkois-Suomi": "1.7033707865168546",
    "Helsinki": "1.9205974842767295",
    "Pirkanmaa": "1.7260536398467423",
    "Uusimaa": "1.734775184974389",
    "Satakunta": "1.5835080363382248",
    "Keski-Suomi": "2.025632262474366",
    "default": "NaN",
    "Savo-Karjala": "1.4525030525030531"
  },
  {
    "Varsinais-Suomi": "2.3129479216435747",
    "Vaasa": "2.0734567901234575",
    "Häme": "2.1715189873417717",
    "Oulu": "2.302247191011235",
    "Lappi": "2.2750362844702483",
    "Kaakkois-Suomi": "1.8047440699126103",
    "Helsinki": "1.9922955974842749",
    "Pirkanmaa": "2.001031535514291",
    "Uusimaa": "1.9207455890722827",
    "Satakunta": "2.1369671558350802",
    "Keski-Suomi": "1.8318523581681494",
    "default": "NaN",
    "Savo-Karjala": "2.0170940170940157"
  },
  {
    "Varsinais-Suomi": "2.7141662685140893",
    "Vaasa": "2.027777777777778",
    "Häme": "2.4278481012658206",
    "Oulu": "2.3257178526841438",
    "Lappi": "2.4390420899854854",
    "Kaakkois-Suomi": "2.3999999999999995",
    "Helsinki": "2.404874213836478",
    "Pirkanmaa": "2.3361332154435615",
    "Uusimaa": "2.220388288117372",
    "Satakunta": "2.2113906359189395",
    "Keski-Suomi": "2.176691729323308",
    "default": "NaN",
    "Savo-Karjala": "2.427350427350426"
  },
  {
    "Varsinais-Suomi": "1.5121834687052078",
    "Vaasa": "1.7901234567901227",
    "Häme": "1.5998417721518985",
    "Oulu": "2.0",
    "Lappi": "1.6937590711175627",
    "Kaakkois-Suomi": "1.6290886392010002",
    "Helsinki": "2.082979559748425",
    "Pirkanmaa": "2.110079575596817",
    "Uusimaa": "1.883181559476376",
    "Satakunta": "2.132774283717679",
    "Keski-Suomi": "1.308270676691729",
    "default": "NaN",
    "Savo-Karjala": "1.3904761904761906"
  },
  {
    "Varsinais-Suomi": "2.046344959388436",
    "Vaasa": "1.8944444444444428",
    "Häme": "1.518354430379746",
    "Oulu": "2.2298377028714156",
    "Lappi": "2.0297532656023227",
    "Kaakkois-Suomi": "1.7478152309612969",
    "Helsinki": "2.0398977987421385",
    "Pirkanmaa": "2.0275567344532837",
    "Uusimaa": "1.6293397837222547",
    "Satakunta": "1.2987421383647808",
    "Keski-Suomi": "2.2002734107997264",
    "default": "NaN",
    "Savo-Karjala": "2.0459096459096475"
  },
  {
    "Varsinais-Suomi": "2.2560917343526006",
    "Vaasa": "2.0027777777777773",
    "Häme": "2.0555379746835465",
    "Oulu": "1.8651685393258426",
    "Lappi": "1.9637155297532674",
    "Kaakkois-Suomi": "2.2328339575530594",
    "Helsinki": "1.7333333333333338",
    "Pirkanmaa": "1.9753905098732687",
    "Uusimaa": "2.226949345475243",
    "Satakunta": "2.1820405310971345",
    "Keski-Suomi": "1.7641831852358152",
    "default": "NaN",
    "Savo-Karjala": "1.9067155067155088"
  },
  {
    "Varsinais-Suomi": "2.1199235547061646",
    "Vaasa": "2.6641975308641976",
    "Häme": "2.8449367088607596",
    "Oulu": "2.4489388264669167",
    "Lappi": "2.2322206095790995",
    "Kaakkois-Suomi": "2.70174781523096",
    "Helsinki": "1.9746855345911933",
    "Pirkanmaa": "2.321544356027113",
    "Uusimaa": "2.5129323973945508",
    "Satakunta": "2.9126484975541596",
    "Keski-Suomi": "2.3438140806561862",
    "default": "NaN",
    "Savo-Karjala": "2.4114774114774136"
  },
  {
    "Varsinais-Suomi": "2.047300525561395",
    "Vaasa": "2.078086419753087",
    "Häme": "2.151898734177215",
    "Oulu": "2.3820224719101133",
    "Lappi": "2.06023222060958",
    "Kaakkois-Suomi": "2.1833957553058676",
    "Helsinki": "1.7285770440251573",
    "Pirkanmaa": "1.824933687002652",
    "Uusimaa": "2.050781002972238",
    "Satakunta": "2.3791055206149547",
    "Keski-Suomi": "1.4665071770334939",
    "default": "NaN",
    "Savo-Karjala": "1.645665445665445"
  },
  {
    "Varsinais-Suomi": "2.0401337792642154",
    "Vaasa": "1.76111111111111",
    "Häme": "1.8424050632911386",
    "Oulu": "1.918227215980025",
    "Lappi": "1.7503628447024673",
    "Kaakkois-Suomi": "2.062921348314606",
    "Helsinki": "1.8332940251572352",
    "Pirkanmaa": "1.9983790156203922",
    "Uusimaa": "1.8376494023904302",
    "Satakunta": "1.570929419986024",
    "Keski-Suomi": "2.3585099111414927",
    "default": "NaN",
    "Savo-Karjala": "1.8871794871794842"
  },
  {
    "Varsinais-Suomi": "2.2774725274725274",
    "Vaasa": "2.1771604938271576",
    "Häme": "1.8474683544303792",
    "Oulu": "2.365168539325845",
    "Lappi": "2.1502177068214814",
    "Kaakkois-Suomi": "2.270786516853935",
    "Helsinki": "2.471658805031443",
    "Pirkanmaa": "2.3502799882110232",
    "Uusimaa": "2.044899766015306",
    "Satakunta": "2.3665269042627526",
    "Keski-Suomi": "2.237867395762131",
    "default": "NaN",
    "Savo-Karjala": "2.0903540903540914"
  },
  {
    "Varsinais-Suomi": "1.8891543239369337",
    "Vaasa": "1.9706790123456777",
    "Häme": "1.6947784810126574",
    "Oulu": "1.9370786516853917",
    "Lappi": "2.093613933236576",
    "Kaakkois-Suomi": "1.6665418227215982",
    "Helsinki": "1.8056603773584894",
    "Pirkanmaa": "1.9761273209549042",
    "Uusimaa": "1.7639284133308009",
    "Satakunta": "1.9304682040531083",
    "Keski-Suomi": "2.0919343814080658",
    "default": "NaN",
    "Savo-Karjala": "1.534798534798536"
  },
  {
    "Varsinais-Suomi": "2.029144768275203",
    "Vaasa": "1.6734567901234574",
    "Häme": "1.831487341772152",
    "Oulu": "1.804744069912608",
    "Lappi": "2.2474600870827293",
    "Kaakkois-Suomi": "1.7373283395755295",
    "Helsinki": "1.9113207547169824",
    "Pirkanmaa": "2.1544356027114677",
    "Uusimaa": "1.7440080946057053",
    "Satakunta": "2.1037735849056607",
    "Keski-Suomi": "1.864661654135337",
    "default": "NaN",
    "Savo-Karjala": "1.8747252747252736"
  },
  {
    "Varsinais-Suomi": "1.7634973721930243",
    "Vaasa": "1.9929012345679014",
    "Häme": "1.4808544303797466",
    "Oulu": "1.969538077403247",
    "Lappi": "1.9317851959361394",
    "Kaakkois-Suomi": "1.5101123595505626",
    "Helsinki": "1.7380110062893082",
    "Pirkanmaa": "1.8975832596522244",
    "Uusimaa": "1.780860684247147",
    "Satakunta": "1.762753319357093",
    "Keski-Suomi": "1.6859193438140805",
    "default": "NaN",
    "Savo-Karjala": "1.1518925518925527"
  },
  {
    "Varsinais-Suomi": "1.7572861920687992",
    "Vaasa": "2.044444444444447",
    "Häme": "2.050632911392405",
    "Oulu": "1.8538077403245945",
    "Lappi": "1.919448476052248",
    "Kaakkois-Suomi": "1.9101123595505618",
    "Helsinki": "1.878891509433963",
    "Pirkanmaa": "2.206159740642503",
    "Uusimaa": "1.8968412066021663",
    "Satakunta": "1.8812019566736538",
    "Keski-Suomi": "1.9446343130553656",
    "default": "NaN",
    "Savo-Karjala": "1.975824175824176"
  },
  {
    "Varsinais-Suomi": "1.561753463927376",
    "Vaasa": "1.6891975308641975",
    "Häme": "1.543670886075949",
    "Oulu": "1.5425717852684144",
    "Lappi": "1.7844702467343971",
    "Kaakkois-Suomi": "1.5460674157303367",
    "Helsinki": "1.2981132075471713",
    "Pirkanmaa": "1.7079280872384301",
    "Uusimaa": "1.5167899829254414",
    "Satakunta": "1.6673654786862349",
    "Keski-Suomi": "1.5919343814080673",
    "default": "NaN",
    "Savo-Karjala": "1.7892551892551896"
  },
  {
    "Varsinais-Suomi": "0.9813664596273293",
    "Vaasa": "1.1586419753086423",
    "Häme": "1.0405063291139227",
    "Oulu": "1.0481897627965038",
    "Lappi": "1.3483309143686504",
    "Kaakkois-Suomi": "0.9418227215980015",
    "Helsinki": "0.8169811320754705",
    "Pirkanmaa": "1.0238726790450918",
    "Uusimaa": "1.0227660785429706",
    "Satakunta": "1.1949685534591188",
    "Keski-Suomi": "0.7737525632262486",
    "default": "NaN",
    "Savo-Karjala": "1.234920634920634"
  }
];
},{}],"/Users/salmiju/Documents/koulujutut/information_visualisation/infoviz/app/data/gender-mean.csv":[function(require,module,exports){
module.exports = [
  {
    "NULL": "4.25",
    "FEMALE": "3.09727626459144",
    "MALE": "3.266666666666667"
  },
  {
    "NULL": "4.0",
    "FEMALE": "3.214007782101167",
    "MALE": "3.169444444444444"
  },
  {
    "NULL": "2.5",
    "FEMALE": "2.21011673151751",
    "MALE": "2.880555555555556"
  },
  {
    "NULL": "3.25",
    "FEMALE": "3.494163424124514",
    "MALE": "3.204166666666667"
  },
  {
    "NULL": "4.0",
    "FEMALE": "2.949416342412451",
    "MALE": "3.316666666666667"
  },
  {
    "NULL": "3.25",
    "FEMALE": "2.916342412451362",
    "MALE": "3.409722222222222"
  },
  {
    "NULL": "4.5",
    "FEMALE": "2.595330739299611",
    "MALE": "2.768055555555556"
  },
  {
    "NULL": "3.0",
    "FEMALE": "2.906614785992218",
    "MALE": "2.783333333333333"
  },
  {
    "NULL": "3.0",
    "FEMALE": "3.14591439688716",
    "MALE": "3.477777777777778"
  },
  {
    "NULL": "3.0",
    "FEMALE": "2.212062256809339",
    "MALE": "2.170833333333333"
  },
  {
    "NULL": "3.5",
    "FEMALE": "1.929961089494163",
    "MALE": "2.090277777777778"
  },
  {
    "NULL": "4.25",
    "FEMALE": "3.591439688715953",
    "MALE": "3.483333333333333"
  },
  {
    "NULL": "4.0",
    "FEMALE": "2.472762645914397",
    "MALE": "2.656944444444444"
  },
  {
    "NULL": "4.0",
    "FEMALE": "3.505836575875486",
    "MALE": "3.629166666666667"
  },
  {
    "NULL": "2.75",
    "FEMALE": "2.712062256809339",
    "MALE": "2.891666666666667"
  },
  {
    "NULL": "3.0",
    "FEMALE": "3.620622568093385",
    "MALE": "3.316666666666667"
  },
  {
    "NULL": "2.25",
    "FEMALE": "3.099221789883268",
    "MALE": "2.973611111111111"
  },
  {
    "NULL": "1.75",
    "FEMALE": "2.038910505836576",
    "MALE": "2.141666666666667"
  },
  {
    "NULL": "4.25",
    "FEMALE": "3.404669260700389",
    "MALE": "3.697222222222222"
  },
  {
    "NULL": "3.75",
    "FEMALE": "2.708171206225681",
    "MALE": "3.034722222222222"
  },
  {
    "NULL": "2.75",
    "FEMALE": "3.972762645914397",
    "MALE": "3.5875"
  },
  {
    "NULL": "3.75",
    "FEMALE": "3.875486381322957",
    "MALE": "3.3875"
  },
  {
    "NULL": "4.0",
    "FEMALE": "2.571984435797665",
    "MALE": "2.991666666666667"
  },
  {
    "NULL": "4.0",
    "FEMALE": "3.192607003891051",
    "MALE": "3.365277777777778"
  },
  {
    "NULL": "3.25",
    "FEMALE": "2.3715953307393",
    "MALE": "2.565277777777778"
  },
  {
    "NULL": "3.0",
    "FEMALE": "3.381322957198444",
    "MALE": "3.119444444444444"
  },
  {
    "NULL": "3.25",
    "FEMALE": "2.089494163424125",
    "MALE": "2.380555555555556"
  },
  {
    "NULL": "4.0",
    "FEMALE": "2.840466926070039",
    "MALE": "2.9"
  },
  {
    "NULL": "3.5",
    "FEMALE": "2.231517509727626",
    "MALE": "2.477777777777778"
  },
  {
    "NULL": "3.0",
    "FEMALE": "4.192607003891051",
    "MALE": "4.002777777777778"
  }
];
},{}],"/Users/salmiju/Documents/koulujutut/information_visualisation/infoviz/app/data/gender-variance.csv":[function(require,module,exports){
module.exports = [
  {
    "NULL": "0.25",
    "FEMALE": "1.8930529956538655",
    "MALE": "2.003894297635609"
  },
  {
    "NULL": "0.0",
    "FEMALE": "1.7007000857093038",
    "MALE": "1.859983001081747"
  },
  {
    "NULL": "3.0",
    "FEMALE": "1.8816908245538055",
    "MALE": "2.2499690928759124"
  },
  {
    "NULL": "2.25",
    "FEMALE": "1.3810574859110494",
    "MALE": "1.5173678720445043"
  },
  {
    "NULL": "0.6666666666666666",
    "FEMALE": "2.1416858185238237",
    "MALE": "2.2890125173852565"
  },
  {
    "NULL": "4.25",
    "FEMALE": "2.065112521901385",
    "MALE": "2.12535736362232"
  },
  {
    "NULL": "0.3333333333333333",
    "FEMALE": "1.7033699683710006",
    "MALE": "2.003150594962154"
  },
  {
    "NULL": "2.0",
    "FEMALE": "1.542919122276072",
    "MALE": "1.5246175243393638"
  },
  {
    "NULL": "2.6666666666666665",
    "FEMALE": "1.9338331778429976",
    "MALE": "2.0134136918559773"
  },
  {
    "NULL": "1.3333333333333333",
    "FEMALE": "1.364298662783205",
    "MALE": "1.5938630041724693"
  },
  {
    "NULL": "1.6666666666666667",
    "FEMALE": "1.5155528249937484",
    "MALE": "1.6844672384484667"
  },
  {
    "NULL": "0.25",
    "FEMALE": "1.4818758959655969",
    "MALE": "1.7549374130736979"
  },
  {
    "NULL": "0.6666666666666666",
    "FEMALE": "1.9027654523251525",
    "MALE": "2.0838181888425287"
  },
  {
    "NULL": "0.6666666666666666",
    "FEMALE": "1.533104269536777",
    "MALE": "1.4798157162726056"
  },
  {
    "NULL": "0.9166666666666666",
    "FEMALE": "1.6323298518670146",
    "MALE": "1.9298331015299006"
  },
  {
    "NULL": "2.0",
    "FEMALE": "1.7719715414779837",
    "MALE": "2.191655076495134"
  },
  {
    "NULL": "0.9166666666666666",
    "FEMALE": "2.249395104709463",
    "MALE": "2.4040314479987623"
  },
  {
    "NULL": "0.25",
    "FEMALE": "1.69049081848591",
    "MALE": "1.9103616133518877"
  },
  {
    "NULL": "0.9166666666666666",
    "FEMALE": "1.921693555115637",
    "MALE": "1.8525652912996462"
  },
  {
    "NULL": "1.5833333333333333",
    "FEMALE": "1.9497576626390705",
    "MALE": "2.169863622314943"
  },
  {
    "NULL": "4.25",
    "FEMALE": "2.2136816316623764",
    "MALE": "2.531971488178031"
  },
  {
    "NULL": "3.5833333333333335",
    "FEMALE": "1.6374875797361894",
    "MALE": "2.168132823365788"
  },
  {
    "NULL": "0.6666666666666666",
    "FEMALE": "1.8125469315311766",
    "MALE": "1.9470792767732983"
  },
  {
    "NULL": "0.6666666666666666",
    "FEMALE": "2.2298867575336923",
    "MALE": "2.2516438726626613"
  },
  {
    "NULL": "2.25",
    "FEMALE": "1.758333902200364",
    "MALE": "1.8677773914387312"
  },
  {
    "NULL": "1.3333333333333333",
    "FEMALE": "1.8504107220060646",
    "MALE": "1.893919023334883"
  },
  {
    "NULL": "2.25",
    "FEMALE": "1.6216048118567086",
    "MALE": "1.7909983001081646"
  },
  {
    "NULL": "0.0",
    "FEMALE": "1.9628036801905417",
    "MALE": "1.9454798331015264"
  },
  {
    "NULL": "3.0",
    "FEMALE": "1.453117770647985",
    "MALE": "1.6434554164735042"
  },
  {
    "NULL": "1.3333333333333333",
    "FEMALE": "0.8848575177676097",
    "MALE": "1.1015221758615301"
  }
];
},{}],"/Users/salmiju/Documents/koulujutut/information_visualisation/infoviz/app/data/party-mean.csv":[function(require,module,exports){
module.exports = [
  {
    "SKP": "1.159090909090909",
    "Vasemmistoliitto": "1.388157894736842",
    "Itsenäisyyspuolue": "2.512820512820513",
    "Muutos 2011": "3.235294117647059",
    "SDP": "2.801324503311258",
    "Vihreät": "2.60126582278481",
    "Kristillisdemokraatit": "4.050505050505051",
    "Kokoomus": "4.594936708860759",
    "Perussuomalaiset": "3.721854304635762",
    "RKP": "4.036363636363636",
    "Keskusta": "4.028776978417266",
    "Piraattipuolue": "3.206896551724138"
  },
  {
    "SKP": "4.272727272727273",
    "Vasemmistoliitto": "4.217105263157895",
    "Itsenäisyyspuolue": "3.717948717948718",
    "Muutos 2011": "2.970588235294118",
    "SDP": "4.006622516556291",
    "Vihreät": "3.177215189873418",
    "Kristillisdemokraatit": "3.090909090909091",
    "Kokoomus": "1.677215189873418",
    "Perussuomalaiset": "3.509933774834437",
    "RKP": "2.090909090909091",
    "Keskusta": "2.971223021582734",
    "Piraattipuolue": "2.396551724137931"
  },
  {
    "SKP": "1.25",
    "Vasemmistoliitto": "1.546052631578947",
    "Itsenäisyyspuolue": "1.871794871794872",
    "Muutos 2011": "3.352941176470588",
    "SDP": "2.80794701986755",
    "Vihreät": "1.221518987341772",
    "Kristillisdemokraatit": "2.808080808080808",
    "Kokoomus": "3.924050632911392",
    "Perussuomalaiset": "3.609271523178808",
    "RKP": "2.290909090909091",
    "Keskusta": "2.474820143884892",
    "Piraattipuolue": "3.672413793103448"
  },
  {
    "SKP": "4.159090909090909",
    "Vasemmistoliitto": "3.888157894736842",
    "Itsenäisyyspuolue": "3.333333333333333",
    "Muutos 2011": "2.441176470588235",
    "SDP": "3.357615894039735",
    "Vihreät": "4.348101265822785",
    "Kristillisdemokraatit": "2.95959595959596",
    "Kokoomus": "2.917721518987342",
    "Perussuomalaiset": "2.463576158940397",
    "RKP": "3.254545454545455",
    "Keskusta": "3.122302158273381",
    "Piraattipuolue": "3.379310344827586"
  },
  {
    "SKP": "1.181818181818182",
    "Vasemmistoliitto": "1.414473684210526",
    "Itsenäisyyspuolue": "3.333333333333333",
    "Muutos 2011": "4.588235294117647",
    "SDP": "1.973509933774834",
    "Vihreät": "2.291139240506329",
    "Kristillisdemokraatit": "3.878787878787879",
    "Kokoomus": "4.468354430379747",
    "Perussuomalaiset": "4.211920529801325",
    "RKP": "3.709090909090909",
    "Keskusta": "3.971223021582734",
    "Piraattipuolue": "3.879310344827586"
  },
  {
    "SKP": "2.454545454545455",
    "Vasemmistoliitto": "2.842105263157895",
    "Itsenäisyyspuolue": "4.051282051282051",
    "Muutos 2011": "4.882352941176471",
    "SDP": "2.66887417218543",
    "Vihreät": "2.962025316455696",
    "Kristillisdemokraatit": "2.797979797979798",
    "Kokoomus": "3.025316455696203",
    "Perussuomalaiset": "4.675496688741722",
    "RKP": "1.2",
    "Keskusta": "3.057553956834532",
    "Piraattipuolue": "4.827586206896552"
  },
  {
    "SKP": "1.159090909090909",
    "Vasemmistoliitto": "1.486842105263158",
    "Itsenäisyyspuolue": "2.333333333333333",
    "Muutos 2011": "2.647058823529412",
    "SDP": "2.324503311258278",
    "Vihreät": "1.949367088607595",
    "Kristillisdemokraatit": "3.313131313131313",
    "Kokoomus": "4.126582278481013",
    "Perussuomalaiset": "3.112582781456954",
    "RKP": "3.327272727272727",
    "Keskusta": "3.640287769784173",
    "Piraattipuolue": "1.53448275862069"
  },
  {
    "SKP": "2.545454545454545",
    "Vasemmistoliitto": "2.736842105263158",
    "Itsenäisyyspuolue": "2.717948717948718",
    "Muutos 2011": "2.823529411764706",
    "SDP": "2.907284768211921",
    "Vihreät": "2.79746835443038",
    "Kristillisdemokraatit": "2.949494949494949",
    "Kokoomus": "2.892405063291139",
    "Perussuomalaiset": "2.794701986754967",
    "RKP": "2.454545454545455",
    "Keskusta": "3.093525179856115",
    "Piraattipuolue": "2.810344827586207"
  },
  {
    "SKP": "2.863636363636364",
    "Vasemmistoliitto": "3.039473684210526",
    "Itsenäisyyspuolue": "3.384615384615385",
    "Muutos 2011": "4.441176470588235",
    "SDP": "2.913907284768212",
    "Vihreät": "3.683544303797468",
    "Kristillisdemokraatit": "1.666666666666667",
    "Kokoomus": "3.968354430379747",
    "Perussuomalaiset": "3.576158940397351",
    "RKP": "3.6",
    "Keskusta": "3.071942446043165",
    "Piraattipuolue": "4.879310344827586"
  },
  {
    "SKP": "1.318181818181818",
    "Vasemmistoliitto": "2.013157894736842",
    "Itsenäisyyspuolue": "1.307692307692308",
    "Muutos 2011": "1.647058823529412",
    "SDP": "2.655629139072848",
    "Vihreät": "2.860759493670886",
    "Kristillisdemokraatit": "1.96969696969697",
    "Kokoomus": "3.006329113924051",
    "Perussuomalaiset": "1.655629139072848",
    "RKP": "2.509090909090909",
    "Keskusta": "1.474820143884892",
    "Piraattipuolue": "2.155172413793103"
  },
  {
    "SKP": "1.068181818181818",
    "Vasemmistoliitto": "1.072368421052632",
    "Itsenäisyyspuolue": "1.794871794871795",
    "Muutos 2011": "2.147058823529412",
    "SDP": "1.145695364238411",
    "Vihreät": "1.575949367088608",
    "Kristillisdemokraatit": "2.606060606060606",
    "Kokoomus": "3.341772151898734",
    "Perussuomalaiset": "1.973509933774834",
    "RKP": "2.563636363636364",
    "Keskusta": "2.568345323741007",
    "Piraattipuolue": "2.655172413793103"
  },
  {
    "SKP": "4.295454545454545",
    "Vasemmistoliitto": "3.868421052631579",
    "Itsenäisyyspuolue": "4.41025641025641",
    "Muutos 2011": "3.558823529411765",
    "SDP": "3.344370860927152",
    "Vihreät": "2.886075949367089",
    "Kristillisdemokraatit": "3.767676767676768",
    "Kokoomus": "2.822784810126582",
    "Perussuomalaiset": "3.960264900662252",
    "RKP": "3.545454545454545",
    "Keskusta": "4.266187050359712",
    "Piraattipuolue": "2.327586206896552"
  },
  {
    "SKP": "1.113636363636364",
    "Vasemmistoliitto": "1.243421052631579",
    "Itsenäisyyspuolue": "2.051282051282051",
    "Muutos 2011": "3.323529411764706",
    "SDP": "1.549668874172185",
    "Vihreät": "1.955696202531646",
    "Kristillisdemokraatit": "2.96969696969697",
    "Kokoomus": "4.379746835443038",
    "Perussuomalaiset": "2.708609271523179",
    "RKP": "3.6",
    "Keskusta": "3.237410071942446",
    "Piraattipuolue": "3.155172413793103"
  },
  {
    "SKP": "4.772727272727273",
    "Vasemmistoliitto": "3.611842105263158",
    "Itsenäisyyspuolue": "4.641025641025641",
    "Muutos 2011": "4.058823529411765",
    "SDP": "3.423841059602649",
    "Vihreät": "2.778481012658228",
    "Kristillisdemokraatit": "3.686868686868687",
    "Kokoomus": "3.044303797468354",
    "Perussuomalaiset": "4.211920529801325",
    "RKP": "3.890909090909091",
    "Keskusta": "3.381294964028777",
    "Piraattipuolue": "3.982758620689655"
  },
  {
    "SKP": "2.25",
    "Vasemmistoliitto": "2.085526315789474",
    "Itsenäisyyspuolue": "2.717948717948718",
    "Muutos 2011": "4.176470588235294",
    "SDP": "2.185430463576159",
    "Vihreät": "3.113924050632911",
    "Kristillisdemokraatit": "2.868686868686869",
    "Kokoomus": "3.177215189873418",
    "Perussuomalaiset": "2.682119205298013",
    "RKP": "3.145454545454545",
    "Keskusta": "2.697841726618705",
    "Piraattipuolue": "4.517241379310345"
  },
  {
    "SKP": "1.75",
    "Vasemmistoliitto": "3.085526315789474",
    "Itsenäisyyspuolue": "1.41025641025641",
    "Muutos 2011": "1.470588235294118",
    "SDP": "4.172185430463576",
    "Vihreät": "4.449367088607595",
    "Kristillisdemokraatit": "3.202020202020202",
    "Kokoomus": "4.512658227848101",
    "Perussuomalaiset": "1.781456953642384",
    "RKP": "4.418181818181818",
    "Keskusta": "3.841726618705036",
    "Piraattipuolue": "3.46551724137931"
  },
  {
    "SKP": "4.318181818181818",
    "Vasemmistoliitto": "4.611842105263158",
    "Itsenäisyyspuolue": "3.0",
    "Muutos 2011": "2.352941176470588",
    "SDP": "4.086092715231788",
    "Vihreät": "4.044303797468354",
    "Kristillisdemokraatit": "2.363636363636364",
    "Kokoomus": "1.70253164556962",
    "Perussuomalaiset": "1.894039735099338",
    "RKP": "2.418181818181818",
    "Keskusta": "2.330935251798561",
    "Piraattipuolue": "2.637931034482759"
  },
  {
    "SKP": "1.090909090909091",
    "Vasemmistoliitto": "1.085526315789474",
    "Itsenäisyyspuolue": "1.102564102564103",
    "Muutos 2011": "1.823529411764706",
    "SDP": "1.43046357615894",
    "Vihreät": "1.981012658227848",
    "Kristillisdemokraatit": "2.454545454545455",
    "Kokoomus": "4.221518987341772",
    "Perussuomalaiset": "1.735099337748344",
    "RKP": "3.345454545454545",
    "Keskusta": "1.863309352517986",
    "Piraattipuolue": "2.327586206896552"
  },
  {
    "SKP": "1.340909090909091",
    "Vasemmistoliitto": "2.125",
    "Itsenäisyyspuolue": "4.205128205128205",
    "Muutos 2011": "4.411764705882353",
    "SDP": "3.377483443708609",
    "Vihreät": "2.588607594936709",
    "Kristillisdemokraatit": "4.313131313131313",
    "Kokoomus": "4.386075949367089",
    "Perussuomalaiset": "4.682119205298013",
    "RKP": "3.963636363636364",
    "Keskusta": "4.323741007194245",
    "Piraattipuolue": "2.896551724137931"
  },
  {
    "SKP": "3.090909090909091",
    "Vasemmistoliitto": "2.703947368421053",
    "Itsenäisyyspuolue": "4.307692307692308",
    "Muutos 2011": "4.058823529411765",
    "SDP": "3.403973509933775",
    "Vihreät": "1.645569620253165",
    "Kristillisdemokraatit": "3.242424242424242",
    "Kokoomus": "2.265822784810127",
    "Perussuomalaiset": "4.344370860927152",
    "RKP": "1.654545454545455",
    "Keskusta": "2.964028776978417",
    "Piraattipuolue": "2.189655172413793"
  },
  {
    "SKP": "4.75",
    "Vasemmistoliitto": "4.743421052631579",
    "Itsenäisyyspuolue": "3.128205128205128",
    "Muutos 2011": "2.794117647058824",
    "SDP": "4.437086092715232",
    "Vihreät": "4.936708860759494",
    "Kristillisdemokraatit": "1.262626262626263",
    "Kokoomus": "3.778481012658228",
    "Perussuomalaiset": "2.112582781456954",
    "RKP": "4.763636363636364",
    "Keskusta": "3.316546762589928",
    "Piraattipuolue": "4.741379310344828"
  },
  {
    "SKP": "4.568181818181818",
    "Vasemmistoliitto": "4.434210526315789",
    "Itsenäisyyspuolue": "2.769230769230769",
    "Muutos 2011": "1.205882352941176",
    "SDP": "4.033112582781457",
    "Vihreät": "4.544303797468354",
    "Kristillisdemokraatit": "3.787878787878788",
    "Kokoomus": "3.462025316455696",
    "Perussuomalaiset": "1.71523178807947",
    "RKP": "4.454545454545455",
    "Keskusta": "3.381294964028777",
    "Piraattipuolue": "3.431034482758621"
  },
  {
    "SKP": "2.25",
    "Vasemmistoliitto": "2.0",
    "Itsenäisyyspuolue": "3.538461538461538",
    "Muutos 2011": "4.147058823529412",
    "SDP": "2.602649006622517",
    "Vihreät": "1.867088607594937",
    "Kristillisdemokraatit": "3.252525252525253",
    "Kokoomus": "3.392405063291139",
    "Perussuomalaiset": "3.854304635761589",
    "RKP": "2.472727272727273",
    "Keskusta": "2.971223021582734",
    "Piraattipuolue": "2.293103448275862"
  },
  {
    "SKP": "1.636363636363636",
    "Vasemmistoliitto": "1.828947368421053",
    "Itsenäisyyspuolue": "3.846153846153846",
    "Muutos 2011": "3.882352941176471",
    "SDP": "2.801324503311258",
    "Vihreät": "2.044303797468354",
    "Kristillisdemokraatit": "4.828282828282828",
    "Kokoomus": "4.29746835443038",
    "Perussuomalaiset": "4.516556291390728",
    "RKP": "3.181818181818182",
    "Keskusta": "4.179856115107914",
    "Piraattipuolue": "1.844827586206897"
  },
  {
    "SKP": "1.0",
    "Vasemmistoliitto": "1.131578947368421",
    "Itsenäisyyspuolue": "1.666666666666667",
    "Muutos 2011": "2.764705882352941",
    "SDP": "1.456953642384106",
    "Vihreät": "2.335443037974684",
    "Kristillisdemokraatit": "2.939393939393939",
    "Kokoomus": "4.164556962025316",
    "Perussuomalaiset": "2.609271523178808",
    "RKP": "3.381818181818182",
    "Keskusta": "3.02158273381295",
    "Piraattipuolue": "2.862068965517241"
  },
  {
    "SKP": "4.704545454545455",
    "Vasemmistoliitto": "4.657894736842105",
    "Itsenäisyyspuolue": "3.41025641025641",
    "Muutos 2011": "3.0",
    "SDP": "4.0",
    "Vihreät": "3.892405063291139",
    "Kristillisdemokraatit": "3.02020202020202",
    "Kokoomus": "1.575949367088608",
    "Perussuomalaiset": "2.768211920529801",
    "RKP": "2.290909090909091",
    "Keskusta": "2.568345323741007",
    "Piraattipuolue": "3.068965517241379"
  },
  {
    "SKP": "1.136363636363636",
    "Vasemmistoliitto": "1.151315789473684",
    "Itsenäisyyspuolue": "1.538461538461538",
    "Muutos 2011": "2.823529411764706",
    "SDP": "1.549668874172185",
    "Vihreät": "1.746835443037975",
    "Kristillisdemokraatit": "2.484848484848485",
    "Kokoomus": "3.664556962025316",
    "Perussuomalaiset": "2.615894039735099",
    "RKP": "3.181818181818182",
    "Keskusta": "2.489208633093525",
    "Piraattipuolue": "2.913793103448276"
  },
  {
    "SKP": "1.159090909090909",
    "Vasemmistoliitto": "1.427631578947368",
    "Itsenäisyyspuolue": "2.41025641025641",
    "Muutos 2011": "3.235294117647059",
    "SDP": "2.112582781456954",
    "Vihreät": "2.512658227848101",
    "Kristillisdemokraatit": "3.525252525252525",
    "Kokoomus": "4.151898734177215",
    "Perussuomalaiset": "3.423841059602649",
    "RKP": "3.472727272727273",
    "Keskusta": "3.474820143884892",
    "Piraattipuolue": "3.103448275862069"
  },
  {
    "SKP": "1.340909090909091",
    "Vasemmistoliitto": "1.684210526315789",
    "Itsenäisyyspuolue": "2.102564102564103",
    "Muutos 2011": "3.205882352941176",
    "SDP": "2.423841059602649",
    "Vihreät": "1.234177215189873",
    "Kristillisdemokraatit": "2.555555555555556",
    "Kokoomus": "2.816455696202532",
    "Perussuomalaiset": "3.576158940397351",
    "RKP": "2.272727272727273",
    "Keskusta": "2.784172661870504",
    "Piraattipuolue": "2.206896551724138"
  },
  {
    "SKP": "4.840909090909091",
    "Vasemmistoliitto": "4.598684210526316",
    "Itsenäisyyspuolue": "4.205128205128205",
    "Muutos 2011": "3.588235294117647",
    "SDP": "4.052980132450331",
    "Vihreät": "4.835443037974684",
    "Kristillisdemokraatit": "3.949494949494949",
    "Kokoomus": "3.70253164556962",
    "Perussuomalaiset": "3.357615894039735",
    "RKP": "4.181818181818182",
    "Keskusta": "3.762589928057554",
    "Piraattipuolue": "4.120689655172414"
  }
];
},{}],"/Users/salmiju/Documents/koulujutut/information_visualisation/infoviz/app/data/party-variance.csv":[function(require,module,exports){
module.exports = [
  {
    "SKP": "0.13689217758985217",
    "Vasemmistoliitto": "0.3582694318577901",
    "Itsenäisyyspuolue": "1.8353576248313088",
    "Muutos 2011": "2.2459893048128343",
    "SDP": "1.3069315673289224",
    "Vihreät": "1.2094251390792574",
    "Kristillisdemokraatit": "0.6810966810966818",
    "Kokoomus": "0.31895509151011886",
    "Perussuomalaiset": "1.2021192052980119",
    "RKP": "0.8505050505050511",
    "Keskusta": "0.549890522364717",
    "Piraattipuolue": "1.4301270417422869"
  },
  {
    "SKP": "1.2262156448202948",
    "Vasemmistoliitto": "0.939308121296621",
    "Itsenäisyyspuolue": "1.5236167341430498",
    "Muutos 2011": "2.0900178253119432",
    "SDP": "0.9666225165562929",
    "Vihreät": "1.26775780053213",
    "Kristillisdemokraatit": "1.3079777365491654",
    "Kokoomus": "0.5894138514875426",
    "Perussuomalaiset": "1.4382339955849932",
    "RKP": "0.9360269360269363",
    "Keskusta": "1.2745282035241363",
    "Piraattipuolue": "1.261040532365396"
  },
  {
    "SKP": "0.6104651162790697",
    "Vasemmistoliitto": "1.0044876263506426",
    "Itsenäisyyspuolue": "1.5357624831309042",
    "Muutos 2011": "2.053475935828877",
    "SDP": "1.9562030905077248",
    "Vihreät": "0.339151818108521",
    "Kristillisdemokraatit": "1.5444238301381166",
    "Kokoomus": "1.0769975006046903",
    "Perussuomalaiset": "1.626313465783664",
    "RKP": "1.802693602693603",
    "Keskusta": "1.5120425398811403",
    "Piraattipuolue": "1.7679975801572905"
  },
  {
    "SKP": "0.8810782241014795",
    "Vasemmistoliitto": "1.1066138027187193",
    "Itsenäisyyspuolue": "1.070175438596491",
    "Muutos 2011": "1.344919786096257",
    "SDP": "1.2712582781456931",
    "Vihreät": "0.5850600661130375",
    "Kristillisdemokraatit": "1.2432488146773863",
    "Kokoomus": "1.1587922276868485",
    "Perussuomalaiset": "1.303664459161148",
    "RKP": "1.341414141414141",
    "Keskusta": "1.2385569805025536",
    "Piraattipuolue": "1.537810042347248"
  },
  {
    "SKP": "0.29175475687103625",
    "Vasemmistoliitto": "0.7476036946671324",
    "Itsenäisyyspuolue": "2.701754385964911",
    "Muutos 2011": "0.6131907308377901",
    "SDP": "1.0526269315673296",
    "Vihreät": "1.1248891397242595",
    "Kristillisdemokraatit": "1.066790352504638",
    "Kokoomus": "0.42892848504394165",
    "Perussuomalaiset": "0.8347902869757197",
    "RKP": "0.9508417508417517",
    "Keskusta": "0.839745594828484",
    "Piraattipuolue": "1.371143375680581"
  },
  {
    "SKP": "1.9281183932346722",
    "Vasemmistoliitto": "1.6835134193098646",
    "Itsenäisyyspuolue": "1.89203778677463",
    "Muutos 2011": "0.1675579322638147",
    "SDP": "1.9829580573951455",
    "Vihreät": "1.7310328146416165",
    "Kristillisdemokraatit": "1.5506081220366923",
    "Kokoomus": "1.7700556317020077",
    "Perussuomalaiset": "0.48732891832229663",
    "RKP": "0.162962962962963",
    "Keskusta": "1.5328954227922",
    "Piraattipuolue": "0.35571687840290317"
  },
  {
    "SKP": "0.13689217758985214",
    "Vasemmistoliitto": "0.648832345765076",
    "Itsenäisyyspuolue": "1.9122807017543864",
    "Muutos 2011": "1.6292335115864534",
    "SDP": "1.1939955849889603",
    "Vihreät": "1.1184390873175853",
    "Kristillisdemokraatit": "1.258091115233973",
    "Kokoomus": "0.6462952511489153",
    "Perussuomalaiset": "1.4739072847682115",
    "RKP": "1.5205387205387197",
    "Keskusta": "0.9856115107913668",
    "Piraattipuolue": "0.6391409558378701"
  },
  {
    "SKP": "1.9281183932346722",
    "Vasemmistoliitto": "1.50644823980481",
    "Itsenäisyyspuolue": "1.8394062078272608",
    "Muutos 2011": "1.7860962566844911",
    "SDP": "1.458013245033112",
    "Vihreät": "1.627509473514475",
    "Kristillisdemokraatit": "1.6198721913007648",
    "Kokoomus": "1.510642586471016",
    "Perussuomalaiset": "1.510905077262696",
    "RKP": "1.4006734006734007",
    "Keskusta": "1.3607548743613775",
    "Piraattipuolue": "1.2791893526920752"
  },
  {
    "SKP": "2.260042283298097",
    "Vasemmistoliitto": "1.4818752178459385",
    "Itsenäisyyspuolue": "2.085020242914979",
    "Muutos 2011": "1.0418894830659542",
    "SDP": "1.8525386313465766",
    "Vihreät": "1.644440861081999",
    "Kristillisdemokraatit": "0.7142857142857144",
    "Kokoomus": "1.5085463194388427",
    "Perussuomalaiset": "1.8991611479028685",
    "RKP": "1.5037037037037024",
    "Keskusta": "1.588989677822958",
    "Piraattipuolue": "0.14307320024198422"
  },
  {
    "SKP": "0.7801268498942918",
    "Vasemmistoliitto": "1.1256535378180539",
    "Itsenäisyyspuolue": "0.4817813765182186",
    "Muutos 2011": "0.7807486631016044",
    "SDP": "1.733951434878585",
    "Vihreät": "1.4709344513424174",
    "Kristillisdemokraatit": "0.8051948051948051",
    "Kokoomus": "1.700596629847616",
    "Perussuomalaiset": "0.9872847682119211",
    "RKP": "1.5508417508417511",
    "Keskusta": "0.4685642790115734",
    "Piraattipuolue": "1.045674531155476"
  },
  {
    "SKP": "0.2045454545454545",
    "Vasemmistoliitto": "0.14704600906239113",
    "Itsenäisyyspuolue": "1.7989203778677456",
    "Muutos 2011": "1.5837789661319075",
    "SDP": "0.2852980132450332",
    "Vihreät": "0.6661694751269859",
    "Kristillisdemokraatit": "1.6697588126159546",
    "Kokoomus": "1.2964605337418378",
    "Perussuomalaiset": "1.5192935982339961",
    "RKP": "1.6579124579124571",
    "Keskusta": "1.4500052132207264",
    "Piraattipuolue": "1.914095583787052"
  },
  {
    "SKP": "1.0967230443974632",
    "Vasemmistoliitto": "1.386545834785638",
    "Itsenäisyyspuolue": "0.6167341430499321",
    "Muutos 2011": "1.7085561497326216",
    "SDP": "1.6406181015452506",
    "Vihreät": "1.6047730387809427",
    "Kristillisdemokraatit": "1.1801690373118952",
    "Kokoomus": "1.5989679916149324",
    "Perussuomalaiset": "1.1050772626931558",
    "RKP": "1.2525252525252528",
    "Keskusta": "0.5880512980919613",
    "Piraattipuolue": "1.6978221415607988"
  },
  {
    "SKP": "0.1495771670190275",
    "Vasemmistoliitto": "0.3973074241896113",
    "Itsenäisyyspuolue": "2.155195681511473",
    "Muutos 2011": "1.4982174688057046",
    "SDP": "0.6225165562913904",
    "Vihreät": "0.9215915504313474",
    "Kristillisdemokraatit": "1.2337662337662336",
    "Kokoomus": "0.5555107635249538",
    "Perussuomalaiset": "1.5945253863134647",
    "RKP": "1.1333333333333324",
    "Keskusta": "1.3127932436659366",
    "Piraattipuolue": "1.501814882032669"
  },
  {
    "SKP": "0.31923890063424987",
    "Vasemmistoliitto": "1.7092628093412323",
    "Itsenäisyyspuolue": "0.4466936572199734",
    "Muutos 2011": "1.087344028520499",
    "SDP": "1.5658278145695343",
    "Vihreät": "1.269088123841007",
    "Kristillisdemokraatit": "1.2172747887033606",
    "Kokoomus": "1.4566233975651053",
    "Perussuomalaiset": "0.7147902869757194",
    "RKP": "1.2101010101010088",
    "Keskusta": "1.2666041080179353",
    "Piraattipuolue": "0.9996975196612221"
  },
  {
    "SKP": "1.4011627906976745",
    "Vasemmistoliitto": "0.9926368072499129",
    "Itsenäisyyspuolue": "1.6815114709851555",
    "Muutos 2011": "0.8770053475935828",
    "SDP": "1.3520529801324477",
    "Vihreät": "1.7194227203096037",
    "Kristillisdemokraatit": "1.6662543805400951",
    "Kokoomus": "1.598967991614932",
    "Perussuomalaiset": "1.898278145695366",
    "RKP": "1.385858585858586",
    "Keskusta": "1.5022416849129365",
    "Piraattipuolue": "0.8505747126436778"
  },
  {
    "SKP": "2.145348837209302",
    "Vasemmistoliitto": "1.3237626350644807",
    "Itsenäisyyspuolue": "1.3535762483130913",
    "Muutos 2011": "0.6809269162210337",
    "SDP": "0.783487858719647",
    "Vihreät": "0.580222526808029",
    "Kristillisdemokraatit": "1.2444856730571017",
    "Kokoomus": "0.5953801499637198",
    "Perussuomalaiset": "1.0652538631346593",
    "RKP": "0.8033670033670023",
    "Keskusta": "0.6849129392138449",
    "Piraattipuolue": "1.3058076225045374"
  },
  {
    "SKP": "0.9661733615221991",
    "Vasemmistoliitto": "0.755620425235276",
    "Itsenäisyyspuolue": "2.473684210526316",
    "Muutos 2011": "1.6898395721925135",
    "SDP": "1.2792052980132436",
    "Vihreät": "1.2400628880109645",
    "Kristillisdemokraatit": "1.4990723562152137",
    "Kokoomus": "0.7962992824316719",
    "Perussuomalaiset": "1.2553642384105947",
    "RKP": "1.0255892255892254",
    "Keskusta": "1.2809925972265679",
    "Piraattipuolue": "1.638535995160315"
  },
  {
    "SKP": "0.36363636363636354",
    "Vasemmistoliitto": "0.2509149529452781",
    "Itsenäisyyspuolue": "0.41025641025641074",
    "Muutos 2011": "1.2406417112299462",
    "SDP": "0.6867991169977955",
    "Vihreät": "1.2416754011126343",
    "Kristillisdemokraatit": "1.270871985157698",
    "Kokoomus": "0.5939288881722147",
    "Perussuomalaiset": "1.0493598233995585",
    "RKP": "1.711784511784513",
    "Keskusta": "0.771035345636534",
    "Piraattipuolue": "1.9434361766485182"
  },
  {
    "SKP": "0.5089852008456659",
    "Vasemmistoliitto": "1.1167218543046358",
    "Itsenäisyyspuolue": "1.2199730094466932",
    "Muutos 2011": "0.9768270944741535",
    "SDP": "1.5032229580573953",
    "Vihreät": "1.4920986858018233",
    "Kristillisdemokraatit": "0.6254380540094828",
    "Kokoomus": "0.6079577521567371",
    "Perussuomalaiset": "0.3382781456953639",
    "RKP": "0.8505050505050508",
    "Keskusta": "0.6842873527265141",
    "Piraattipuolue": "1.3575317604355717"
  },
  {
    "SKP": "2.038054968287527",
    "Vasemmistoliitto": "1.9316399442314431",
    "Itsenäisyyspuolue": "0.7449392712550609",
    "Muutos 2011": "1.7540106951871652",
    "SDP": "1.7890507726269338",
    "Vihreät": "0.6124324760138674",
    "Kristillisdemokraatit": "1.5528756957328405",
    "Kokoomus": "1.240990083044427",
    "Perussuomalaiset": "0.9472847682119205",
    "RKP": "1.1191919191919188",
    "Keskusta": "1.6146387238035647",
    "Piraattipuolue": "1.3142770719903207"
  },
  {
    "SKP": "0.6569767441860465",
    "Vasemmistoliitto": "0.5628703380968947",
    "Itsenäisyyspuolue": "2.114709851551956",
    "Muutos 2011": "2.5320855614973263",
    "SDP": "1.0343487858719635",
    "Vihreät": "0.07240183826493612",
    "Kristillisdemokraatit": "0.5425685425685431",
    "Kokoomus": "1.6894702894460984",
    "Perussuomalaiset": "1.5405739514348786",
    "RKP": "0.4430976430976442",
    "Keskusta": "2.058492336565531",
    "Piraattipuolue": "0.44071385359951637"
  },
  {
    "SKP": "0.8091966173361529",
    "Vasemmistoliitto": "0.8433252004182631",
    "Itsenäisyyspuolue": "2.0242914979757076",
    "Muutos 2011": "0.532085561497326",
    "SDP": "1.2322295805739538",
    "Vihreät": "0.4916552446988616",
    "Kristillisdemokraatit": "1.0259740259740273",
    "Kokoomus": "1.5112875917116844",
    "Perussuomalaiset": "1.2716997792494482",
    "RKP": "0.6969696969696968",
    "Keskusta": "1.3100823688874992",
    "Piraattipuolue": "1.5127041742286755"
  },
  {
    "SKP": "1.819767441860465",
    "Vasemmistoliitto": "1.4701986754966887",
    "Itsenäisyyspuolue": "1.623481781376518",
    "Muutos 2011": "0.9171122994652406",
    "SDP": "1.5610596026490051",
    "Vihreät": "1.160565992098688",
    "Kristillisdemokraatit": "1.8641517212945786",
    "Kokoomus": "1.335483350802225",
    "Perussuomalaiset": "1.2719646799117001",
    "RKP": "1.4760942760942766",
    "Keskusta": "1.5498905223647157",
    "Piraattipuolue": "1.7546884452510587"
  },
  {
    "SKP": "1.1205073995771666",
    "Vasemmistoliitto": "1.18909027535727",
    "Itsenäisyyspuolue": "1.2388663967611337",
    "Muutos 2011": "1.137254901960784",
    "SDP": "1.5335982339955871",
    "Vihreät": "1.0999354994759314",
    "Kristillisdemokraatit": "0.20490620490620512",
    "Kokoomus": "0.7198661614125634",
    "Perussuomalaiset": "0.5313907284768222",
    "RKP": "1.5589225589225593",
    "Keskusta": "0.6268376603065372",
    "Piraattipuolue": "1.2912885662431952"
  },
  {
    "SKP": "0.0",
    "Vasemmistoliitto": "0.23422795399093876",
    "Itsenäisyyspuolue": "1.2807017543859642",
    "Muutos 2011": "1.5793226381461674",
    "SDP": "0.5031346578366438",
    "Vihreät": "1.0778440699830696",
    "Kristillisdemokraatit": "1.3024118738404447",
    "Kokoomus": "0.4823026687091844",
    "Perussuomalaiset": "1.5196467991169968",
    "RKP": "1.2404040404040406",
    "Keskusta": "1.180690230424354",
    "Piraattipuolue": "1.6648517846339992"
  },
  {
    "SKP": "0.25951374207188177",
    "Vasemmistoliitto": "0.2795399093760888",
    "Itsenäisyyspuolue": "1.8272604588394061",
    "Muutos 2011": "2.0606060606060606",
    "SDP": "0.9333333333333333",
    "Vihreät": "0.8609610578085954",
    "Kristillisdemokraatit": "1.3261183261183245",
    "Kokoomus": "0.4496089655728448",
    "Perussuomalaiset": "1.4725827814569554",
    "RKP": "1.2101010101010106",
    "Keskusta": "1.1456573871337699",
    "Piraattipuolue": "1.3635813672111317"
  },
  {
    "SKP": "0.2600422832980972",
    "Vasemmistoliitto": "0.20873997908678962",
    "Itsenäisyyspuolue": "0.6234817813765184",
    "Muutos 2011": "2.331550802139037",
    "SDP": "0.915849889624724",
    "Vihreät": "0.7635249536402463",
    "Kristillisdemokraatit": "1.456400742115028",
    "Kokoomus": "1.0396275094735163",
    "Perussuomalaiset": "1.7848123620309047",
    "RKP": "1.5959595959595956",
    "Keskusta": "1.353143572098845",
    "Piraattipuolue": "1.7994555353901984"
  },
  {
    "SKP": "0.41596194503171247",
    "Vasemmistoliitto": "0.6437347507842466",
    "Itsenäisyyspuolue": "2.721997300944669",
    "Muutos 2011": "2.4884135472370765",
    "SDP": "1.073907284768212",
    "Vihreät": "1.2578005321293249",
    "Kristillisdemokraatit": "0.9866007008864142",
    "Kokoomus": "0.8175441425461575",
    "Perussuomalaiset": "1.485827814569534",
    "RKP": "1.0316498316498313",
    "Keskusta": "1.1207381920550517",
    "Piraattipuolue": "1.8838475499092562"
  },
  {
    "SKP": "0.6485200845665958",
    "Vasemmistoliitto": "0.8532589752527018",
    "Itsenäisyyspuolue": "1.515519568151147",
    "Muutos 2011": "1.683600713012478",
    "SDP": "1.1924944812362017",
    "Vihreät": "0.4097798919616217",
    "Kristillisdemokraatit": "1.1065759637188206",
    "Kokoomus": "1.0934854470692605",
    "Perussuomalaiset": "1.352494481236202",
    "RKP": "1.0909090909090904",
    "Keskusta": "1.4168491293921377",
    "Piraattipuolue": "1.3950393224440427"
  },
  {
    "SKP": "0.13689217758985214",
    "Vasemmistoliitto": "0.41403799233182476",
    "Itsenäisyyspuolue": "1.1673414304993255",
    "Muutos 2011": "1.4616755793226381",
    "SDP": "0.8238410596026506",
    "Vihreät": "0.29121986616141365",
    "Kristillisdemokraatit": "0.8443619872191316",
    "Kokoomus": "0.936426670966704",
    "Perussuomalaiset": "1.2579249448123602",
    "RKP": "0.818181818181818",
    "Keskusta": "1.066416432071735",
    "Piraattipuolue": "0.7395644283121601"
  }
];
},{}],"/Users/salmiju/Documents/koulujutut/information_visualisation/infoviz/app/data/questions.json":[function(require,module,exports){
module.exports={"questions": [
    "Suomen velkaantuminen on käännettävä laskuun vaikka se samalla tarkoittaisi leikkauksia palveluihin ja etuuksiin.",
    "Hyvin ansaitsevien palkkaverotusta pitäisi kiristää.",
    "Suomi tarvitsee lisää ydinvoimaa.",
    "Suomen tulee luopua kivihiilen, turpeen ja maakaasun käytöstä vuoteen 2025 mennessä.",
    "Suomen julkinen sektori on liian suuri ja sitä on syytä pienentää.",
    "Ruotsin pakollisesta opiskelusta tulisi luopua.",
    "Velvoitteita ottaa vastaan tarjottu työpaikka pitäisi kiristää.",
    "Jos ihmisellä on varallisuutta, hänen omaisuuttaan pitäisi vanhana käyttää hoivapalveluiden kustantamiseksi.",
    "Alkoholia tarjoavien ravintoloiden pitäisi saada olla auki nykyistä vapaammin.",
    "Kuntien määrää tulee vähentää merkittävästi, vaikka pakolla.",
    "Yritysten pitäisi voida maksaa työehtosopimuksia pienempiä palkkoja, jotta Suomeen saataisiin työpaikkoja.",
    "Koko Suomi on syytä pitää asuttuna ja valtion tuettava tätä verovaroin.",
    "Sote-uudistuksen yhteydessä yksityiset terveyspalvelut pitäisi nostaa julkisten palveluiden rinnalle samanlaiseen asemaan.",
    "Kuntien pitää saada itse tuottaa sosiaali- ja terveyspalveluita, eikä sote-uudistuksessa niiltä saa viedä liikaa pois valtaa.",
    "Taksien pitäisi antaa kilpailla vapaasti asiakkaista ilman että valtio säätää hinnat tai rajoittaa taksilupien määriä.",
    "EU:sta on Suomelle enemmän hyötyä kuin haittaa.",
    "Hallitus päätti, että Suomi jää ulos osan EU-maiden valmistelemasta rahoitusmarkkinaverosta. Suomen pitäisi mennä mukaan rahoitusmarkkinaveroon.",
    "Suomen tulisi tällä vaalikaudella ryhtyä valmistelemaan hakemista Natoon.",
    "Puolustusvoimille on annettava nykyistä enemmän rahaa.",
    "EU- ja ETA-alueen ulkopuolelta tulevien kohdalla käytetään nyt 'tarveharkintaa' eli työlupien saantia rajoitetaan. Tästä on pidettävä kiinni, eikä työperäistä maahanmuuttoa pidä helpottaa.",
    "Homo- ja lesbopareilla pitää olla samat avioliitto- ja adoptio-oikeudet kuin heteropareilla.",
    "Jos valtio tarjoaa turvapaikanhakijoiden vastaanottokeskuksen perustamista kotikuntaani, tarjous pitää hyväksyä.",
    "Kouluissa kohdellaan koululaisia liian lepsusti. Tiukempi kuri tekisi kouluista parempia.",
    "Perinteiset arvot - kuten koti, uskonto ja isänmaa - muodostavat hyvän arvopohjan politiikalle.",
    "Julkisia palveluita tulisi ulkoistaa entistä enemmän yksityisten yritysten tuotettavaksi.",
    "Jos tulee eteen tilanne, jossa on välttämätöntä joko leikata julkisia palveluita ja sosiaalietuuksia tai korottaa veroja, veronkorotukset ovat parempi vaihtoehto.",
    "Suuret tuloerot ovat hyväksyttäviä, jotta erot ihmisten lahjakkuudessa ja ahkeruudessa voidaan palkita.",
    "Nykyisen kaltaiset palvelut ja sosiaalietuudet ovat pitemmän päälle liian raskaita julkiselle taloudelle.",
    "Talouskasvu ja työpaikkojen luominen tulisi asettaa ympäristöasioiden edelle, silloin kun nämä kaksi ovat keskenään ristiriidassa.",
    "Kaikessa päätöksenteossa pitäisi arvioida vaikutukset ympäristöön ja tarvittaessa luopua ympäristölle haitallisista hankkeista."




]}
},{}],"/Users/salmiju/Documents/koulujutut/information_visualisation/infoviz/app/index.js":[function(require,module,exports){
"use strict";

var R = require("ramda");
var questions = require("./data/questions.json").questions;
var groupedByDistrictData = cleanDefaultColumn(require("./data/district-mean.csv"));

var groupedByPartyData = require("./data/party-mean.csv");
var groupedByAgeData = require("./data/age-mean.csv");
var groupedByGenderData = cleanNullColumn(require("./data/gender-mean.csv"));

var variancePartyData = require("./data/party-variance.csv");
var varianceDistrictData = cleanDefaultColumn(require("./data/district-variance.csv"));
var varianceAgeData = require("./data/age-variance.csv");
var varianceGenderData = cleanNullColumn(require("./data/gender-variance.csv"));

var currentQuestion;

function cleanNullColumn(data) {
    return cleanColumns(data, ["NULL"]);
}

function cleanDefaultColumn(data) {
    return cleanColumns(data, ["default"]);
}
function cleanColumns(data, columns) {
    return R.map(function (question) {
        return R.omit(columns, question);
    }, data);
}

var dataMap = {
    district: {
        mean: groupedByDistrictData,
        variance: varianceDistrictData
    },
    party: {
        mean: groupedByPartyData,
        variance: variancePartyData
    },
    age: {
        mean: groupedByAgeData,
        variance: varianceAgeData
    },
    gender: {
        mean: groupedByGenderData,
        variance: varianceGenderData
    }
};

function init() {
    var $previousQuestionButton = $(".previousQuestion");
    var $nextQuestionButton = $(".nextQuestion");
    var $selectionGroup = $(".group-selection label");
    var selectedData = dataMap.district;

    $previousQuestionButton.on("click", function () {
        currentQuestion--;
        generateGraph(currentQuestion, $nextQuestionButton, $previousQuestionButton, selectedData);
    });

    $nextQuestionButton.on("click", function () {
        currentQuestion++;
        generateGraph(currentQuestion, $nextQuestionButton, $previousQuestionButton, selectedData);
    });

    $selectionGroup.on("click", function () {
        selectedData = dataMap[$(this).find("input")[0].value];
        generateGraph(currentQuestion, $nextQuestionButton, $previousQuestionButton, selectedData);
    });

    currentQuestion = 1;
    generateGraph(currentQuestion, $nextQuestionButton, $previousQuestionButton, selectedData);
}

function generateGraph(questionNumber, $nextButton, $previousButton, selectedData) {

    var questionIndex = questionNumber - 1;

    $(".chartQuestion").text(questions[questionIndex]);
    $previousButton.prop("disabled", questionNumber == 1);
    $nextButton.prop("disabled", questionNumber == questions.length);
    $(".questionNumber").text(questionNumber);

    var categories = R.keys(selectedData.mean[questionIndex]);
    var means = toNumbers(R.values(selectedData.mean[questionIndex]));
    var variances = R.values(selectedData.variance[questionIndex]);
    genChart(categories, means, variances);
}

function toNumbers(strings) {
    return R.map(function (val) {
        return Number(val);
    }, strings);
}

function genChart(categories, means, variances) {

    function formatYScale() {
        console.log(this.value);
        switch (this.value) {
            case 1:
                return "Täysin eri mieltä";
            case 3:
                return "En osaa sanoa";
            case 5:
                return "Täysin samaa mieltä";
            default:
                return "";
        }
    }

    function getPairs(means, variances) {
        return R.map(function (zipped) {
            var mean = zipped[0];
            var variance = zipped[1];
            var stdDev = Math.sqrt(variance);
            return [mean - stdDev, mean + stdDev];
        }, R.zip(means, variances));
    }

    var chart;
    var pairs = getPairs(means, variances);
    $(function () {
        $("#container").highcharts({
            chart: {
                animation: false,
                zoomType: "xy"
            },
            credits: {
                enabled: false
            },
            title: {
                text: "Vastausten keskiarvo ja keskihajonta"
            },
            xAxis: [{
                categories: categories
            }],
            yAxis: [{ // Primary yAxis
                labels: {
                    formatter: formatYScale,
                    style: {
                        color: Highcharts.getOptions().colors[1]
                    }
                },
                title: {
                    enabled: false,
                    style: {
                        color: Highcharts.getOptions().colors[1]
                    }
                },
                min: 1,
                max: 5
            }],

            tooltip: {
                enabled: false,
                shared: true
            },
            legend: {
                enabled: false
            },
            series: [{
                name: "Temperature",
                type: "spline",
                data: means,
                lineWidth: 0,
                marker: {
                    enabled: true,
                    radius: 4
                }
            }, {
                name: "Keskihajonta",
                type: "errorbar",
                data: pairs,
                tooltip: {
                    pointFormat: "(error range: {point.low}-{point.high}°C)<br/>"
                }
            }]
        });
    });
}

function getChartOptions(dataset1, dataset2, categories) {

    function formatYScale(value) {
        var num = Number(value);
        switch (num) {
            case 1:
                return "Täysin eri mieltä";
            case 3:
                return "En osaa sanoa";
            case 5:
                return "Täysin samaa mieltä";
            default:
                return "";
        }
    }

    return {
        data: {
            columns: [R.prepend("vastausten keskiarvo", dataset1), R.prepend("vastausten varianssi", dataset2)],
            type: "bar",
            axes: {
                data1: "y",
                data2: "y2"
            },
            colors: {
                "vastausten keskiarvo": "#A5DBEB",
                "vastausten varianssi": "rgba(220,220,220,0.8)"
            }
        },
        padding: {
            top: 0,

            bottom: 0
        },
        legend: {
            position: "bottom"
        },
        bar: {
            width: {
                ratio: 0.5
            }
        },
        axis: {
            rotated: true,
            x: {
                type: "category",
                categories: categories,
                tick: {
                    multiline: false
                }
            },
            y2: {
                label: "Varianssi",
                show: true,
                min: 0,
                max: 1,
                tick: {
                    count: 5
                }
            },
            y: {
                label: "Keskiarvo",
                min: 1,
                max: 5,
                tick: {
                    values: [1, 2, 3, 4, 5],
                    format: formatYScale
                }
            }
        },
        tooltip: {
            show: false
        }
    };
}

document.addEventListener("DOMContentLoaded", function () {
    init();
});

},{"./data/age-mean.csv":"/Users/salmiju/Documents/koulujutut/information_visualisation/infoviz/app/data/age-mean.csv","./data/age-variance.csv":"/Users/salmiju/Documents/koulujutut/information_visualisation/infoviz/app/data/age-variance.csv","./data/district-mean.csv":"/Users/salmiju/Documents/koulujutut/information_visualisation/infoviz/app/data/district-mean.csv","./data/district-variance.csv":"/Users/salmiju/Documents/koulujutut/information_visualisation/infoviz/app/data/district-variance.csv","./data/gender-mean.csv":"/Users/salmiju/Documents/koulujutut/information_visualisation/infoviz/app/data/gender-mean.csv","./data/gender-variance.csv":"/Users/salmiju/Documents/koulujutut/information_visualisation/infoviz/app/data/gender-variance.csv","./data/party-mean.csv":"/Users/salmiju/Documents/koulujutut/information_visualisation/infoviz/app/data/party-mean.csv","./data/party-variance.csv":"/Users/salmiju/Documents/koulujutut/information_visualisation/infoviz/app/data/party-variance.csv","./data/questions.json":"/Users/salmiju/Documents/koulujutut/information_visualisation/infoviz/app/data/questions.json","ramda":"/Users/salmiju/Documents/koulujutut/information_visualisation/infoviz/node_modules/ramda/dist/ramda.js"}],"/Users/salmiju/Documents/koulujutut/information_visualisation/infoviz/node_modules/ramda/dist/ramda.js":[function(require,module,exports){
//  Ramda v0.10.0
//  https://github.com/ramda/ramda
//  (c) 2013-2015 Scott Sauyet and Michael Hurley
//  Ramda may be freely distributed under the MIT license.

;(function() {

    'use strict';

    var __ = { ramda: 'placeholder' };

    var _add = function _add(a, b) {
        return a + b;
    };

    var _all = function _all(fn, list) {
        var idx = -1;
        while (++idx < list.length) {
            if (!fn(list[idx])) {
                return false;
            }
        }
        return true;
    };

    var _any = function _any(fn, list) {
        var idx = -1;
        while (++idx < list.length) {
            if (fn(list[idx])) {
                return true;
            }
        }
        return false;
    };

    /**
     * Basic, right-associative composition function. Accepts two functions and returns the
     * composite function; this composite function represents the operation `var h = f(g(x))`,
     * where `f` is the first argument, `g` is the second argument, and `x` is whatever
     * argument(s) are passed to `h`.
     *
     * This function's main use is to build the more general `compose` function, which accepts
     * any number of functions.
     *
     * @private
     * @category Function
     * @param {Function} f A function.
     * @param {Function} g A function.
     * @return {Function} A new function that is the equivalent of `f(g(x))`.
     * @example
     *
     *      var double = function(x) { return x * 2; };
     *      var square = function(x) { return x * x; };
     *      var squareThenDouble = _compose(double, square);
     *
     *      squareThenDouble(5); //≅ double(square(5)) => 50
     */
    var _compose = function _compose(f, g) {
        return function () {
            return f.call(this, g.apply(this, arguments));
        };
    };

    /**
     * Private `concat` function to merge two array-like objects.
     *
     * @private
     * @param {Array|Arguments} [set1=[]] An array-like object.
     * @param {Array|Arguments} [set2=[]] An array-like object.
     * @return {Array} A new, merged array.
     * @example
     *
     *      _concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]
     */
    var _concat = function _concat(set1, set2) {
        set1 = set1 || [];
        set2 = set2 || [];
        var idx;
        var len1 = set1.length;
        var len2 = set2.length;
        var result = new Array(len1 + len2);
        idx = -1;
        while (++idx < len1) {
            result[idx] = set1[idx];
        }
        idx = -1;
        while (++idx < len2) {
            result[len1 + idx] = set2[idx];
        }
        return result;
    };

    var _containsWith = function _containsWith(pred, x, list) {
        var idx = -1, len = list.length;
        while (++idx < len) {
            if (pred(x, list[idx])) {
                return true;
            }
        }
        return false;
    };

    /**
     * Create a function which takes a comparator function and a list
     * and determines the winning value by a compatator. Used internally
     * by `R.maxBy` and `R.minBy`
     *
     * @private
     * @param {Function} compatator a function to compare two items
     * @category Math
     * @return {Function}
     */
    var _createMaxMinBy = function _createMaxMinBy(comparator) {
        return function (valueComputer, list) {
            if (!(list && list.length > 0)) {
                return;
            }
            var idx = 0, winner = list[idx], computedWinner = valueComputer(winner), computedCurrent;
            while (++idx < list.length) {
                computedCurrent = valueComputer(list[idx]);
                if (comparator(computedCurrent, computedWinner)) {
                    computedWinner = computedCurrent;
                    winner = list[idx];
                }
            }
            return winner;
        };
    };

    var _filter = function _filter(fn, list) {
        var idx = -1, len = list.length, result = [];
        while (++idx < len) {
            if (fn(list[idx])) {
                result[result.length] = list[idx];
            }
        }
        return result;
    };

    var _filterIndexed = function _filterIndexed(fn, list) {
        var idx = -1, len = list.length, result = [];
        while (++idx < len) {
            if (fn(list[idx], idx, list)) {
                result[result.length] = list[idx];
            }
        }
        return result;
    };

    // i can't bear not to return *something*
    var _forEach = function _forEach(fn, list) {
        var idx = -1, len = list.length;
        while (++idx < len) {
            fn(list[idx]);
        }
        // i can't bear not to return *something*
        return list;
    };

    /**
     * @private
     * @param {Function} fn The strategy for extracting function names from an object
     * @return {Function} A function that takes an object and returns an array of function names.
     *
     */
    var _functionsWith = function _functionsWith(fn) {
        return function (obj) {
            return _filter(function (key) {
                return typeof obj[key] === 'function';
            }, fn(obj));
        };
    };

    var _gt = function _gt(a, b) {
        return a > b;
    };

    /**
     * Internal implementation of `indexOf`.
     * Returns the position of the first occurrence of an item in an array
     * (by strict equality),
     * or -1 if the item is not included in the array.
     *
     * @private
     * @param {Array} list The array to search
     * @param {*} item the item to find in the Array
     * @param {Number} from (optional) the index to start searching the Array
     * @return {Number} The index of the found item, or -1.
     *
     */
    var _indexOf = function _indexOf(list, item, from) {
        var idx = 0, len = list.length;
        if (typeof from == 'number') {
            idx = from < 0 ? Math.max(0, len + from) : from;
        }
        while (idx < len) {
            if (list[idx] === item) {
                return idx;
            }
            ++idx;
        }
        return -1;
    };

    /**
     * Tests whether or not an object is an array.
     *
     * @private
     * @param {*} val The object to test.
     * @return {Boolean} `true` if `val` is an array, `false` otherwise.
     * @example
     *
     *      _isArray([]); //=> true
     *      _isArray(null); //=> false
     *      _isArray({}); //=> false
     */
    var _isArray = Array.isArray || function _isArray(val) {
        return val != null && val.length >= 0 && Object.prototype.toString.call(val) === '[object Array]';
    };

    /**
     * Determine if the passed argument is an integer.
     *
     * @private
     * @param {*} n
     * @category Type
     * @return {Boolean}
     */
    var _isInteger = Number.isInteger || function _isInteger(n) {
        return n << 0 === n;
    };

    /**
     * Tests if a value is a thenable (promise).
     */
    var _isThenable = function _isThenable(value) {
        return value != null && value === Object(value) && typeof value.then === 'function';
    };

    /**
     * Internal implementation of `lastIndexOf`.
     * Returns the position of the last occurrence of an item in an array
     * (by strict equality),
     * or -1 if the item is not included in the array.
     *
     * @private
     * @param {Array} list The array to search
     * @param {*} item the item to find in the Array
     * @param {Number} from (optional) the index to start searching the Array
     * @return {Number} The index of the found item, or -1.
     *
     */
    var _lastIndexOf = function _lastIndexOf(list, item, from) {
        var idx = list.length;
        if (typeof from == 'number') {
            idx = from < 0 ? idx + from + 1 : Math.min(idx, from + 1);
        }
        while (--idx >= 0) {
            if (list[idx] === item) {
                return idx;
            }
        }
        return -1;
    };

    var _lt = function _lt(a, b) {
        return a < b;
    };

    var _map = function _map(fn, list) {
        var idx = -1, len = list.length, result = new Array(len);
        while (++idx < len) {
            result[idx] = fn(list[idx]);
        }
        return result;
    };

    var _multiply = function _multiply(a, b) {
        return a * b;
    };

    /**
     * Creates an exception about calling a function with no arguments.
     *
     * @private
     * @return {TypeError} A no arguments exception.
     */
    var _noArgsException = function _noArgsException() {
        return new TypeError('Function called with no arguments');
    };

    var _nth = function _nth(n, list) {
        return n < 0 ? list[list.length + n] : list[n];
    };

    /**
     * @private
     * @param {Function} fn The strategy for extracting keys from an object
     * @return {Function} A function that takes an object and returns an array of
     *         key-value arrays.
     */
    var _pairWith = function _pairWith(fn) {
        return function (obj) {
            return _map(function (key) {
                return [
                    key,
                    obj[key]
                ];
            }, fn(obj));
        };
    };

    /**
     * internal path function
     * Takes an array, paths, indicating the deep set of keys
     * to find.
     *
     * @private
     * @memberOf R
     * @category Object
     * @param {Array} paths An array of strings to map to object properties
     * @param {Object} obj The object to find the path in
     * @return {Array} The value at the end of the path or `undefined`.
     * @example
     *
     *      _path(['a', 'b'], {a: {b: 2}}); //=> 2
     */
    var _path = function _path(paths, obj) {
        var idx = -1, length = paths.length, val;
        if (obj == null) {
            return;
        }
        val = obj;
        while (val != null && ++idx < length) {
            val = val[paths[idx]];
        }
        return val;
    };

    /**
     * Internal implementation of `pickAll`
     *
     * @private
     * @see R.pickAll
     */
    var _pickAll = function _pickAll(names, obj) {
        var copy = {};
        _forEach(function (name) {
            copy[name] = obj[name];
        }, names);
        return copy;
    };

    var _prepend = function _prepend(el, list) {
        return _concat([el], list);
    };

    var _reduce = function _reduce(fn, acc, list) {
        var idx = -1, len = list.length;
        while (++idx < len) {
            acc = fn(acc, list[idx]);
        }
        return acc;
    };

    /**
     * internal helper for `where`
     *
     * @private
     * @see R.where
     */
    var _satisfiesSpec = function _satisfiesSpec(spec, parsedSpec, testObj) {
        if (spec === testObj) {
            return true;
        }
        if (testObj == null) {
            return false;
        }
        parsedSpec.fn = parsedSpec.fn || [];
        parsedSpec.obj = parsedSpec.obj || [];
        var key, val, idx = -1, fnLen = parsedSpec.fn.length, j = -1, objLen = parsedSpec.obj.length;
        while (++idx < fnLen) {
            key = parsedSpec.fn[idx];
            val = spec[key];
            if (!(key in testObj)) {
                return false;
            }
            if (!val(testObj[key], testObj)) {
                return false;
            }
        }
        while (++j < objLen) {
            key = parsedSpec.obj[j];
            if (spec[key] !== testObj[key]) {
                return false;
            }
        }
        return true;
    };

    /**
     * An optimized, private array `slice` implementation.
     *
     * @private
     * @param {Arguments|Array} args The array or arguments object to consider.
     * @param {Number} [from=0] The array index to slice from, inclusive.
     * @param {Number} [to=args.length] The array index to slice to, exclusive.
     * @return {Array} A new, sliced array.
     * @example
     *
     *      _slice([1, 2, 3, 4, 5], 1, 3); //=> [2, 3]
     *
     *      var firstThreeArgs = function(a, b, c, d) {
     *        return _slice(arguments, 0, 3);
     *      };
     *      firstThreeArgs(1, 2, 3, 4); //=> [1, 2, 3]
     */
    var _slice = function _slice(args, from, to) {
        switch (arguments.length) {
        case 0:
            throw _noArgsException();
        case 1:
            return _slice(args, 0, args.length);
        case 2:
            return _slice(args, from, args.length);
        default:
            var length = Math.max(0, to - from), list = new Array(length), idx = -1;
            while (++idx < length) {
                list[idx] = args[from + idx];
            }
            return list;
        }
    };

    /**
     * Returns a function that always returns the given value.
     *
     * @func
     * @memberOf R
     * @category Function
     * @sig a -> (* -> a)
     * @param {*} val The value to wrap in a function
     * @return {Function} A Function :: * -> val.
     * @example
     *
     *      var t = R.always('Tee');
     *      t(); //=> 'Tee'
     */
    var always = function always(val) {
        return function () {
            return val;
        };
    };

    /**
     * Wraps a function of any arity (including nullary) in a function that accepts exactly `n`
     * parameters. Unlike `nAry`, which passes only `n` arguments to the wrapped function,
     * functions produced by `arity` will pass all provided arguments to the wrapped function.
     *
     * @func
     * @memberOf R
     * @sig (Number, (* -> *)) -> (* -> *)
     * @category Function
     * @param {Number} n The desired arity of the returned function.
     * @param {Function} fn The function to wrap.
     * @return {Function} A new function wrapping `fn`. The new function is
     *         guaranteed to be of arity `n`.
     * @example
     *
     *      var takesTwoArgs = function(a, b) {
     *        return [a, b];
     *      };
     *      takesTwoArgs.length; //=> 2
     *      takesTwoArgs(1, 2); //=> [1, 2]
     *
     *      var takesOneArg = R.arity(1, takesTwoArgs);
     *      takesOneArg.length; //=> 1
     *      // All arguments are passed through to the wrapped function
     *      takesOneArg(1, 2); //=> [1, 2]
     */
    var arity = function (n, fn) {
        switch (n) {
        case 0:
            return function () {
                return fn.apply(this, arguments);
            };
        case 1:
            return function (a0) {
                void a0;
                return fn.apply(this, arguments);
            };
        case 2:
            return function (a0, a1) {
                void a1;
                return fn.apply(this, arguments);
            };
        case 3:
            return function (a0, a1, a2) {
                void a2;
                return fn.apply(this, arguments);
            };
        case 4:
            return function (a0, a1, a2, a3) {
                void a3;
                return fn.apply(this, arguments);
            };
        case 5:
            return function (a0, a1, a2, a3, a4) {
                void a4;
                return fn.apply(this, arguments);
            };
        case 6:
            return function (a0, a1, a2, a3, a4, a5) {
                void a5;
                return fn.apply(this, arguments);
            };
        case 7:
            return function (a0, a1, a2, a3, a4, a5, a6) {
                void a6;
                return fn.apply(this, arguments);
            };
        case 8:
            return function (a0, a1, a2, a3, a4, a5, a6, a7) {
                void a7;
                return fn.apply(this, arguments);
            };
        case 9:
            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {
                void a8;
                return fn.apply(this, arguments);
            };
        case 10:
            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
                void a9;
                return fn.apply(this, arguments);
            };
        default:
            throw new Error('First argument to arity must be a non-negative integer no greater than ten');
        }
    };

    /**
     * Returns the result of calling its first argument with the remaining
     * arguments. This is occasionally useful as a converging function for
     * `R.converge`: the left branch can produce a function while the right
     * branch produces a value to be passed to that function as an argument.
     *
     * @func
     * @memberOf R
     * @category Function
     * @sig (*... -> a),*... -> a
     * @param {Function} fn The function to apply to the remaining arguments.
     * @param {...*} args Any number of positional arguments.
     * @return {*}
     * @example
     *
     *      var indentN = R.pipe(R.times(R.always(' ')),
     *                           R.join(''),
     *                           R.replace(/^(?!$)/gm));
     *
     *      var format = R.converge(R.call,
     *                              R.pipe(R.prop('indent'), indentN),
     *                              R.prop('value'));
     *
     *      format({indent: 2, value: 'foo\nbar\nbaz\n'}); //=> '  foo\n  bar\n  baz\n'
     */
    var call = function call(fn) {
        return fn.apply(this, _slice(arguments, 1));
    };

    /**
     * Makes a comparator function out of a function that reports whether the first element is less than the second.
     *
     * @func
     * @memberOf R
     * @category Function
     * @sig (a, b -> Boolean) -> (a, b -> Number)
     * @param {Function} pred A predicate function of arity two.
     * @return {Function} A Function :: a -> b -> Int that returns `-1` if a < b, `1` if b < a, otherwise `0`.
     * @example
     *
     *      var cmp = R.comparator(function(a, b) {
     *        return a.age < b.age;
     *      });
     *      var people = [
     *        // ...
     *      ];
     *      R.sort(cmp, people);
     */
    var comparator = function comparator(pred) {
        return function (a, b) {
            return pred(a, b) ? -1 : pred(b, a) ? 1 : 0;
        };
    };

    /**
     * Returns a function, `fn`, which encapsulates if/else-if/else logic.
     * Each argument to `R.cond` is a [predicate, transform] pair. All of
     * the arguments to `fn` are applied to each of the predicates in turn
     * until one returns a "truthy" value, at which point `fn` returns the
     * result of applying its arguments to the corresponding transformer.
     * If none of the predicates matches, `fn` returns undefined.
     *
     * @func
     * @memberOf R
     * @category Logic
     * @sig [(*... -> Boolean),(*... -> *)]... -> (*... -> *)
     * @param {...Function} functions
     * @return {Function}
     * @example
     *
     *      var fn = R.cond(
     *          [R.eq(0),   R.always('water freezes at 0°C')],
     *          [R.eq(100), R.always('water boils at 100°C')],
     *          [R.T,       function(temp) { return 'nothing special happens at ' + temp + '°C'; }]
     *      );
     *      fn(0); //=> 'water freezes at 0°C'
     *      fn(50); //=> 'nothing special happens at 50°C'
     *      fn(100); //=> 'water boils at 100°C'
     */
    var cond = function cond() {
        var pairs = arguments;
        return function () {
            var idx = -1;
            while (++idx < pairs.length) {
                if (pairs[idx][0].apply(this, arguments)) {
                    return pairs[idx][1].apply(this, arguments);
                }
            }
        };
    };

    /**
     * Accepts at least three functions and returns a new function. When invoked, this new
     * function will invoke the first function, `after`, passing as its arguments the
     * results of invoking the subsequent functions with whatever arguments are passed to
     * the new function.
     *
     * @func
     * @memberOf R
     * @category Function
     * @sig ((*... -> c) -> (((* -> a), (* -> b), ...) -> c)
     * @param {Function} after A function. `after` will be invoked with the return values of
     *        `fn1` and `fn2` as its arguments.
     * @param {...Function} functions A variable number of functions.
     * @return {Function} A new function.
     * @example
     *
     *      var add = function(a, b) { return a + b; };
     *      var multiply = function(a, b) { return a * b; };
     *      var subtract = function(a, b) { return a - b; };
     *
     *      //≅ multiply( add(1, 2), subtract(1, 2) );
     *      R.converge(multiply, add, subtract)(1, 2); //=> -3
     *
     *      var add3 = function(a, b, c) { return a + b + c; };
     *      R.converge(add3, multiply, add, subtract)(1, 2); //=> 4
     */
    var converge = function (after) {
        var fns = _slice(arguments, 1);
        return function () {
            var args = arguments;
            return after.apply(this, _map(function (fn) {
                return fn.apply(this, args);
            }, fns));
        };
    };

    /**
     * Returns a new function much like the supplied one, except that the first two arguments'
     * order is reversed.
     *
     * @func
     * @memberOf R
     * @category Function
     * @sig (a -> b -> c -> ... -> z) -> (b -> a -> c -> ... -> z)
     * @param {Function} fn The function to invoke with its first two parameters reversed.
     * @return {*} The result of invoking `fn` with its first two parameters' order reversed.
     * @example
     *
     *      var mergeThree = function(a, b, c) {
     *        return ([]).concat(a, b, c);
     *      };
     *
     *      mergeThree(1, 2, 3); //=> [1, 2, 3]
     *
     *      R.flip(mergeThree)(1, 2, 3); //=> [2, 1, 3]
     */
    var flip = function flip(fn) {
        return function (a, b) {
            switch (arguments.length) {
            case 0:
                throw _noArgsException();
            case 1:
                return function (b) {
                    return fn.apply(this, [
                        b,
                        a
                    ].concat(_slice(arguments, 1)));
                };
            default:
                return fn.apply(this, _concat([
                    b,
                    a
                ], _slice(arguments, 2)));
            }
        };
    };

    /**
     * Creates a new object out of a list key-value pairs.
     *
     * @func
     * @memberOf R
     * @category List
     * @sig [[k,v]] -> {k: v}
     * @param {Array} pairs An array of two-element arrays that will be the keys and values of the output object.
     * @return {Object} The object made by pairing up `keys` and `values`.
     * @example
     *
     *      R.fromPairs([['a', 1], ['b', 2],  ['c', 3]]); //=> {a: 1, b: 2, c: 3}
     */
    var fromPairs = function fromPairs(pairs) {
        var idx = -1, len = pairs.length, out = {};
        while (++idx < len) {
            if (_isArray(pairs[idx]) && pairs[idx].length) {
                out[pairs[idx][0]] = pairs[idx][1];
            }
        }
        return out;
    };

    /**
     * Calls the specified function on the supplied object. Any additional arguments
     * after `fn` and `obj` are passed in to `fn`. If no additional arguments are passed to `func`,
     * `fn` is invoked with no arguments.
     *
     * @func
     * @memberOf R
     * @category Object
     * @sig k -> {k : v} -> v(*)
     * @param {String} funcName The name of the property mapped to the function to invoke
     * @param {Object} obj The object
     * @return {*} The value of invoking `obj.fn`.
     * @example
     *
     *      R.func('add', R, 1, 2); //=> 3
     *
     *      var obj = { f: function() { return 'f called'; } };
     *      R.func('f', obj); //=> 'f called'
     */
    var func = function func(funcName, obj) {
        switch (arguments.length) {
        case 0:
            throw _noArgsException();
        case 1:
            return function (obj) {
                return obj[funcName].apply(obj, _slice(arguments, 1));
            };
        default:
            return obj[funcName].apply(obj, _slice(arguments, 2));
        }
    };

    /**
     * A function that does nothing but return the parameter supplied to it. Good as a default
     * or placeholder function.
     *
     * @func
     * @memberOf R
     * @category Function
     * @sig a -> a
     * @param {*} x The value to return.
     * @return {*} The input value, `x`.
     * @example
     *
     *      R.identity(1); //=> 1
     *
     *      var obj = {};
     *      R.identity(obj) === obj; //=> true
     */
    var identity = function identity(x) {
        return x;
    };

    /**
     * Tests whether or not an object is similar to an array.
     *
     * @func
     * @memberOf R
     * @category Type
     * @category List
     * @param {*} x The object to test.
     * @return {Boolean} `true` if `x` has a numeric length property and extreme indices defined; `false` otherwise.
     * @example
     *
     *      R.isArrayLike([]); //=> true
     *      R.isArrayLike(true); //=> false
     *      R.isArrayLike({}); //=> false
     *      R.isArrayLike({length: 10}); //=> false
     *      R.isArrayLike({0: 'zero', 9: 'nine', length: 10}); //=> true
     */
    var isArrayLike = function isArrayLike(x) {
        if (_isArray(x)) {
            return true;
        }
        if (!x) {
            return false;
        }
        if (typeof x !== 'object') {
            return false;
        }
        if (x instanceof String) {
            return false;
        }
        if (x.nodeType === 1) {
            return !!x.length;
        }
        if (x.length === 0) {
            return true;
        }
        if (x.length > 0) {
            return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1);
        }
        return false;
    };

    /**
     * Reports whether the list has zero elements.
     *
     * @func
     * @memberOf R
     * @category Logic
     * @sig [a] -> Boolean
     * @param {Array} list
     * @return {Boolean}
     * @example
     *
     *      R.isEmpty([1, 2, 3]); //=> false
     *      R.isEmpty([]); //=> true
     *      R.isEmpty(''); //=> true
     *      R.isEmpty(null); //=> false
     */
    var isEmpty = function isEmpty(list) {
        return Object(list).length === 0;
    };

    /**
     * Checks if the input value is `null` or `undefined`.
     *
     * @func
     * @memberOf R
     * @category Type
     * @sig * -> Boolean
     * @param {*} x The value to test.
     * @return {Boolean} `true` if `x` is `undefined` or `null`, otherwise `false`.
     * @example
     *
     *     R.isNil(null); //=> true
     *     R.isNil(undefined); //=> true
     *     R.isNil(0); //=> false
     *     R.isNil([]); //=> false
     */
    var isNil = function isNil(x) {
        return x == null;
    };

    /**
     * Returns `true` if all elements are unique, otherwise `false`.
     * Uniqueness is determined using strict equality (`===`).
     *
     * @func
     * @memberOf R
     * @category List
     * @sig [a] -> Boolean
     * @param {Array} list The array to consider.
     * @return {Boolean} `true` if all elements are unique, else `false`.
     * @example
     *
     *      R.isSet(['1', 1]); //=> true
     *      R.isSet([1, 1]);   //=> false
     *      R.isSet([{}, {}]); //=> true
     */
    var isSet = function isSet(list) {
        var len = list.length;
        var idx = -1;
        while (++idx < len) {
            if (_indexOf(list, list[idx], idx + 1) >= 0) {
                return false;
            }
        }
        return true;
    };

    /**
     * Returns a list containing the names of all the
     * properties of the supplied object, including prototype properties.
     * Note that the order of the output array is not guaranteed to be
     * consistent across different JS platforms.
     *
     * @func
     * @memberOf R
     * @category Object
     * @sig {k: v} -> [k]
     * @param {Object} obj The object to extract properties from
     * @return {Array} An array of the object's own and prototype properties.
     * @example
     *
     *      var F = function() { this.x = 'X'; };
     *      F.prototype.y = 'Y';
     *      var f = new F();
     *      R.keysIn(f); //=> ['x', 'y']
     */
    var keysIn = function keysIn(obj) {
        var prop, ks = [];
        for (prop in obj) {
            ks[ks.length] = prop;
        }
        return ks;
    };

    /**
     * Wraps a function of any arity (including nullary) in a function that accepts exactly `n`
     * parameters. Any extraneous parameters will not be passed to the supplied function.
     *
     * @func
     * @memberOf R
     * @category Function
     * @sig Number -> (* -> a) -> (* -> a)
     * @param {Number} n The desired arity of the new function.
     * @param {Function} fn The function to wrap.
     * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of
     *         arity `n`.
     * @example
     *
     *      var takesTwoArgs = function(a, b) {
     *        return [a, b];
     *      };
     *      takesTwoArgs.length; //=> 2
     *      takesTwoArgs(1, 2); //=> [1, 2]
     *
     *      var takesOneArg = R.nAry(1, takesTwoArgs);
     *      takesOneArg.length; //=> 1
     *      // Only `n` arguments are passed to the wrapped function
     *      takesOneArg(1, 2); //=> [1, undefined]
     */
    var nAry = function (n, fn) {
        switch (n) {
        case 0:
            return function () {
                return fn.call(this);
            };
        case 1:
            return function (a0) {
                return fn.call(this, a0);
            };
        case 2:
            return function (a0, a1) {
                return fn.call(this, a0, a1);
            };
        case 3:
            return function (a0, a1, a2) {
                return fn.call(this, a0, a1, a2);
            };
        case 4:
            return function (a0, a1, a2, a3) {
                return fn.call(this, a0, a1, a2, a3);
            };
        case 5:
            return function (a0, a1, a2, a3, a4) {
                return fn.call(this, a0, a1, a2, a3, a4);
            };
        case 6:
            return function (a0, a1, a2, a3, a4, a5) {
                return fn.call(this, a0, a1, a2, a3, a4, a5);
            };
        case 7:
            return function (a0, a1, a2, a3, a4, a5, a6) {
                return fn.call(this, a0, a1, a2, a3, a4, a5, a6);
            };
        case 8:
            return function (a0, a1, a2, a3, a4, a5, a6, a7) {
                return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7);
            };
        case 9:
            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {
                return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8);
            };
        case 10:
            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
                return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);
            };
        default:
            throw new Error('First argument to nAry must be a non-negative integer no greater than ten');
        }
    };

    /**
     * A function wrapping a call to the given function in a `!` operation.  It will return `true` when the
     * underlying function would return a false-y value, and `false` when it would return a truth-y one.
     *
     * @func
     * @memberOf R
     * @category Logic
     * @sig (*... -> Boolean) -> (*... -> Boolean)
     * @param {Function} f a predicate
     * @return {Function} a function that applies its arguments to `f` and logically inverts its output.
     * @example
     *
     *      var gt10 = function(x) { return x > 10; };
     *      var f = R.not(gt10);
     *      f(11); //=> false
     *      f(9); //=> true
     */
    var not = function not(f) {
        return function () {
            return !f.apply(this, arguments);
        };
    };

    /**
     * Returns a function which returns its nth argument.
     *
     * @func
     * @memberOf R
     * @category Function
     * @sig Number -> *... -> *
     * @param {Number} n
     * @return {Function}
     * @example
     *
     *      R.nthArg(1)('a', 'b', 'c'); //=> 'b'
     *      R.nthArg(-1)('a', 'b', 'c'); //=> 'c'
     */
    var nthArg = function nthArg(n) {
        return function () {
            return _nth(n, arguments);
        };
    };

    /**
     * Returns a singleton array containing the value provided.
     *
     * Note this `of` is different from the ES6 `of`; See
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of
     *
     * @func
     * @memberOf R
     * @category Function
     * @sig a -> [a]
     * @param {*} x any value
     * @return {Array} An array wrapping `x`.
     * @example
     *
     *      R.of(null); //=> [null]
     *      R.of([42]); //=> [[42]]
     */
    var of = function of(x) {
        return [x];
    };

    /**
     * Accepts a function `fn` and returns a function that guards invocation of `fn` such that
     * `fn` can only ever be called once, no matter how many times the returned function is
     * invoked.
     *
     * @func
     * @memberOf R
     * @category Function
     * @sig (a... -> b) -> (a... -> b)
     * @param {Function} fn The function to wrap in a call-only-once wrapper.
     * @return {Function} The wrapped function.
     * @example
     *
     *      var addOneOnce = R.once(function(x){ return x + 1; });
     *      addOneOnce(10); //=> 11
     *      addOneOnce(addOneOnce(50)); //=> 11
     */
    var once = function once(fn) {
        var called = false, result;
        return function () {
            if (called) {
                return result;
            }
            called = true;
            result = fn.apply(this, arguments);
            return result;
        };
    };

    /**
     * Flipped version of R.prepend.
     *
     * @func
     * @memberOf R
     * @category List
     * @sig [a] -> a -> [a]
     * @param {Array} list
     * @param {*} el
     * @return {Array}
     * @example
     *
     *      R.prependTo(['fi', 'fo', 'fum'], 'fee'); //=> ['fee', 'fi', 'fo', 'fum']
     */
    var prependTo = flip(_prepend);

    /**
     * Returns a function that when supplied an object returns the indicated property of that object, if it exists.
     *
     * @func
     * @memberOf R
     * @category Object
     * @sig s -> {s: a} -> a
     * @param {String} p The property name
     * @param {Object} obj The object to query
     * @return {*} The value at `obj.p`.
     * @example
     *
     *      R.prop('x', {x: 100}); //=> 100
     *      R.prop('x', {}); //=> undefined
     */
    var prop = function prop(p, obj) {
        switch (arguments.length) {
        case 0:
            throw _noArgsException();
        case 1:
            return function _prop(obj) {
                return obj[p];
            };
        }
        return obj[p];
    };

    /**
     * Returns the value at the specified property.
     * The only difference from `prop` is the parameter order.
     *
     * @func
     * @memberOf R
     * @see R.prop
     * @category Object
     * @sig {k: v} -> k -> v
     * @param {Object} obj The object to query
     * @param {String} p The property name
     * @return {*} The value at `obj.p`.
     * @example
     *
     *      R.propOf({x: 100}, 'x'); //=> 100
     */
    var propOf = flip(prop);

    /**
     * Returns a new list with the same elements as the original list, just
     * in the reverse order.
     *
     * @func
     * @memberOf R
     * @category List
     * @sig [a] -> [a]
     * @param {Array} list The list to reverse.
     * @return {Array} A copy of the list in reverse order.
     * @example
     *
     *      R.reverse([1, 2, 3]);  //=> [3, 2, 1]
     *      R.reverse([1, 2]);     //=> [2, 1]
     *      R.reverse([1]);        //=> [1]
     *      R.reverse([]);         //=> []
     */
    var reverse = function reverse(list) {
        return _slice(list).reverse();
    };

    /**
     * Converts an object into an array of key, value arrays.
     * The object's own properties and prototype properties are used.
     * Note that the order of the output array is not guaranteed to be
     * consistent across different JS platforms.
     *
     * @func
     * @memberOf R
     * @category Object
     * @sig {k: v} -> [[k,v]]
     * @param {Object} obj The object to extract from
     * @return {Array} An array of key, value arrays from the object's own
     *         and prototype properties.
     * @example
     *
     *      var F = function() { this.x = 'X'; };
     *      F.prototype.y = 'Y';
     *      var f = new F();
     *      R.toPairsIn(f); //=> [['x','X'], ['y','Y']]
     */
    var toPairsIn = _pairWith(keysIn);

    /**
     * Removes (strips) whitespace from both ends of the string.
     *
     * @func
     * @memberOf R
     * @category String
     * @sig String -> String
     * @param {String} str The string to trim.
     * @return {String} Trimmed version of `str`.
     * @example
     *
     *      R.trim('   xyz  '); //=> 'xyz'
     *      R.map(R.trim, R.split(',', 'x, y, z')); //=> ['x', 'y', 'z']
     */
    var trim = function () {
        var ws = '\t\n\x0B\f\r \xA0\u1680\u180E\u2000\u2001\u2002\u2003' + '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028' + '\u2029\uFEFF';
        var zeroWidth = '\u200B';
        var hasProtoTrim = typeof String.prototype.trim === 'function';
        if (!hasProtoTrim || (ws.trim() || !zeroWidth.trim())) {
            return function trim(str) {
                var beginRx = new RegExp('^[' + ws + '][' + ws + ']*');
                var endRx = new RegExp('[' + ws + '][' + ws + ']*$');
                return str.replace(beginRx, '').replace(endRx, '');
            };
        } else {
            return function trim(str) {
                return str.trim();
            };
        }
    }();

    /**
     * Gives a single-word string description of the (native) type of a value, returning such
     * answers as 'Object', 'Number', 'Array', or 'Null'.  Does not attempt to distinguish user
     * Object types any further, reporting them all as 'Object'.
     *
     * @func
     * @memberOf R
     * @category Type
     * @sig (* -> {*}) -> String
     * @param {*} val The value to test
     * @return {String}
     * @example
     *
     *      R.type({}); //=> "Object"
     *      R.type(1); //=> "Number"
     *      R.type(false); //=> "Boolean"
     *      R.type('s'); //=> "String"
     *      R.type(null); //=> "Null"
     *      R.type([]); //=> "Array"
     *      R.type(/[A-z]/); //=> "RegExp"
     */
    var type = function type(val) {
        return val === null ? 'Null' : val === undefined ? 'Undefined' : Object.prototype.toString.call(val).slice(8, -1);
    };

    /**
     * Takes a function `fn`, which takes a single array argument, and returns
     * a function which:
     *
     *   - takes any number of positional arguments;
     *   - passes these arguments to `fn` as an array; and
     *   - returns the result.
     *
     * In other words, R.unapply derives a variadic function from a function
     * which takes an array. R.unapply is the inverse of R.apply.
     *
     * @func
     * @memberOf R
     * @category Function
     * @sig ([*...] -> a) -> (*... -> a)
     * @param {Function} fn
     * @return {Function}
     * @see R.apply
     * @example
     *
     *      R.unapply(JSON.stringify)(1, 2, 3); //=> '[1,2,3]'
     */
    var unapply = function unapply(fn) {
        if (arguments.length === 0) {
            throw _noArgsException();
        }
        return function () {
            return fn(_slice(arguments));
        };
    };

    /**
     * Wraps a function of any arity (including nullary) in a function that accepts exactly 1
     * parameter. Any extraneous parameters will not be passed to the supplied function.
     *
     * @func
     * @memberOf R
     * @category Function
     * @sig (* -> b) -> (a -> b)
     * @param {Function} fn The function to wrap.
     * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of
     *         arity 1.
     * @example
     *
     *      var takesTwoArgs = function(a, b) {
     *        return [a, b];
     *      };
     *      takesTwoArgs.length; //=> 2
     *      takesTwoArgs(1, 2); //=> [1, 2]
     *
     *      var takesOneArg = R.unary(takesTwoArgs);
     *      takesOneArg.length; //=> 1
     *      // Only 1 argument is passed to the wrapped function
     *      takesOneArg(1, 2); //=> [1, undefined]
     */
    var unary = function unary(fn) {
        return nAry(1, fn);
    };

    /**
     * Returns a list of all the properties, including prototype properties,
     * of the supplied object.
     * Note that the order of the output array is not guaranteed to be
     * consistent across different JS platforms.
     *
     * @func
     * @memberOf R
     * @category Object
     * @sig {k: v} -> [v]
     * @param {Object} obj The object to extract values from
     * @return {Array} An array of the values of the object's own and prototype properties.
     * @example
     *
     *      var F = function() { this.x = 'X'; };
     *      F.prototype.y = 'Y';
     *      var f = new F();
     *      R.valuesIn(f); //=> ['X', 'Y']
     */
    var valuesIn = function valuesIn(obj) {
        var prop, vs = [];
        for (prop in obj) {
            vs[vs.length] = obj[prop];
        }
        return vs;
    };

    /**
     * A function that always returns `false`. Any passed in parameters are ignored.
     *
     * @func
     * @memberOf R
     * @category Function
     * @sig * -> false
     * @see R.always
     * @return {Boolean} false
     * @example
     *
     *      R.F(); //=> false
     */
    var F = always(false);

    /**
     * @func
     * @memberOf R
     * @category Function
     * @see R.identity
     */
    var I = identity;

    /**
     * A function that always returns `true`. Any passed in parameters are ignored.
     *
     * @func
     * @memberOf R
     * @category Function
     * @sig * -> true
     * @see R.always
     * @return {Boolean} `true`.
     * @example
     *
     *      R.T(); //=> true
     */
    var T = always(true);

    var _append = function _append(el, list) {
        return _concat(list, [el]);
    };

    /**
     * Copies an object.
     *
     * @private
     * @param {*} value The value to be copied
     * @param {Array} refFrom Array containing the source references
     * @param {Array} refTo Array containing the copied source references
     * @return {*} The copied value.
     */
    var _baseCopy = function _baseCopy(value, refFrom, refTo) {
        var copy = function copy(copiedValue) {
            var len = refFrom.length;
            var idx = -1;
            while (++idx < len) {
                if (value === refFrom[idx]) {
                    return refTo[idx];
                }
            }
            refFrom[refFrom.length] = value;
            refTo[refTo.length] = copiedValue;
            for (var key in value) {
                copiedValue[key] = _baseCopy(value[key], refFrom, refTo);
            }
            return copiedValue;
        };
        switch (type(value)) {
        case 'Object':
            return copy({});
        case 'Array':
            return copy([]);
        case 'Date':
            return new Date(value);
        default:
            return value;
        }
    };

    /**
     * Similar to hasMethod, this checks whether a function has a [methodname]
     * function. If it isn't an array it will execute that function otherwise it will
     * default to the ramda implementation.
     *
     * @private
     * @param {Function} fn ramda implemtation
     * @param {String} methodname property to check for a custom implementation
     * @return {Object} Whatever the return value of the method is.
     */
    var _checkForMethod = function _checkForMethod(methodname, fn) {
        return function (a, b, c) {
            var length = arguments.length;
            var obj = arguments[length - 1], callBound = obj && !_isArray(obj) && typeof obj[methodname] === 'function';
            switch (arguments.length) {
            case 0:
                return fn();
            case 1:
                return callBound ? obj[methodname]() : fn(a);
            case 2:
                return callBound ? obj[methodname](a) : fn(a, b);
            case 3:
                return callBound ? obj[methodname](a, b) : fn(a, b, c);
            }
        };
    };

    /**
     * A right-associative two-argument composition function like `_compose`
     * but with automatic handling of promises (or, more precisely,
     * "thenables"). This function is used to construct a more general
     * `composeP` function, which accepts any number of arguments.
     *
     * @private
     * @category Function
     * @param {Function} f A function.
     * @param {Function} g A function.
     * @return {Function} A new function that is the equivalent of `f(g(x))`.
     * @example
     *
     *      var Q = require('q');
     *      var double = function(x) { return x * 2; };
     *      var squareAsync = function(x) { return Q.when(x * x); };
     *      var squareAsyncThenDouble = _composeP(double, squareAsync);
     *
     *      squareAsyncThenDouble(5)
     *          .then(function(result) {
     *            // the result is now 50.
     *          });
     */
    var _composeP = function _composeP(f, g) {
        return function () {
            var context = this;
            var value = g.apply(this, arguments);
            if (_isThenable(value)) {
                return value.then(function (result) {
                    return f.call(context, result);
                });
            } else {
                return f.call(this, value);
            }
        };
    };

    var _contains = function _contains(a, list) {
        return _indexOf(list, a) >= 0;
    };

    /*
     * Returns a function that makes a multi-argument version of compose from
     * either _compose or _composeP.
     */
    var _createComposer = function _createComposer(composeFunction) {
        return function () {
            switch (arguments.length) {
            case 0:
                throw _noArgsException();
            case 1:
                return arguments[0];
            default:
                var idx = arguments.length - 1, fn = arguments[idx], length = fn.length;
                while (idx--) {
                    fn = composeFunction(arguments[idx], fn);
                }
                return arity(length, fn);
            }
        };
    };

    /**
     * Create a function which takes a a list
     * and determines the winning value by a compatator. Used internally
     * by `R.max` and `R.min`
     *
     * @private
     * @param {Function} compatator a function to compare two items
     * @param {*} intialVal, default value if nothing else wins
     * @category Math
     * @return {Function}
     */
    var _createMaxMin = function _createMaxMin(comparator, initialVal) {
        return function (list) {
            if (arguments.length === 0) {
                throw _noArgsException();
            }
            var idx = -1, winner = initialVal, computed;
            while (++idx < list.length) {
                computed = +list[idx];
                if (comparator(computed, winner)) {
                    winner = computed;
                }
            }
            return winner;
        };
    };

    var _createPartialApplicator = function _createPartialApplicator(concat) {
        return function (fn) {
            var args = _slice(arguments, 1);
            return arity(Math.max(0, fn.length - args.length), function () {
                return fn.apply(this, concat(args, arguments));
            });
        };
    };

    /**
     * Optimized internal two-arity curry function.
     *
     * @private
     * @category Function
     * @param {Function} fn The function to curry.
     * @return {Function} The curried function.
     * @example
     *
     *      var addTwo = function(a, b) {
     *        return a + b;
     *      };
     *
     *      var curriedAddTwo = _curry2(addTwo);
     */
    var _curry2 = function _curry2(fn) {
        return function (a, b) {
            switch (arguments.length) {
            case 0:
                throw _noArgsException();
            case 1:
                return function (b) {
                    return fn(a, b);
                };
            default:
                return fn(a, b);
            }
        };
    };

    /**
     * Optimized internal three-arity curry function.
     *
     * @private
     * @category Function
     * @param {Function} fn The function to curry.
     * @return {Function} The curried function.
     * @example
     *
     *      var addThree = function(a, b, c) {
     *        return a + b + c;
     *      };
     *
     *      var curriedAddThree = _curry3(addThree);
     */
    var _curry3 = function _curry3(fn) {
        return function (a, b, c) {
            switch (arguments.length) {
            case 0:
                throw _noArgsException();
            case 1:
                return _curry2(function (b, c) {
                    return fn(a, b, c);
                });
            case 2:
                return function (c) {
                    return fn(a, b, c);
                };
            default:
                return fn(a, b, c);
            }
        };
    };

    /**
     * Private function that determines whether or not a provided object has a given method.
     * Does not ignore methods stored on the object's prototype chain. Used for dynamically
     * dispatching Ramda methods to non-Array objects.
     *
     * @private
     * @param {String} methodName The name of the method to check for.
     * @param {Object} obj The object to test.
     * @return {Boolean} `true` has a given method, `false` otherwise.
     * @example
     *
     *      var person = { name: 'John' };
     *      person.shout = function() { alert(this.name); };
     *
     *      _hasMethod('shout', person); //=> true
     *      _hasMethod('foo', person); //=> false
     */
    var _hasMethod = function _hasMethod(methodName, obj) {
        return obj != null && !_isArray(obj) && typeof obj[methodName] === 'function';
    };

    /**
     * `_makeFlat` is a helper function that returns a one-level or fully recursive function
     * based on the flag passed in.
     *
     * @private
     */
    var _makeFlat = function _makeFlat(recursive) {
        return function flatt(list) {
            var value, result = [], idx = -1, j, ilen = list.length, jlen;
            while (++idx < ilen) {
                if (isArrayLike(list[idx])) {
                    value = recursive ? flatt(list[idx]) : list[idx];
                    j = -1;
                    jlen = value.length;
                    while (++j < jlen) {
                        result[result.length] = value[j];
                    }
                } else {
                    result[result.length] = list[idx];
                }
            }
            return result;
        };
    };

    /**
     * Internal helper function for making a partial copy of an object
     *
     * @private
     *
     */
    var _pickBy = function _pickBy(test, obj) {
        var copy = {};
        var prop;
        var props = keysIn(obj);
        var len = props.length;
        var idx = -1;
        while (++idx < len) {
            prop = props[idx];
            if (test(obj[prop], prop, obj)) {
                copy[prop] = obj[prop];
            }
        }
        return copy;
    };

    var _pluck = function _pluck(p, list) {
        return _map(prop(p), list);
    };

    /**
     * Adds two numbers (or strings). Equivalent to `a + b` but curried.
     *
     * @func
     * @memberOf R
     * @category Math
     * @sig Number -> Number -> Number
     * @sig String -> String -> String
     * @param {Number|String} a The first value.
     * @param {Number|String} b The second value.
     * @return {Number|String} The result of `a + b`.
     * @example
     *
     *      var increment = R.add(1);
     *      increment(10);   //=> 11
     *      R.add(2, 3);       //=>  5
     *      R.add(7)(10);      //=> 17
     */
    var add = _curry2(_add);

    /**
     * Returns `true` if all elements of the list match the predicate, `false` if there are any
     * that don't.
     *
     * @func
     * @memberOf R
     * @category List
     * @sig (a -> Boolean) -> [a] -> Boolean
     * @param {Function} fn The predicate function.
     * @param {Array} list The array to consider.
     * @return {Boolean} `true` if the predicate is satisfied by every element, `false`
     *         otherwise.
     * @example
     *
     *      var lessThan2 = R.flip(R.lt)(2);
     *      var lessThan3 = R.flip(R.lt)(3);
     *      var xs = R.range(1, 3);
     *      xs; //=> [1, 2]
     *      R.all(lessThan2)(xs); //=> false
     *      R.all(lessThan3)(xs); //=> true
     */
    var all = _curry2(_all);

    /**
     *
     * A function wrapping calls to the two functions in an `&&` operation, returning the result of the first
     * function if it is false-y and the result of the second function otherwise.  Note that this is
     * short-circuited, meaning that the second function will not be invoked if the first returns a false-y
     * value.
     *
     * @func
     * @memberOf R
     * @category Logic
     * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)
     * @param {Function} f a predicate
     * @param {Function} g another predicate
     * @return {Function} a function that applies its arguments to `f` and `g` and ANDs their outputs together.
     * @example
     *
     *      var gt10 = function(x) { return x > 10; };
     *      var even = function(x) { return x % 2 === 0 };
     *      var f = R.and(gt10, even);
     *      f(100); //=> true
     *      f(101); //=> false
     */
    var and = _curry2(function and(f, g) {
        return function _and() {
            return f.apply(this, arguments) && g.apply(this, arguments);
        };
    });

    /**
     * Returns `true` if at least one of elements of the list match the predicate, `false`
     * otherwise.
     *
     * @func
     * @memberOf R
     * @category List
     * @sig (a -> Boolean) -> [a] -> Boolean
     * @param {Function} fn The predicate function.
     * @param {Array} list The array to consider.
     * @return {Boolean} `true` if the predicate is satisfied by at least one element, `false`
     *         otherwise.
     * @example
     *
     *      var lessThan0 = R.flip(R.lt)(0);
     *      var lessThan2 = R.flip(R.lt)(2);
     *      var xs = R.range(1, 3);
     *      xs; //=> [1, 2]
     *      R.any(lessThan0)(xs); //=> false
     *      R.any(lessThan2)(xs); //=> true
     */
    var any = _curry2(_any);

    /**
     * Returns a new list containing the contents of the given list, followed by the given
     * element.
     *
     * @func
     * @memberOf R
     * @category List
     * @sig a -> [a] -> [a]
     * @param {*} el The element to add to the end of the new list.
     * @param {Array} list The list whose contents will be added to the beginning of the output
     *        list.
     * @return {Array} A new list containing the contents of the old list followed by `el`.
     * @example
     *
     *      R.append('tests', ['write', 'more']); //=> ['write', 'more', 'tests']
     *      R.append('tests', []); //=> ['tests']
     *      R.append(['tests'], ['write', 'more']); //=> ['write', 'more', ['tests']]
     */
    var append = _curry2(_append);

    /**
     * Flipped version of R.append.
     *
     * @func
     * @memberOf R
     * @category List
     * @sig [a] -> a -> [a]
     * @param {Array} list
     * @param {*} el
     * @return {Array}
     * @example
     *
     *      R.appendTo([], 1); //=> [1]
     *      R.appendTo([1, 2, 3], 4); //=> [1, 2, 3, 4]
     *      R.appendTo([1, 2, 3], [4, 5, 6]); //=> [1, 2, 3, [4, 5, 6]]
     */
    var appendTo = flip(_append);

    /**
     * Applies function `fn` to the argument list `args`. This is useful for
     * creating a fixed-arity function from a variadic function. `fn` should
     * be a bound function if context is significant.
     *
     * @func
     * @memberOf R
     * @category Function
     * @sig (*... -> a) -> [*] -> a
     * @param {Function} fn
     * @param {Array} args
     * @return {*}
     * @example
     *
     *      var nums = [1, 2, 3, -99, 42, 6, 7];
     *      R.apply(Math.max, nums); //=> 42
     */
    var apply = _curry2(function apply(fn, args) {
        return fn.apply(this, args);
    });

    /**
     * Wraps a function of any arity (including nullary) in a function that accepts exactly 2
     * parameters. Any extraneous parameters will not be passed to the supplied function.
     *
     * @func
     * @memberOf R
     * @category Function
     * @sig (* -> c) -> (a, b -> c)
     * @param {Function} fn The function to wrap.
     * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of
     *         arity 2.
     * @example
     *
     *      var takesThreeArgs = function(a, b, c) {
     *        return [a, b, c];
     *      };
     *      takesThreeArgs.length; //=> 3
     *      takesThreeArgs(1, 2, 3); //=> [1, 2, 3]
     *
     *      var takesTwoArgs = R.binary(takesThreeArgs);
     *      takesTwoArgs.length; //=> 2
     *      // Only 2 arguments are passed to the wrapped function
     *      takesTwoArgs(1, 2, 3); //=> [1, 2, undefined]
     */
    var binary = function binary(fn) {
        return nAry(2, fn);
    };

    /**
     * Creates a function that is bound to a context.
     * Note: `R.bind` does not provide the additional argument-binding capabilities of
     * [Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).
     *
     * @func
     * @memberOf R
     * @category Function
     * @category Object
     * @sig (* -> *) -> {*} -> (* -> *)
     * @param {Function} fn The function to bind to context
     * @param {Object} thisObj The context to bind `fn` to
     * @return {Function} A function that will execute in the context of `thisObj`.
     */
    var bind = _curry2(function bind(fn, thisObj) {
        return function () {
            return fn.apply(thisObj, arguments);
        };
    });

    /**
     * Creates a deep copy of the value which may contain (nested) `Array`s and
     * `Object`s, `Number`s, `String`s, `Boolean`s and `Date`s. `Function`s are
     * not copied, but assigned by their reference.
     *
     * @func
     * @memberOf R
     * @category Object
     * @sig {*} -> {*}
     * @param {*} value The object or array to clone
     * @return {*} A new object or array.
     * @example
     *
     *      var objects = [{}, {}, {}];
     *      var objectsClone = R.clone(objects);
     *      objects[0] === objectsClone[0]; //=> false
     *
     */
    var clone = function clone(value) {
        return _baseCopy(value, [], []);
    };

    /**
     * Creates a new function that runs each of the functions supplied as parameters in turn,
     * passing the return value of each function invocation to the next function invocation,
     * beginning with whatever arguments were passed to the initial invocation.
     *
     * Note that `compose` is a right-associative function, which means the functions provided
     * will be invoked in order from right to left. In the example `var h = compose(f, g)`,
     * the function `h` is equivalent to `f( g(x) )`, where `x` represents the arguments
     * originally passed to `h`.
     *
     * @func
     * @memberOf R
     * @category Function
     * @sig ((y -> z), (x -> y), ..., (b -> c), (a... -> b)) -> (a... -> z)
     * @param {...Function} functions A variable number of functions.
     * @return {Function} A new function which represents the result of calling each of the
     *         input `functions`, passing the result of each function call to the next, from
     *         right to left.
     * @example
     *
     *      var triple = function(x) { return x * 3; };
     *      var double = function(x) { return x * 2; };
     *      var square = function(x) { return x * x; };
     *      var squareThenDoubleThenTriple = R.compose(triple, double, square);
     *
     *      //≅ triple(double(square(5)))
     *      squareThenDoubleThenTriple(5); //=> 150
     */
    var compose = _createComposer(_compose);

    /**
     * Similar to `compose` but with automatic handling of promises (or, more
     * precisely, "thenables"). The behavior is identical  to that of
     * compose() if all composed functions return something other than
     * promises (i.e., objects with a .then() method). If one of the function
     * returns a promise, however, then the next function in the composition
     * is called asynchronously, in the success callback of the promise, using
     * the resolved value as an input. Note that `composeP` is a right-
     * associative function, just like `compose`.
     *
     * @func
     * @memberOf R
     * @category Function
     * @sig ((y -> z), (x -> y), ..., (b -> c), (a... -> b)) -> (a... -> z)
     * @param {...Function} functions A variable number of functions.
     * @return {Function} A new function which represents the result of calling each of the
     *         input `functions`, passing either the returned result or the asynchronously
     *         resolved value) of each function call to the next, from right to left.
     * @example
     *
     *      var Q = require('q');
     *      var triple = function(x) { return x * 3; };
     *      var double = function(x) { return x * 2; };
     *      var squareAsync = function(x) { return Q.when(x * x); };
     *      var squareAsyncThenDoubleThenTriple = R.composeP(triple, double, squareAsync);
     *
     *      //≅ squareAsync(5).then(function(x) { return triple(double(x)) };
     *      squareAsyncThenDoubleThenTriple(5)
     *          .then(function(result) {
     *              // result is 150
     *          });
     */
    var composeP = _createComposer(_composeP);

    /**
     * Returns `true` if the `x` is found in the `list`, using `pred` as an
     * equality predicate for `x`.
     *
     * @func
     * @memberOf R
     * @category List
     * @sig (a, a -> Boolean) -> a -> [a] -> Boolean
     * @param {Function} pred A predicate used to test whether two items are equal.
     * @param {*} x The item to find
     * @param {Array} list The list to iterate over
     * @return {Boolean} `true` if `x` is in `list`, else `false`.
     * @example
     *
     *     var xs = [{x: 12}, {x: 11}, {x: 10}];
     *     R.containsWith(function(a, b) { return a.x === b.x; }, {x: 10}, xs); //=> true
     *     R.containsWith(function(a, b) { return a.x === b.x; }, {x: 1}, xs); //=> false
     */
    var containsWith = _curry3(_containsWith);

    /**
     * Creates an object containing a single key:value pair.
     *
     * @func
     * @memberOf R
     * @category Object
     * @sig String -> a -> {String:a}
     * @param {String} key
     * @param {*} val
     * @return {Object}
     * @example
     *
     *      var matchPhrases = R.compose(
     *          R.createMapEntry('must'),
     *          R.map(R.createMapEntry('match_phrase'))
     *      );
     *      matchPhrases(['foo', 'bar', 'baz']); //=> {must: [{match_phrase: 'foo'}, {match_phrase: 'bar'}, {match_phrase: 'baz'}]}
     */
    var createMapEntry = _curry2(function (key, val) {
        var obj = {};
        obj[key] = val;
        return obj;
    });

    /**
     * Creates a new version of `fn` with given arity that, when invoked,
     * will return either:
     * - A new function ready to accept one or more of `fn`'s remaining arguments, if all of
     * `fn`'s expected arguments have not yet been provided
     * - `fn`'s result if all of its expected arguments have been provided
     *
     * This function is useful in place of `curry`, when the arity of the
     * function to curry cannot be determined from its signature, e.g. if it's
     * a variadic function.
     *
     * @func
     * @memberOf R
     * @category Function
     * @sig Number -> (* -> a) -> (* -> a)
     * @param {Number} fnArity The arity for the returned function.
     * @param {Function} fn The function to curry.
     * @return {Function} A new, curried function.
     * @see R.curry
     * @example
     *
     *      var addFourNumbers = function() {
     *        return R.sum([].slice.call(arguments, 0, 4));
     *      };
     *
     *      var curriedAddFourNumbers = R.curryN(4, addFourNumbers);
     *      var f = curriedAddFourNumbers(1, 2);
     *      var g = f(3);
     *      g(4);//=> 10
     */
    var curryN = _curry2(function curryN(length, fn) {
        return function recurry(args) {
            return arity(Math.max(length - (args && args.length || 0), 0), function () {
                if (arguments.length === 0) {
                    throw _noArgsException();
                }
                var newArgs = _concat(args, arguments);
                if (newArgs.length >= length) {
                    return fn.apply(this, newArgs);
                } else {
                    return recurry(newArgs);
                }
            });
        }([]);
    });

    /**
     * Decrements its argument.
     *
     * @func
     * @memberOf R
     * @category Math
     * @sig Number -> Number
     * @param {Number} n
     * @return {Number}
     * @example
     *
     *      R.dec(42); //=> 41
     */
    var dec = add(-1);

    /**
     * Returns the second argument if it is not null or undefined. If it is null
     * or undefined, the first (default) argument is returned.
     *
     * @func
     * @memberOf R
     * @category Logic
     * @sig a -> b -> a | b
     * @param {a} val The default value.
     * @param {b} val The value to return if it is not null or undefined
     * @return {*} The the second value or the default value
     * @example
     *
     *      var defaultTo42 = defaultTo(42);
     *
     *      defaultTo42(null);  //=> 42
     *      defaultTo42(undefined);  //=> 42
     *      defaultTo42('Ramda');  //=> 'Ramda'
     */
    var defaultTo = _curry2(function _defaultTo(d, v) {
        return v == null ? d : v;
    });

    /**
     * Finds the set (i.e. no duplicates) of all elements in the first list not contained in the second list.
     *
     * @func
     * @memberOf R
     * @category Relation
     * @sig [a] -> [a] -> [a]
     * @param {Array} list1 The first list.
     * @param {Array} list2 The second list.
     * @return {Array} The elements in `list1` that are not in `list2`.
     * @see R.differenceWith
     * @example
     *
     *      R.difference([1,2,3,4], [7,6,5,4,3]); //=> [1,2]
     *      R.difference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5]
     */
    var difference = _curry2(function difference(first, second) {
        var out = [];
        var idx = -1;
        var firstLen = first.length;
        while (++idx < firstLen) {
            if (!_contains(first[idx], second) && !_contains(first[idx], out)) {
                out[out.length] = first[idx];
            }
        }
        return out;
    });

    /**
     * Finds the set (i.e. no duplicates) of all elements in the first list not contained in the second list.
     * Duplication is determined according to the value returned by applying the supplied predicate to two list
     * elements.
     *
     * @func
     * @memberOf R
     * @category Relation
     * @sig (a,a -> Boolean) -> [a] -> [a] -> [a]
     * @param {Function} pred A predicate used to test whether two items are equal.
     * @param {Array} list1 The first list.
     * @param {Array} list2 The second list.
     * @see R.difference
     * @return {Array} The elements in `list1` that are not in `list2`.
     * @example
     *
     *      function cmp(x, y) { return x.a === y.a; }
     *      var l1 = [{a: 1}, {a: 2}, {a: 3}];
     *      var l2 = [{a: 3}, {a: 4}];
     *      R.differenceWith(cmp, l1, l2); //=> [{a: 1}, {a: 2}]
     *
     */
    var differenceWith = _curry3(function differenceWith(pred, first, second) {
        var out = [];
        var idx = -1;
        var firstLen = first.length;
        var containsPred = containsWith(pred);
        while (++idx < firstLen) {
            if (!containsPred(first[idx], second) && !containsPred(first[idx], out)) {
                out[out.length] = first[idx];
            }
        }
        return out;
    });

    /**
     * Returns a new object that does not contain a `prop` property.
     *
     * @func
     * @memberOf R
     * @category Object
     * @sig String -> {k: v} -> {k: v}
     * @param {String} prop the name of the property to dissociate
     * @param {Object} obj the object to clone
     * @return {Object} a new object similar to the original but without the specified property
     * @example
     *
     *      R.dissoc('b', {a: 1, b: 2, c: 3}); //=> {a: 1, c: 3}
     */
    var dissoc = _curry2(function dissoc(prop, obj) {
        return _pickBy(function (val, key) {
            return key !== prop;
        }, obj);
    });

    /**
     * Returns a new list containing all but the first `n` elements of the given `list`.
     *
     * @func
     * @memberOf R
     * @category List
     * @sig Number -> [a] -> [a]
     * @param {Number} n The number of elements of `list` to skip.
     * @param {Array} list The array to consider.
     * @return {Array} The last `n` elements of `list`.
     * @example
     *
     *     R.drop(3, [1,2,3,4,5,6,7]); //=> [4,5,6,7]
     */
    var drop = _curry2(_checkForMethod('drop', function drop(n, list) {
        return n < list.length ? _slice(list, n) : [];
    }));

    /**
     * Returns a new list containing the last `n` elements of a given list, passing each value
     * to the supplied predicate function, skipping elements while the predicate function returns
     * `true`. The predicate function is passed one argument: *(value)*.
     *
     * @func
     * @memberOf R
     * @category List
     * @sig (a -> Boolean) -> [a] -> [a]
     * @param {Function} fn The function called per iteration.
     * @param {Array} list The collection to iterate over.
     * @return {Array} A new array.
     * @example
     *
     *      var lteTwo = function(x) {
     *        return x <= 2;
     *      };
     *
     *      R.dropWhile(lteTwo, [1, 2, 3, 4]); //=> [3, 4]
     */
    var dropWhile = _curry2(function dropWhile(pred, list) {
        var idx = -1, len = list.length;
        while (++idx < len && pred(list[idx])) {
        }
        return _slice(list, idx);
    });

    /**
     * `empty` wraps any object in an array. This implementation is compatible with the
     * Fantasy-land Monoid spec, and will work with types that implement that spec.
     *
     * @func
     * @memberOf R
     * @category Function
     * @sig * -> []
     * @return {Array} An empty array.
     * @example
     *
     *      R.empty([1,2,3,4,5]); //=> []
     */
    var empty = function empty(x) {
        return _hasMethod('empty', x) ? x.empty() : [];
    };

    /**
     * Tests if two items are equal.  Equality is strict here, meaning reference equality for objects and
     * non-coercing equality for primitives.
     *
     * @func
     * @memberOf R
     * @category Relation
     * @sig a -> b -> Boolean
     * @param {*} a
     * @param {*} b
     * @return {Boolean}
     * @example
     *
     *      var o = {};
     *      R.eq(o, o); //=> true
     *      R.eq(o, {}); //=> false
     *      R.eq(1, 1); //=> true
     *      R.eq(1, '1'); //=> false
     *      R.eq(0, -0); //=> false
     *      R.eq(NaN, NaN); //=> true
     */
    var eq = _curry2(function eq(a, b) {
        if (a === 0) {
            return 1 / a === 1 / b;
        } else {
            return a === b || a !== a && b !== b;
        }
    });

    /**
     * Reports whether two objects have the same value for the specified property.  Useful as a curried predicate.
     *
     * @func
     * @memberOf R
     * @category Object
     * @sig k -> {k: v} -> {k: v} -> Boolean
     * @param {String} prop The name of the property to compare
     * @param {Object} obj1
     * @param {Object} obj2
     * @return {Boolean}
     *
     * @example
     *
     *      var o1 = { a: 1, b: 2, c: 3, d: 4 };
     *      var o2 = { a: 10, b: 20, c: 3, d: 40 };
     *      R.eqProps('a', o1, o2); //=> false
     *      R.eqProps('c', o1, o2); //=> true
     */
    var eqProps = _curry3(function eqProps(prop, obj1, obj2) {
        return obj1[prop] === obj2[prop];
    });

    /**
     * Returns a new list containing only those items that match a given predicate function.
     * The predicate function is passed one argument: *(value)*.
     *
     * Note that `R.filter` does not skip deleted or unassigned indices, unlike the native
     * `Array.prototype.filter` method. For more details on this behavior, see:
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter#Description
     *
     * @func
     * @memberOf R
     * @category List
     * @sig (a -> Boolean) -> [a] -> [a]
     * @param {Function} fn The function called per iteration.
     * @param {Array} list The collection to iterate over.
     * @return {Array} The new filtered array.
     * @example
     *
     *      var isEven = function(n) {
     *        return n % 2 === 0;
     *      };
     *      R.filter(isEven, [1, 2, 3, 4]); //=> [2, 4]
     */
    var filter = _curry2(_checkForMethod('filter', _filter));

    /**
     * Like `filter`, but passes additional parameters to the predicate function. The predicate
     * function is passed three arguments: *(value, index, list)*.
     *
     * @func
     * @memberOf R
     * @category List
     * @sig (a, i, [a] -> Boolean) -> [a] -> [a]
     * @param {Function} fn The function called per iteration.
     * @param {Array} list The collection to iterate over.
     * @return {Array} The new filtered array.
     * @example
     *
     *      var lastTwo = function(val, idx, list) {
     *        return list.length - idx <= 2;
     *      };
     *      R.filterIndexed(lastTwo, [8, 6, 7, 5, 3, 0, 9]); //=> [0, 9]
     */
    var filterIndexed = _curry2(_filterIndexed);

    /**
     * Returns the first element of the list which matches the predicate, or `undefined` if no
     * element matches.
     *
     * @func
     * @memberOf R
     * @category List
     * @sig (a -> Boolean) -> [a] -> a | undefined
     * @param {Function} fn The predicate function used to determine if the element is the
     *        desired one.
     * @param {Array} list The array to consider.
     * @return {Object} The element found, or `undefined`.
     * @example
     *
     *      var xs = [{a: 1}, {a: 2}, {a: 3}];
     *      R.find(R.propEq('a', 2))(xs); //=> {a: 2}
     *      R.find(R.propEq('a', 4))(xs); //=> undefined
     */
    var find = _curry2(function find(fn, list) {
        var idx = -1;
        var len = list.length;
        while (++idx < len) {
            if (fn(list[idx])) {
                return list[idx];
            }
        }
    });

    /**
     * Returns the index of the first element of the list which matches the predicate, or `-1`
     * if no element matches.
     *
     * @func
     * @memberOf R
     * @category List
     * @sig (a -> Boolean) -> [a] -> Number
     * @param {Function} fn The predicate function used to determine if the element is the
     * desired one.
     * @param {Array} list The array to consider.
     * @return {Number} The index of the element found, or `-1`.
     * @example
     *
     *      var xs = [{a: 1}, {a: 2}, {a: 3}];
     *      R.findIndex(R.propEq('a', 2))(xs); //=> 1
     *      R.findIndex(R.propEq('a', 4))(xs); //=> -1
     */
    var findIndex = _curry2(function findIndex(fn, list) {
        var idx = -1;
        var len = list.length;
        while (++idx < len) {
            if (fn(list[idx])) {
                return idx;
            }
        }
        return -1;
    });

    /**
     * Returns the last element of the list which matches the predicate, or `undefined` if no
     * element matches.
     *
     * @func
     * @memberOf R
     * @category List
     * @sig (a -> Boolean) -> [a] -> a | undefined
     * @param {Function} fn The predicate function used to determine if the element is the
     * desired one.
     * @param {Array} list The array to consider.
     * @return {Object} The element found, or `undefined`.
     * @example
     *
     *      var xs = [{a: 1, b: 0}, {a:1, b: 1}];
     *      R.findLast(R.propEq('a', 1))(xs); //=> {a: 1, b: 1}
     *      R.findLast(R.propEq('a', 4))(xs); //=> undefined
     */
    var findLast = _curry2(function findLast(fn, list) {
        var idx = list.length;
        while (idx--) {
            if (fn(list[idx])) {
                return list[idx];
            }
        }
    });

    /**
     * Returns the index of the last element of the list which matches the predicate, or
     * `-1` if no element matches.
     *
     * @func
     * @memberOf R
     * @category List
     * @sig (a -> Boolean) -> [a] -> Number
     * @param {Function} fn The predicate function used to determine if the element is the
     * desired one.
     * @param {Array} list The array to consider.
     * @return {Number} The index of the element found, or `-1`.
     * @example
     *
     *      var xs = [{a: 1, b: 0}, {a:1, b: 1}];
     *      R.findLastIndex(R.propEq('a', 1))(xs); //=> 1
     *      R.findLastIndex(R.propEq('a', 4))(xs); //=> -1
     */
    var findLastIndex = _curry2(function findLastIndex(fn, list) {
        var idx = list.length;
        while (idx--) {
            if (fn(list[idx])) {
                return idx;
            }
        }
        return -1;
    });

    /**
     * Returns a new list by pulling every item out of it (and all its sub-arrays) and putting
     * them in a new array, depth-first.
     *
     * @func
     * @memberOf R
     * @category List
     * @sig [a] -> [b]
     * @param {Array} list The array to consider.
     * @return {Array} The flattened list.
     * @example
     *
     *      R.flatten([1, 2, [3, 4], 5, [6, [7, 8, [9, [10, 11], 12]]]]);
     *      //=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
     */
    var flatten = _makeFlat(true);

    /**
     * Iterate over an input `list`, calling a provided function `fn` for each element in the
     * list.
     *
     * `fn` receives one argument: *(value)*.
     *
     * Note: `R.forEach` does not skip deleted or unassigned indices (sparse arrays), unlike
     * the native `Array.prototype.forEach` method. For more details on this behavior, see:
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Description
     *
     * Also note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returns the original
     * array. In some libraries this function is named `each`.
     *
     * @func
     * @memberOf R
     * @category List
     * @sig (a -> *) -> [a] -> [a]
     * @param {Function} fn The function to invoke. Receives one argument, `value`.
     * @param {Array} list The list to iterate over.
     * @return {Array} The original list.
     * @example
     *
     *      var printXPlusFive = function(x) { console.log(x + 5); };
     *      R.forEach(printXPlusFive, [1, 2, 3]); //=> [1, 2, 3]
     *      //-> 6
     *      //-> 7
     *      //-> 8
     */
    var forEach = _curry2(_forEach);

    /**
     * Like `forEach`, but but passes additional parameters to the predicate function.
     *
     * `fn` receives three arguments: *(value, index, list)*.
     *
     * Note: `R.forEachIndexed` does not skip deleted or unassigned indices (sparse arrays),
     * unlike the native `Array.prototype.forEach` method. For more details on this behavior,
     * see:
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Description
     *
     * Also note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returns the original
     * array. In some libraries this function is named `each`.
     *
     * @func
     * @memberOf R
     * @category List
     * @sig (a, i, [a] -> ) -> [a] -> [a]
     * @param {Function} fn The function to invoke. Receives three arguments:
     *        (`value`, `index`, `list`).
     * @param {Array} list The list to iterate over.
     * @return {Array} The original list.
     * @example
     *
     *      // Note that having access to the original `list` allows for
     *      // mutation. While you *can* do this, it's very un-functional behavior:
     *      var plusFive = function(num, idx, list) { list[idx] = num + 5 };
     *      R.forEachIndexed(plusFive, [1, 2, 3]); //=> [6, 7, 8]
     */
    // i can't bear not to return *something*
    var forEachIndexed = _curry2(function forEachIndexed(fn, list) {
        var idx = -1, len = list.length;
        while (++idx < len) {
            fn(list[idx], idx, list);
        }
        // i can't bear not to return *something*
        return list;
    });

    /**
     * Returns a list of function names of object's own and prototype functions
     *
     * @func
     * @memberOf R
     * @category Object
     * @sig {*} -> [String]
     * @param {Object} obj The objects with functions in it
     * @return {Array} A list of the object's own properties and prototype
     *         properties that map to functions.
     * @example
     *
     *      R.functionsIn(R); // returns list of ramda's own and prototype function names
     *
     *      var F = function() { this.x = function(){}; this.y = 1; }
     *      F.prototype.z = function() {};
     *      F.prototype.a = 100;
     *      R.functionsIn(new F()); //=> ["x", "z"]
     */
    var functionsIn = _functionsWith(keysIn);

    /**
     * @func
     * @memberOf R
     * @category Object
     * @see R.prop
     */
    var get = prop;

    /**
     * Splits a list into sub-lists stored in an object, based on the result of calling a String-returning function
     * on each element, and grouping the results according to values returned.
     *
     * @func
     * @memberOf R
     * @category List
     * @sig (a -> s) -> [a] -> {s: a}
     * @param {Function} fn Function :: a -> String
     * @param {Array} list The array to group
     * @return {Object} An object with the output of `fn` for keys, mapped to arrays of elements
     *         that produced that key when passed to `fn`.
     * @example
     *
     *     var byGrade = R.groupBy(function(student) {
     *       var score = student.score;
     *       return (score < 65) ? 'F' : (score < 70) ? 'D' :
     *              (score < 80) ? 'C' : (score < 90) ? 'B' : 'A';
     *     });
     *     var students = [{name: 'Abby', score: 84},
     *                     {name: 'Eddy', score: 58},
     *                     // ...
     *                     {name: 'Jack', score: 69}];
     *     byGrade(students);
     *     // {
     *     //   'A': [{name: 'Dianne', score: 99}],
     *     //   'B': [{name: 'Abby', score: 84}]
     *     //   // ...,
     *     //   'F': [{name: 'Eddy', score: 58}]
     *     // }
     */
    var groupBy = _curry2(function groupBy(fn, list) {
        return _reduce(function (acc, elt) {
            var key = fn(elt);
            acc[key] = _append(elt, acc[key] || (acc[key] = []));
            return acc;
        }, {}, list);
    });

    /**
     * Returns whether or not an object has an own property with
     * the specified name
     *
     * @func
     * @memberOf R
     * @category Object
     * @sig s -> {s: x} -> Boolean
     * @param {String} prop The name of the property to check for.
     * @param {Object} obj The object to query.
     * @return {Boolean} Whether the property exists.
     * @example
     *
     *      var obj = {
     *        foo: 1,
     *        bar: 2,
     *      };
     *      R.has('foo', obj);  //=> true
     *
     *      var list = [{foo: 1}, {foo: 2}, {bar: 3}];
     *      R.filter(R.has('foo'), list);  //=> [{foo: 1}, {foo: 2}]
     */
    var has = _curry2(function (prop, obj) {
        return Object.prototype.hasOwnProperty.call(obj, prop);
    });

    /**
     * Returns whether or not an object or its prototype chain has
     * a property with the specified name
     *
     * @func
     * @memberOf R
     * @category Object
     * @sig s -> {s: x} -> Boolean
     * @param {String} prop The name of the property to check for.
     * @param {Object} obj The object to query.
     * @return {Boolean} Whether the property exists.
     * @example
     *
     *      function Rectangle(width, height) {
     *          this.width = width;
     *          this.height = height;
     *      }
     *      Rectangle.prototype.area = function() {
     *          return this.width * this.height;
     *      };
     *
     *      var square = new Rectangle(2, 2);
     *      R.hasIn('width', square);  //=> true
     *      R.hasIn('area', square);  //=> true
     */
    var hasIn = _curry2(function (prop, obj) {
        return prop in obj;
    });

    /**
     * Creates a function that will process either the `onTrue` or the `onFalse` function depending
     * upon the result of the `condition` predicate.
     *
     * @func
     * @memberOf R
     * @category Logic
     * @sig (*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)
     * @param {Function} condition A predicate function
     * @param {Function} onTrue A function to invoke when the `condition` evaluates to a truthy value.
     * @param {Function} onFalse A function to invoke when the `condition` evaluates to a falsy value.
     * @return {Function} A new unary function that will process either the `onTrue` or the `onFalse`
     *                    function depending upon the result of the `condition` predicate.
     * @example
     *
     *      // Flatten all arrays in the list but leave other values alone.
     *      var flattenArrays = R.map(R.ifElse(Array.isArray, R.flatten, R.identity));
     *
     *      flattenArrays([[0], [[10], [8]], 1234, {}]); //=> [[0], [10, 8], 1234, {}]
     *      flattenArrays([[[10], 123], [8, [10]], "hello"]); //=> [[10, 123], [8, 10], "hello"]
     */
    var ifElse = _curry3(function ifElse(condition, onTrue, onFalse) {
        return function _ifElse() {
            return condition.apply(this, arguments) ? onTrue.apply(this, arguments) : onFalse.apply(this, arguments);
        };
    });

    /**
     * Increments its argument.
     *
     * @func
     * @memberOf R
     * @category Math
     * @sig Number -> Number
     * @param {Number} n
     * @return {Number}
     * @example
     *
     *      R.inc(42); //=> 43
     */
    var inc = add(1);

    /**
     * Returns the position of the first occurrence of an item in an array
     * (by strict equality),
     * or -1 if the item is not included in the array.
     *
     * @func
     * @memberOf R
     * @category List
     * @sig a -> [a] -> Number
     * @param {*} target The item to find.
     * @param {Array} list The array to search in.
     * @return {Number} the index of the target, or -1 if the target is not found.
     *
     * @example
     *
     *      R.indexOf(3, [1,2,3,4]); //=> 2
     *      R.indexOf(10, [1,2,3,4]); //=> -1
     */
    var indexOf = _curry2(function indexOf(target, list) {
        return _indexOf(list, target);
    });

    /**
     * Inserts the supplied element into the list, at index `index`.  _Note
     * that this is not destructive_: it returns a copy of the list with the changes.
     * <small>No lists have been harmed in the application of this function.</small>
     *
     * @func
     * @memberOf R
     * @category List
     * @sig Number -> a -> [a] -> [a]
     * @param {Number} index The position to insert the element
     * @param {*} elt The element to insert into the Array
     * @param {Array} list The list to insert into
     * @return {Array} A new Array with `elt` inserted at `index`.
     * @example
     *
     *      R.insert(2, 'x', [1,2,3,4]); //=> [1,2,'x',3,4]
     */
    var insert = _curry3(function insert(idx, elt, list) {
        idx = idx < list.length && idx >= 0 ? idx : list.length;
        return _concat(_append(elt, _slice(list, 0, idx)), _slice(list, idx));
    });

    /**
     * Inserts the sub-list into the list, at index `index`.  _Note  that this
     * is not destructive_: it returns a copy of the list with the changes.
     * <small>No lists have been harmed in the application of this function.</small>
     *
     * @func
     * @memberOf R
     * @category List
     * @sig Number -> [a] -> [a] -> [a]
     * @param {Number} index The position to insert the sub-list
     * @param {Array} elts The sub-list to insert into the Array
     * @param {Array} list The list to insert the sub-list into
     * @return {Array} A new Array with `elts` inserted starting at `index`.
     * @example
     *
     *      R.insertAll(2, ['x','y','z'], [1,2,3,4]); //=> [1,2,'x','y','z',3,4]
     */
    var insertAll = _curry3(function insertAll(idx, elts, list) {
        idx = idx < list.length && idx >= 0 ? idx : list.length;
        return _concat(_concat(_slice(list, 0, idx), elts), _slice(list, idx));
    });

    /**
     * Turns a named method with a specified arity into a function
     * that can be called directly supplied with arguments and a target object.
     *
     * The returned function is curried and accepts `len + 1` parameters where
     * the final parameter is the target object.
     *
     * @func
     * @memberOf R
     * @category Function
     * @sig (Number, String) -> (a... -> c -> b)
     * @param {Number} len Number of arguments the returned function should take
     *        before the target object.
     * @param {Function} method Name of the method to call.
     * @return {Function} A new curried function.
     * @example
     *
     *      var sliceFrom = R.invoker(1, 'slice');
     *      sliceFrom(6, 'abcdefghijklm'); //=> 'ghijklm'
     *      var sliceFrom6 = R.invoker(2, 'slice', 6);
     *      sliceFrom6(8, 'abcdefghijklm'); //=> 'gh'
     */
    var invoker = function invoker(arity, method) {
        var initialArgs = _slice(arguments, 2);
        var len = arity - initialArgs.length;
        return curryN(len + 1, function () {
            var target = arguments[len];
            var args = initialArgs.concat(_slice(arguments, 0, len));
            return target[method].apply(target, args);
        });
    };

    /**
     * See if an object (`val`) is an instance of the supplied constructor.
     * This function will check up the inheritance chain, if any.
     *
     * @func
     * @memberOf R
     * @category Type
     * @sig (* -> {*}) -> a -> Boolean
     * @param {Object} ctor A constructor
     * @param {*} val The value to test
     * @return {Boolean}
     * @example
     *
     *      R.is(Object, {}); //=> true
     *      R.is(Number, 1); //=> true
     *      R.is(Object, 1); //=> false
     *      R.is(String, 's'); //=> true
     *      R.is(String, new String('')); //=> true
     *      R.is(Object, new String('')); //=> true
     *      R.is(Object, 's'); //=> false
     *      R.is(Number, {}); //=> false
     */
    var is = _curry2(function is(Ctor, val) {
        return val != null && val.constructor === Ctor || val instanceof Ctor;
    });

    /**
     * Returns a string made by inserting the `separator` between each
     * element and concatenating all the elements into a single string.
     *
     * @func
     * @memberOf R
     * @category List
     * @sig String -> [a] -> String
     * @param {Number|String} separator The string used to separate the elements.
     * @param {Array} xs The elements to join into a string.
     * @return {String} str The string made by concatenating `xs` with `separator`.
     * @example
     *
     *      var spacer = R.join(' ');
     *      spacer(['a', 2, 3.4]);   //=> 'a 2 3.4'
     *      R.join('|', [1, 2, 3]);    //=> '1|2|3'
     */
    var join = invoker(1, 'join');

    /**
     * Returns a list containing the names of all the enumerable own
     * properties of the supplied object.
     * Note that the order of the output array is not guaranteed to be
     * consistent across different JS platforms.
     *
     * @func
     * @memberOf R
     * @category Object
     * @sig {k: v} -> [k]
     * @param {Object} obj The object to extract properties from
     * @return {Array} An array of the object's own properties.
     * @example
     *
     *      R.keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']
     */
    // cover IE < 9 keys issues
    var keys = function () {
        // cover IE < 9 keys issues
        var hasEnumBug = !{ toString: null }.propertyIsEnumerable('toString');
        var nonEnumerableProps = [
            'constructor',
            'valueOf',
            'isPrototypeOf',
            'toString',
            'propertyIsEnumerable',
            'hasOwnProperty',
            'toLocaleString'
        ];
        return function keys(obj) {
            if (Object(obj) !== obj) {
                return [];
            }
            if (Object.keys) {
                return Object.keys(obj);
            }
            var prop, ks = [], nIdx;
            for (prop in obj) {
                if (has(prop, obj)) {
                    ks[ks.length] = prop;
                }
            }
            if (hasEnumBug) {
                nIdx = nonEnumerableProps.length;
                while (nIdx--) {
                    prop = nonEnumerableProps[nIdx];
                    if (has(prop, obj) && !_contains(prop, ks)) {
                        ks[ks.length] = prop;
                    }
                }
            }
            return ks;
        };
    }();

    /**
     * Returns the position of the last occurrence of an item (by strict equality) in
     * an array, or -1 if the item is not included in the array.
     *
     * @func
     * @memberOf R
     * @category List
     * @sig a -> [a] -> Number
     * @param {*} target The item to find.
     * @param {Array} list The array to search in.
     * @return {Number} the index of the target, or -1 if the target is not found.
     *
     * @example
     *
     *      R.lastIndexOf(3, [-1,3,3,0,1,2,3,4]); //=> 6
     *      R.lastIndexOf(10, [1,2,3,4]); //=> -1
     */
    var lastIndexOf = _curry2(function lastIndexOf(target, list) {
        return _lastIndexOf(list, target);
    });

    /**
     * Returns the number of elements in the array by returning `list.length`.
     *
     * @func
     * @memberOf R
     * @category List
     * @sig [a] -> Number
     * @param {Array} list The array to inspect.
     * @return {Number} The length of the array.
     * @example
     *
     *      R.length([]); //=> 0
     *      R.length([1, 2, 3]); //=> 3
     */
    var length = function length(list) {
        return list != null && is(Number, list.length) ? list.length : NaN;
    };

    /**
     * Creates a lens. Supply a function to `get` values from inside an object, and a `set`
     * function to change values on an object. (n.b.: This can, and should, be done without
     * mutating the original object!) The lens is a function wrapped around the input `get`
     * function, with the `set` function attached as a property on the wrapper. A `map`
     * function is also attached to the returned function that takes a function to operate
     * on the specified (`get`) property, which is then `set` before returning. The attached
     * `set` and `map` functions are curried.
     *
     * @func
     * @memberOf R
     * @category Object
     * @sig (k -> v) -> (v -> a -> *) -> (a -> b)
     * @param {Function} get A function that gets a value by property name
     * @param {Function} set A function that gets a value by property name
     * @return {Function} the returned function has `set` and `map` properties that are
     *         also curried functions.
     * @example
     *
     *     var headLens = R.lens(
     *         function get(arr) { return arr[0]; },
     *         function set(val, arr) { return [val].concat(arr.slice(1)); }
     *     );
     *     headLens([10, 20, 30, 40]); //=> 10
     *     headLens.set('mu', [10, 20, 30, 40]); //=> ['mu', 20, 30, 40]
     *     headLens.map(function(x) { return x + 1; }, [10, 20, 30, 40]); //=> [11, 20, 30, 40]
     *
     *     var phraseLens = R.lens(
     *         function get(obj) { return obj.phrase; },
     *         function set(val, obj) {
     *             var out = R.clone(obj);
     *             out.phrase = val;
     *             return out;
     *         }
     *     );
     *     var obj1 = { phrase: 'Absolute filth . . . and I LOVED it!'};
     *     var obj2 = { phrase: "What's all this, then?"};
     *     phraseLens(obj1); // => 'Absolute filth . . . and I LOVED it!'
     *     phraseLens(obj2); // => "What's all this, then?"
     *     phraseLens.set('Ooh Betty', obj1); //=> { phrase: 'Ooh Betty'}
     *     phraseLens.map(R.toUpper, obj2); //=> { phrase: "WHAT'S ALL THIS, THEN?"}
     */
    var lens = _curry2(function lens(get, set) {
        var lns = function (a) {
            return get(a);
        };
        lns.set = _curry2(set);
        lns.map = _curry2(function (fn, a) {
            return set(fn(get(a)), a);
        });
        return lns;
    });

    /**
     * Returns a new list, constructed by applying the supplied function to every element of the
     * supplied list.
     *
     * Note: `R.map` does not skip deleted or unassigned indices (sparse arrays), unlike the
     * native `Array.prototype.map` method. For more details on this behavior, see:
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map#Description
     *
     * @func
     * @memberOf R
     * @category List
     * @sig (a -> b) -> [a] -> [b]
     * @param {Function} fn The function to be called on every element of the input `list`.
     * @param {Array} list The list to be iterated over.
     * @return {Array} The new list.
     * @example
     *
     *      var double = function(x) {
     *        return x * 2;
     *      };
     *
     *      R.map(double, [1, 2, 3]); //=> [2, 4, 6]
     */
    var map = _curry2(_checkForMethod('map', _map));

    /**
     * The mapAccum function behaves like a combination of map and reduce; it applies a
     * function to each element of a list, passing an accumulating parameter from left to
     * right, and returning a final value of this accumulator together with the new list.
     *
     * The iterator function receives two values: *(acc, value)*
     *
     * @func
     * @memberOf R
     * @category List
     * @sig (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])
     * @param {Function} fn The function to be called on every element of the input `list`.
     * @param {*} acc The accumulator value.
     * @param {Array} list The list to iterate over.
     * @return {*} The final, accumulated value.
     * @example
     *
     *      var digits = ['1', '2', '3', '4'];
     *      var append = function(a, b) {
     *          return [a + b, a + b];
     *      }
     *
     *      R.mapAccum(append, 0, digits); //=> ['01234', ['01', '012', '0123', '01234']]
     */
    var mapAccum = _curry3(function mapAccum(fn, acc, list) {
        var idx = -1, len = list.length, result = new Array(len), tuple = [acc];
        while (++idx < len) {
            tuple = fn(tuple[0], list[idx]);
            result[idx] = tuple[1];
        }
        return [
            tuple[0],
            result
        ];
    });

    /**
     * The mapAccumRight function behaves like a combination of map and reduce; it applies a
     * function to each element of a list, passing an accumulating parameter from right
     * to left, and returning a final value of this accumulator together with the new list.
     *
     * Similar to `mapAccum`, except moves through the input list from the right to the
     * left.
     *
     * The iterator function receives two values: *(acc, value)*
     *
     * @func
     * @memberOf R
     * @category List
     * @sig (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])
     * @param {Function} fn The function to be called on every element of the input `list`.
     * @param {*} acc The accumulator value.
     * @param {Array} list The list to iterate over.
     * @return {*} The final, accumulated value.
     * @example
     *
     *      var digits = ['1', '2', '3', '4'];
     *      var append = function(a, b) {
     *          return [a + b, a + b];
     *      }
     *
     *      R.mapAccumRight(append, 0, digits); //=> ['04321', ['04321', '0432', '043', '04']]
     */
    var mapAccumRight = _curry3(function mapAccumRight(fn, acc, list) {
        var idx = list.length, len = list.length, result = new Array(len), tuple = [acc];
        while (idx--) {
            tuple = fn(tuple[0], list[idx]);
            result[idx] = tuple[1];
        }
        return [
            tuple[0],
            result
        ];
    });

    /**
     * Like `map`, but but passes additional parameters to the mapping function.
     * `fn` receives three arguments: *(value, index, list)*.
     *
     * Note: `R.mapIndexed` does not skip deleted or unassigned indices (sparse arrays), unlike
     * the native `Array.prototype.map` method. For more details on this behavior, see:
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map#Description
     *
     * @func
     * @memberOf R
     * @category List
     * @sig (a,i,[b] -> b) -> [a] -> [b]
     * @param {Function} fn The function to be called on every element of the input `list`.
     * @param {Array} list The list to be iterated over.
     * @return {Array} The new list.
     * @example
     *
     *      var squareEnds = function(elt, idx, list) {
     *        if (idx === 0 || idx === list.length - 1) {
     *          return elt * elt;
     *        }
     *        return elt;
     *      };
     *
     *      R.mapIndexed(squareEnds, [8, 5, 3, 0, 9]); //=> [64, 5, 3, 0, 81]
     */
    var mapIndexed = _curry2(function mapIndexed(fn, list) {
        var idx = -1, len = list.length, result = new Array(len);
        while (++idx < len) {
            result[idx] = fn(list[idx], idx, list);
        }
        return result;
    });

    /**
     * Map, but for objects. Creates an object with the same keys as `obj` and values
     * generated by running each property of `obj` through `fn`. `fn` is passed one argument:
     * *(value)*.
     *
     * @func
     * @memberOf R
     * @category List
     * @sig (v -> v) -> {k: v} -> {k: v}
     * @param {Function} fn A function called for each property in `obj`. Its return value will
     * become a new property on the return object.
     * @param {Object} obj The object to iterate over.
     * @return {Object} A new object with the same keys as `obj` and values that are the result
     *         of running each property through `fn`.
     * @example
     *
     *      var values = { x: 1, y: 2, z: 3 };
     *      var double = function(num) {
     *        return num * 2;
     *      };
     *
     *      R.mapObj(double, values); //=> { x: 2, y: 4, z: 6 }
     */
    var mapObj = _curry2(function mapObject(fn, obj) {
        return _reduce(function (acc, key) {
            acc[key] = fn(obj[key]);
            return acc;
        }, {}, keys(obj));
    });

    /**
     * Like `mapObj`, but but passes additional arguments to the predicate function. The
     * predicate function is passed three arguments: *(value, key, obj)*.
     *
     * @func
     * @memberOf R
     * @category List
     * @sig (v, k, {k: v} -> v) -> {k: v} -> {k: v}
     * @param {Function} fn A function called for each property in `obj`. Its return value will
     *        become a new property on the return object.
     * @param {Object} obj The object to iterate over.
     * @return {Object} A new object with the same keys as `obj` and values that are the result
     *         of running each property through `fn`.
     * @example
     *
     *      var values = { x: 1, y: 2, z: 3 };
     *      var prependKeyAndDouble = function(num, key, obj) {
     *        return key + (num * 2);
     *      };
     *
     *      R.mapObjIndexed(prependKeyAndDouble, values); //=> { x: 'x2', y: 'y4', z: 'z6' }
     */
    var mapObjIndexed = _curry2(function mapObjectIndexed(fn, obj) {
        return _reduce(function (acc, key) {
            acc[key] = fn(obj[key], key, obj);
            return acc;
        }, {}, keys(obj));
    });

    /**
     * Tests a regular expression against a String
     *
     * @func
     * @memberOf R
     * @category String
     * @sig RegExp -> String -> [String] | null
     * @param {RegExp} rx A regular expression.
     * @param {String} str The string to match against
     * @return {Array} The list of matches, or null if no matches found.
     * @see R.invoker
     * @example
     *
     *      R.match(/([a-z]a)/g, 'bananas'); //=> ['ba', 'na', 'na']
     */
    var match = invoker(1, 'match');

    /**
     * Determines the largest of a list of numbers (or elements that can be cast to numbers)
     *
     * @func
     * @memberOf R
     * @category Math
     * @sig [Number] -> Number
     * @see R.maxBy
     * @param {Array} list A list of numbers
     * @return {Number} The greatest number in the list.
     * @example
     *
     *      R.max([7, 3, 9, 2, 4, 9, 3]); //=> 9
     */
    var max = _createMaxMin(_gt, -Infinity);

    /**
     * Determines the largest of a list of items as determined by pairwise comparisons from the supplied comparator
     *
     * @func
     * @memberOf R
     * @category Math
     * @sig (a -> Number) -> [a] -> a
     * @param {Function} keyFn A comparator function for elements in the list
     * @param {Array} list A list of comparable elements
     * @return {*} The greatest element in the list. `undefined` if the list is empty.
     * @see R.max
     * @example
     *
     *      function cmp(obj) { return obj.x; }
     *      var a = {x: 1}, b = {x: 2}, c = {x: 3};
     *      R.maxBy(cmp, [a, b, c]); //=> {x: 3}
     */
    var maxBy = _curry2(_createMaxMinBy(_gt));

    /**
     * Creates a new function that, when invoked, caches the result of calling `fn` for a given
     * argument set and returns the result. Subsequent calls to the memoized `fn` with the same
     * argument set will not result in an additional call to `fn`; instead, the cached result
     * for that set of arguments will be returned.
     *
     * Note that this version of `memoize` should not be applied to functions which
     * take objects as arguments.
     *
     * @func
     * @memberOf R
     * @category Function
     * @sig (*... -> a) -> (*... -> a)
     * @param {Function} fn The function to memoize.
     * @return {Function} Memoized version of `fn`.
     * @example
     *
     *      var count = 0;
     *      var factorial = R.memoize(function(n) {
     *          count += 1;
     *          return R.product(R.range(1, n + 1));
     *      });
     *      factorial(5); //=> 120
     *      factorial(5); //=> 120
     *      factorial(5); //=> 120
     *      count; //=> 1
     */
    // Returns a string representation of the given value suitable for use as
    // a property name.
    //
    // > repr(42)
    // '42::[object Number]'
    // Serializes an array-like object. The approach is similar to that taken
    // by [CANON](https://github.com/davidchambers/CANON), though it does not
    // differentiate between objects at all (!) and, since it is not applied
    // recursively, does not distinguish between [[42]] and [['42']].
    //
    // > serialize(['foo', 42])
    // '2:{foo::[object String],42::[object Number]}'
    var memoize = function () {
        // Returns a string representation of the given value suitable for use as
        // a property name.
        //
        // > repr(42)
        // '42::[object Number]'
        var repr = function (x) {
            return x + '::' + Object.prototype.toString.call(x);
        };
        // Serializes an array-like object. The approach is similar to that taken
        // by [CANON](https://github.com/davidchambers/CANON), though it does not
        // differentiate between objects at all (!) and, since it is not applied
        // recursively, does not distinguish between [[42]] and [['42']].
        //
        // > serialize(['foo', 42])
        // '2:{foo::[object String],42::[object Number]}'
        var serialize = function (args) {
            return args.length + ':{' + _map(repr, args).join(',') + '}';
        };
        return function memoize(fn) {
            var cache = {};
            return function () {
                var key = serialize(arguments);
                if (!has(key, cache)) {
                    cache[key] = fn.apply(this, arguments);
                }
                return cache[key];
            };
        };
    }();

    /**
     * Determines the smallest of a list of numbers (or elements that can be cast to numbers)
     *
     * @func
     * @memberOf R
     * @category Math
     * @sig [Number] -> Number
     * @param {Array} list A list of numbers
     * @return {Number} The greatest number in the list.
     * @see R.minBy
     * @example
     *
     *      R.min([7, 3, 9, 2, 4, 9, 3]); //=> 2
     */
    var min = _createMaxMin(_lt, Infinity);

    /**
     * Determines the smallest of a list of items as determined by pairwise comparisons from the supplied comparator
     *
     * @func
     * @memberOf R
     * @category Math
     * @sig (a -> Number) -> [a] -> a
     * @param {Function} keyFn A comparator function for elements in the list
     * @param {Array} list A list of comparable elements
     * @see R.min
     * @return {*} The greatest element in the list. `undefined` if the list is empty.
     * @example
     *
     *      function cmp(obj) { return obj.x; }
     *      var a = {x: 1}, b = {x: 2}, c = {x: 3};
     *      R.minBy(cmp, [a, b, c]); //=> {x: 1}
     */
    var minBy = _curry2(_createMaxMinBy(_lt));

    /**
     * Multiplies two numbers. Equivalent to `a * b` but curried.
     *
     * @func
     * @memberOf R
     * @category Math
     * @sig Number -> Number -> Number
     * @param {Number} a The first value.
     * @param {Number} b The second value.
     * @return {Number} The result of `a * b`.
     * @example
     *
     *      var double = R.multiply(2);
     *      var triple = R.multiply(3);
     *      double(3);       //=>  6
     *      triple(4);       //=> 12
     *      R.multiply(2, 5);  //=> 10
     */
    var multiply = _curry2(_multiply);

    /**
     * Negates its argument.
     *
     * @func
     * @memberOf R
     * @category Math
     * @sig Number -> Number
     * @param {Number} n
     * @return {Number}
     * @example
     *
     *      R.negate(42); //=> -42
     */
    var negate = multiply(-1);

    /**
     * Returns the nth element in a list.
     * If n is negative the element at index length + n is returned.
     *
     * @func
     * @memberOf R
     * @category List
     * @sig [a] -> a
     * @param {Number} idx
     * @param {Array} list
     * @return {*} The nth element of the list.
     * @example
     *
     *      var list = ['foo', 'bar', 'baz', 'quux'];
     *      R.nth(1, list); //=> 'bar'
     *      R.nth(-1, list); //=> 'quux'
     *      R.nth(-99, list); //=> undefined
     */
    var nth = _curry2(_nth);

    /**
     * Returns a partial copy of an object omitting the keys specified.
     *
     * @func
     * @memberOf R
     * @category Object
     * @sig [k] -> {k: v} -> {k: v}
     * @param {Array} names an array of String property names to omit from the new object
     * @param {Object} obj The object to copy from
     * @return {Object} A new object with properties from `names` not on it.
     * @example
     *
     *      R.omit(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, c: 3}
     */
    var omit = _curry2(function omit(names, obj) {
        return _pickBy(function (val, key) {
            return !_contains(key, names);
        }, obj);
    });

    /**
     * A function wrapping calls to the two functions in an `||` operation, returning the result of the first
     * function if it is truth-y and the result of the second function otherwise.  Note that this is
     * short-circuited, meaning that the second function will not be invoked if the first returns a truth-y
     * value.
     *
     * @func
     * @memberOf R
     * @category Logic
     * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)
     * @param {Function} f a predicate
     * @param {Function} g another predicate
     * @return {Function} a function that applies its arguments to `f` and `g` and ORs their outputs together.
     * @example
     *
     *      var gt10 = function(x) { return x > 10; };
     *      var even = function(x) { return x % 2 === 0 };
     *      var f = R.or(gt10, even);
     *      f(101); //=> true
     *      f(8); //=> true
     */
    var or = _curry2(function or(f, g) {
        return function _or() {
            return f.apply(this, arguments) || g.apply(this, arguments);
        };
    });

    /**
     * Accepts as its arguments a function and any number of values and returns a function that,
     * when invoked, calls the original function with all of the values prepended to the
     * original function's arguments list. In some libraries this function is named `applyLeft`.
     *
     * @func
     * @memberOf R
     * @category Function
     * @sig (a -> b -> ... -> i -> j -> ... -> m -> n) -> a -> b-> ... -> i -> (j -> ... -> m -> n)
     * @param {Function} fn The function to invoke.
     * @param {...*} [args] Arguments to prepend to `fn` when the returned function is invoked.
     * @return {Function} A new function wrapping `fn`. When invoked, it will call `fn`
     *         with `args` prepended to `fn`'s arguments list.
     * @example
     *
     *      var multiply = function(a, b) { return a * b; };
     *      var double = R.partial(multiply, 2);
     *      double(2); //=> 4
     *
     *      var greet = function(salutation, title, firstName, lastName) {
     *        return salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';
     *      };
     *      var sayHello = R.partial(greet, 'Hello');
     *      var sayHelloToMs = R.partial(sayHello, 'Ms.');
     *      sayHelloToMs('Jane', 'Jones'); //=> 'Hello, Ms. Jane Jones!'
     */
    var partial = _createPartialApplicator(_concat);

    /**
     * Accepts as its arguments a function and any number of values and returns a function that,
     * when invoked, calls the original function with all of the values appended to the original
     * function's arguments list.
     *
     * Note that `partialRight` is the opposite of `partial`: `partialRight` fills `fn`'s arguments
     * from the right to the left.  In some libraries this function is named `applyRight`.
     *
     * @func
     * @memberOf R
     * @category Function
     * @sig (a -> b-> ... -> i -> j -> ... -> m -> n) -> j -> ... -> m -> n -> (a -> b-> ... -> i)
     * @param {Function} fn The function to invoke.
     * @param {...*} [args] Arguments to append to `fn` when the returned function is invoked.
     * @return {Function} A new function wrapping `fn`. When invoked, it will call `fn` with
     *         `args` appended to `fn`'s arguments list.
     * @example
     *
     *      var greet = function(salutation, title, firstName, lastName) {
     *        return salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';
     *      };
     *      var greetMsJaneJones = R.partialRight(greet, 'Ms.', 'Jane', 'Jones');
     *
     *      greetMsJaneJones('Hello'); //=> 'Hello, Ms. Jane Jones!'
     */
    var partialRight = _createPartialApplicator(flip(_concat));

    /**
     * Takes a predicate and a list and returns the pair of lists of
     * elements which do and do not satisfy the predicate, respectively.
     *
     * @func
     * @memberOf R
     * @category List
     * @sig (a -> Boolean) -> [a] -> [[a],[a]]
     * @param {Function} pred A predicate to determine which array the element belongs to.
     * @param {Array} list The array to partition.
     * @return {Array} A nested array, containing first an array of elements that satisfied the predicate,
     *         and second an array of elements that did not satisfy.
     * @example
     *
     *      R.partition(R.contains('s'), ['sss', 'ttt', 'foo', 'bars']);
     *      //=> [ [ 'sss', 'bars' ],  [ 'ttt', 'foo' ] ]
     */
    var partition = _curry2(function partition(pred, list) {
        return _reduce(function (acc, elt) {
            acc[pred(elt) ? 0 : 1].push(elt);
            return acc;
        }, [
            [],
            []
        ], list);
    });

    /**
     * Determines whether a nested path on an object, seperated by periods,
     * has a specific value according to strict equality ('==='). Most
     * likely used to filter a list:
     *
     * @func
     * @memberOf R
     * @category Relation
     * @sig String -> v -> {k: v} -> Boolean
     * @param {String} path The path of the nested property to use
     * @param {*} val The value to compare the nested property with
     * @param {Object} obj The object to check the nested property in
     * @return {Boolean} `true` if the value equals the nested object property,
     *         `false` otherwise.
     * @example
     *
     *     var user1 = { address: { zipCode: 90210 } };
     *     var user2 = { address: { zipCode: 55555 } };
     *     var user3 = { name: 'Bob' };
     *     var users = [ user1, user2, user3 ]
     *     var isFamous = R.pathEq('address.zipCode', 90210);
     *     R.filter(isFamous, users); //=> [ user1 ]
     */
    var pathEq = _curry3(function (path, val, obj) {
        return _path(path.split('.'), obj) === val;
    });

    /**
     * Retrieve a nested path on an object separated by the specified
     * separator value.
     *
     * @func
     * @memberOf R
     * @category Object
     * @sig String -> String -> {*} -> *
     * @param {String} sep The separator to use in `path`.
     * @param {String} path The path to use.
     * @return {*} The data at `path`.
     * @example
     *
     *      R.pathOn('/', 'a/b/c', {a: {b: {c: 3}}}); //=> 3
     */
    var pathOn = _curry3(function pathOn(sep, str, obj) {
        return _path(str.split(sep), obj);
    });

    /**
     * Returns a partial copy of an object containing only the keys specified.  If the key does not exist, the
     * property is ignored.
     *
     * @func
     * @memberOf R
     * @category Object
     * @sig [k] -> {k: v} -> {k: v}
     * @param {Array} names an array of String property names to copy onto a new object
     * @param {Object} obj The object to copy from
     * @return {Object} A new object with only properties from `names` on it.
     * @example
     *
     *      R.pick(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}
     *      R.pick(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1}
     */
    var pick = _curry2(function pick(names, obj) {
        return _pickBy(function (val, key) {
            return _contains(key, names);
        }, obj);
    });

    /**
     * Similar to `pick` except that this one includes a `key: undefined` pair for properties that don't exist.
     *
     * @func
     * @memberOf R
     * @category Object
     * @sig [k] -> {k: v} -> {k: v}
     * @param {Array} names an array of String property names to copy onto a new object
     * @param {Object} obj The object to copy from
     * @return {Object} A new object with only properties from `names` on it.
     * @see R.pick
     * @example
     *
     *      R.pickAll(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}
     *      R.pickAll(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, e: undefined, f: undefined}
     */
    var pickAll = _curry2(_pickAll);

    /**
     * Returns a partial copy of an object containing only the keys that
     * satisfy the supplied predicate.
     *
     * @func
     * @memberOf R
     * @category Object
     * @sig (v, k -> Boolean) -> {k: v} -> {k: v}
     * @param {Function} pred A predicate to determine whether or not a key
     *        should be included on the output object.
     * @param {Object} obj The object to copy from
     * @return {Object} A new object with only properties that satisfy `pred`
     *         on it.
     * @see R.pick
     * @example
     *
     *      var isUpperCase = function(val, key) { return key.toUpperCase() === key; }
     *      R.pickBy(isUpperCase, {a: 1, b: 2, A: 3, B: 4}); //=> {A: 3, B: 4}
     */
    var pickBy = _curry2(_pickBy);

    /**
     * Creates a new function that runs each of the functions supplied as parameters in turn,
     * passing the return value of each function invocation to the next function invocation,
     * beginning with whatever arguments were passed to the initial invocation.
     *
     * `pipe` is the mirror version of `compose`. `pipe` is left-associative, which means that
     * each of the functions provided is executed in order from left to right.
     *
     * In some libraries this function is named `sequence`.
     * @func
     * @memberOf R
     * @category Function
     * @sig ((a... -> b), (b -> c), ..., (x -> y), (y -> z)) -> (a... -> z)
     * @param {...Function} functions A variable number of functions.
     * @return {Function} A new function which represents the result of calling each of the
     *         input `functions`, passing the result of each function call to the next, from
     *         left to right.
     * @example
     *
     *      var triple = function(x) { return x * 3; };
     *      var double = function(x) { return x * 2; };
     *      var square = function(x) { return x * x; };
     *      var squareThenDoubleThenTriple = R.pipe(square, double, triple);
     *
     *      //≅ triple(double(square(5)))
     *      squareThenDoubleThenTriple(5); //=> 150
     */
    var pipe = function pipe() {
        return compose.apply(this, reverse(arguments));
    };

    /**
     * Creates a new function that runs each of the functions supplied as parameters in turn,
     * passing to the next function invocation either the value returned by the previous
     * function or the resolved value if the returned value is a promise. In other words,
     * if some of the functions in the sequence return promises, `pipeP` pipes the values
     * asynchronously. If none of the functions return promises, the behavior is the same as
     * that of `pipe`.
     *
     * `pipeP` is the mirror version of `composeP`. `pipeP` is left-associative, which means that
     * each of the functions provided is executed in order from left to right.
     *
     * @func
     * @memberOf R
     * @category Function
     * @sig ((a... -> b), (b -> c), ..., (x -> y), (y -> z)) -> (a... -> z)
     * @param {...Function} functions A variable number of functions.
     * @return {Function} A new function which represents the result of calling each of the
     *         input `functions`, passing either the returned result or the asynchronously
     *         resolved value) of each function call to the next, from left to right.
     * @example
     *
     *      var Q = require('q');
     *      var triple = function(x) { return x * 3; };
     *      var double = function(x) { return x * 2; };
     *      var squareAsync = function(x) { return Q.when(x * x); };
     *      var squareAsyncThenDoubleThenTriple = R.pipeP(squareAsync, double, triple);
     *
     *      //≅ squareAsync(5).then(function(x) { return triple(double(x)) };
     *      squareAsyncThenDoubleThenTriple(5)
     *          .then(function(result) {
     *              // result is 150
     *          });
     */
    var pipeP = function pipeP() {
        return composeP.apply(this, reverse(arguments));
    };

    /**
     * Returns a new list by plucking the same named property off all objects in the list supplied.
     *
     * @func
     * @memberOf R
     * @category List
     * @sig String -> {*} -> [*]
     * @param {Number|String} key The key name to pluck off of each object.
     * @param {Array} list The array to consider.
     * @return {Array} The list of values for the given key.
     * @example
     *
     *      R.pluck('a')([{a: 1}, {a: 2}]); //=> [1, 2]
     *      R.pluck(0)([[1, 2], [3, 4]]);   //=> [1, 3]
     */
    var pluck = _curry2(_pluck);

    /**
     * Returns a new list with the given element at the front, followed by the contents of the
     * list.
     *
     * @func
     * @memberOf R
     * @category List
     * @sig a -> [a] -> [a]
     * @param {*} el The item to add to the head of the output list.
     * @param {Array} list The array to add to the tail of the output list.
     * @return {Array} A new array.
     * @example
     *
     *      R.prepend('fee', ['fi', 'fo', 'fum']); //=> ['fee', 'fi', 'fo', 'fum']
     */
    var prepend = _curry2(_prepend);

    /**
     * Determines whether the given property of an object has a specific
     * value according to strict equality (`===`).  Most likely used to
     * filter a list:
     *
     * @func
     * @memberOf R
     * @category Relation
     * @sig k -> v -> {k: v} -> Boolean
     * @param {Number|String} name The property name (or index) to use.
     * @param {*} val The value to compare the property with.
     * @return {Boolean} `true` if the properties are equal, `false` otherwise.
     * @example
     *
     *      var abby = {name: 'Abby', age: 7, hair: 'blond'};
     *      var fred = {name: 'Fred', age: 12, hair: 'brown'};
     *      var rusty = {name: 'Rusty', age: 10, hair: 'brown'};
     *      var alois = {name: 'Alois', age: 15, disposition: 'surly'};
     *      var kids = [abby, fred, rusty, alois];
     *      var hasBrownHair = R.propEq('hair', 'brown');
     *      R.filter(hasBrownHair, kids); //=> [fred, rusty]
     */
    var propEq = _curry3(function propEq(name, val, obj) {
        return obj[name] === val;
    });

    /**
     * If the given, non-null object has an own property with the specified name,
     * returns the value of that property.
     * Otherwise returns the provided default value.
     *
     * @func
     * @memberOf R
     * @category Object
     * @sig s -> v -> {s: x} -> x | v
     * @param {String} p The name of the property to return.
     * @param {*} val The default value.
     * @param {Object} obj The object to query.
     * @return {*} The value of given property or default value.
     * @example
     *
     *      var alice = {
     *        name: 'ALICE',
     *        age: 101
     *      };
     *      var favorite = R.prop('favoriteLibrary');
     *      var favoriteWithDefault = R.propOr('Ramda', 'favoriteLibrary');
     *
     *      favorite(alice);  //=> undefined
     *      favoriteWithDefault(alice);  //=> 'Ramda'
     */
    var propOr = _curry3(function propOr(val, p, obj) {
        return has(p, obj) ? obj[p] : val;
    });

    /**
     * Acts as multiple `get`: array of keys in, array of values out. Preserves order.
     *
     * @func
     * @memberOf R
     * @category Object
     * @sig [k] -> {k: v} -> [v]
     * @param {Array} ps The property names to fetch
     * @param {Object} obj The object to query
     * @return {Array} The corresponding values or partially applied function.
     * @example
     *
     *      R.props(['x', 'y'], {x: 1, y: 2}); //=> [1, 2]
     *      R.props(['c', 'a', 'b'], {b: 2, a: 1}); //=> [undefined, 1, 2]
     *
     *      var fullName = R.compose(R.join(' '), R.props(['first', 'last']));
     *      fullName({last: 'Bullet-Tooth', age: 33, first: 'Tony'}); //=> 'Tony Bullet-Tooth'
     */
    var props = _curry2(function props(ps, obj) {
        var len = ps.length, out = new Array(len), idx = -1;
        while (++idx < len) {
            out[idx] = obj[ps[idx]];
        }
        return out;
    });

    /**
     * Returns a list of numbers from `from` (inclusive) to `to`
     * (exclusive).
     *
     * @func
     * @memberOf R
     * @category List
     * @sig Number -> Number -> [Number]
     * @param {Number} from The first number in the list.
     * @param {Number} to One more than the last number in the list.
     * @return {Array} The list of numbers in tthe set `[a, b)`.
     * @example
     *
     *      R.range(1, 5);    //=> [1, 2, 3, 4]
     *      R.range(50, 53);  //=> [50, 51, 52]
     */
    var range = _curry2(function range(from, to) {
        if (from >= to) {
            return [];
        }
        var idx = 0, result = new Array(Math.floor(to) - Math.ceil(from));
        while (from < to) {
            result[idx++] = from++;
        }
        return result;
    });

    /**
     * Returns a single item by iterating through the list, successively calling the iterator
     * function and passing it an accumulator value and the current value from the array, and
     * then passing the result to the next call.
     *
     * The iterator function receives two values: *(acc, value)*
     *
     * Note: `R.reduce` does not skip deleted or unassigned indices (sparse arrays), unlike
     * the native `Array.prototype.reduce` method. For more details on this behavior, see:
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description
     *
     * @func
     * @memberOf R
     * @category List
     * @sig (a,b -> a) -> a -> [b] -> a
     * @param {Function} fn The iterator function. Receives two values, the accumulator and the
     *        current element from the array.
     * @param {*} acc The accumulator value.
     * @param {Array} list The list to iterate over.
     * @return {*} The final, accumulated value.
     * @example
     *
     *      var numbers = [1, 2, 3];
     *      var add = function(a, b) {
     *        return a + b;
     *      };
     *
     *      R.reduce(add, 10, numbers); //=> 16
     */
    var reduce = _curry3(_reduce);

    /**
     * Like `reduce`, but passes additional parameters to the predicate function.
     *
     * The iterator function receives four values: *(acc, value, index, list)*
     *
     * Note: `R.reduceIndexed` does not skip deleted or unassigned indices (sparse arrays),
     * unlike the native `Array.prototype.reduce` method. For more details on this behavior,
     * see:
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description
     *
     * @func
     * @memberOf R
     * @category List
     * @sig (a,b,i,[b] -> a) -> a -> [b] -> a
     * @param {Function} fn The iterator function. Receives four values: the accumulator, the
     *        current element from `list`, that element's index, and the entire `list` itself.
     * @param {*} acc The accumulator value.
     * @param {Array} list The list to iterate over.
     * @return {*} The final, accumulated value.
     * @example
     *
     *      var letters = ['a', 'b', 'c'];
     *      var objectify = function(accObject, elem, idx, list) {
     *        accObject[elem] = idx;
     *        return accObject;
     *      };
     *
     *      R.reduceIndexed(objectify, {}, letters); //=> { 'a': 0, 'b': 1, 'c': 2 }
     */
    var reduceIndexed = _curry3(function reduceIndexed(fn, acc, list) {
        var idx = -1, len = list.length;
        while (++idx < len) {
            acc = fn(acc, list[idx], idx, list);
        }
        return acc;
    });

    /**
     * Returns a single item by iterating through the list, successively calling the iterator
     * function and passing it an accumulator value and the current value from the array, and
     * then passing the result to the next call.
     *
     * Similar to `reduce`, except moves through the input list from the right to the left.
     *
     * The iterator function receives two values: *(acc, value)*
     *
     * Note: `R.reduceRight` does not skip deleted or unassigned indices (sparse arrays), unlike
     * the native `Array.prototype.reduce` method. For more details on this behavior, see:
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight#Description
     *
     * @func
     * @memberOf R
     * @category List
     * @sig (a,b -> a) -> a -> [b] -> a
     * @param {Function} fn The iterator function. Receives two values, the accumulator and the
     *        current element from the array.
     * @param {*} acc The accumulator value.
     * @param {Array} list The list to iterate over.
     * @return {*} The final, accumulated value.
     * @example
     *
     *      var pairs = [ ['a', 1], ['b', 2], ['c', 3] ];
     *      var flattenPairs = function(acc, pair) {
     *        return acc.concat(pair);
     *      };
     *
     *      R.reduceRight(flattenPairs, [], pairs); //=> [ 'c', 3, 'b', 2, 'a', 1 ]
     */
    var reduceRight = _curry3(function reduceRight(fn, acc, list) {
        var idx = list.length;
        while (idx--) {
            acc = fn(acc, list[idx]);
        }
        return acc;
    });

    /**
     * Like `reduceRight`, but passes additional parameters to the predicate function. Moves through
     * the input list from the right to the left.
     *
     * The iterator function receives four values: *(acc, value, index, list)*.
     *
     * Note: `R.reduceRightIndexed` does not skip deleted or unassigned indices (sparse arrays),
     * unlike the native `Array.prototype.reduce` method. For more details on this behavior,
     * see:
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight#Description
     *
     * @func
     * @memberOf R
     * @category List
     * @sig (a,b,i,[b] -> a -> [b] -> a
     * @param {Function} fn The iterator function. Receives four values: the accumulator, the
     *        current element from `list`, that element's index, and the entire `list` itself.
     * @param {*} acc The accumulator value.
     * @param {Array} list The list to iterate over.
     * @return {*} The final, accumulated value.
     * @example
     *
     *      var letters = ['a', 'b', 'c'];
     *      var objectify = function(accObject, elem, idx, list) {
     *        accObject[elem] = idx;
     *        return accObject;
     *      };
     *
     *      R.reduceRightIndexed(objectify, {}, letters); //=> { 'c': 2, 'b': 1, 'a': 0 }
     */
    var reduceRightIndexed = _curry3(function reduceRightIndexed(fn, acc, list) {
        var idx = list.length;
        while (idx--) {
            acc = fn(acc, list[idx], idx, list);
        }
        return acc;
    });

    /**
     * Similar to `filter`, except that it keeps only values for which the given predicate
     * function returns falsy. The predicate function is passed one argument: *(value)*.
     *
     * @func
     * @memberOf R
     * @category List
     * @sig (a -> Boolean) -> [a] -> [a]
     * @param {Function} fn The function called per iteration.
     * @param {Array} list The collection to iterate over.
     * @return {Array} The new filtered array.
     * @example
     *
     *      var isOdd = function(n) {
     *        return n % 2 === 1;
     *      };
     *      R.reject(isOdd, [1, 2, 3, 4]); //=> [2, 4]
     */
    var reject = _curry2(function reject(fn, list) {
        return filter(not(fn), list);
    });

    /**
     * Like `reject`, but passes additional parameters to the predicate function. The predicate
     * function is passed three arguments: *(value, index, list)*.
     *
     * @func
     * @memberOf R
     * @category List
     * @sig (a, i, [a] -> Boolean) -> [a] -> [a]
     * @param {Function} fn The function called per iteration.
     * @param {Array} list The collection to iterate over.
     * @return {Array} The new filtered array.
     * @example
     *
     *      var lastTwo = function(val, idx, list) {
     *        return list.length - idx <= 2;
     *      };
     *
     *      R.rejectIndexed(lastTwo, [8, 6, 7, 5, 3, 0, 9]); //=> [8, 6, 7, 5, 3]
     */
    var rejectIndexed = _curry2(function rejectIndexed(fn, list) {
        return _filterIndexed(not(fn), list);
    });

    /**
     * Removes the sub-list of `list` starting at index `start` and containing
     * `count` elements.  _Note that this is not destructive_: it returns a
     * copy of the list with the changes.
     * <small>No lists have been harmed in the application of this function.</small>
     *
     * @func
     * @memberOf R
     * @category List
     * @sig Number -> Number -> [a] -> [a]
     * @param {Number} start The position to start removing elements
     * @param {Number} count The number of elements to remove
     * @param {Array} list The list to remove from
     * @return {Array} A new Array with `count` elements from `start` removed.
     * @example
     *
     *      R.remove(2, 3, [1,2,3,4,5,6,7,8]); //=> [1,2,6,7,8]
     */
    var remove = _curry3(function remove(start, count, list) {
        return _concat(_slice(list, 0, Math.min(start, list.length)), _slice(list, Math.min(list.length, start + count)));
    });

    /**
     * Replace a substring or regex match in a string with a replacement.
     *
     * @func
     * @memberOf R
     * @category String
     * @sig RegExp|String -> String -> String -> String
     * @param {RegExp|String} pattern A regular expression or a substring to match.
     * @param {String} replacement The string to replace the matches with.
     * @param {String} str The String to do the search and replacement in.
     * @return {String} The result.
     * @example
     *
     *      R.replace('foo', 'bar', 'foo foo foo'); //=> 'bar foo foo'
     *      R.replace(/foo/, 'bar', 'foo foo foo'); //=> 'bar foo foo'
     *
     *      // Use the "g" (global) flag to replace all occurrences:
     *      R.replace(/foo/g, 'bar', 'foo foo foo'); //=> 'bar bar bar'
     */
    var replace = _curry3(function replace(regex, replacement, str) {
        return str.replace(regex, replacement);
    });

    /**
     * Scan is similar to reduce, but returns a list of successively reduced values from the left
     *
     * @func
     * @memberOf R
     * @category List
     * @sig (a,b -> a) -> a -> [b] -> [a]
     * @param {Function} fn The iterator function. Receives two values, the accumulator and the
     *        current element from the array
     * @param {*} acc The accumulator value.
     * @param {Array} list The list to iterate over.
     * @return {Array} A list of all intermediately reduced values.
     * @example
     *
     *      var numbers = [1, 2, 3, 4];
     *      var factorials = R.scan(R.multiply, 1, numbers); //=> [1, 1, 2, 6, 24]
     */
    var scan = _curry3(function scan(fn, acc, list) {
        var idx = 0, len = list.length + 1, result = new Array(len);
        result[idx] = acc;
        while (++idx < len) {
            acc = fn(acc, list[idx - 1]);
            result[idx] = acc;
        }
        return result;
    });

    /**
     * Returns the elements from `xs` starting at `a` and ending at `b - 1`.
     *
     * @func
     * @memberOf R
     * @category List
     * @sig Number -> Number -> [a] -> [a]
     * @param {Number} a The starting index.
     * @param {Number} b One more than the ending index.
     * @param {Array} xs The list to take elements from.
     * @return {Array} The items from `a` to `b - 1` from `xs`.
     * @example
     *
     *      var xs = R.range(0, 10);
     *      R.slice(2, 5)(xs); //=> [2, 3, 4]
     */
    var slice = invoker(2, 'slice');

    /**
     * Returns a copy of the list, sorted according to the comparator function, which should accept two values at a
     * time and return a negative number if the first value is smaller, a positive number if it's larger, and zero
     * if they are equal.  Please note that this is a **copy** of the list.  It does not modify the original.
     *
     * @func
     * @memberOf R
     * @category List
     * @sig (a,a -> Number) -> [a] -> [a]
     * @param {Function} comparator A sorting function :: a -> b -> Int
     * @param {Array} list The list to sort
     * @return {Array} a new array with its elements sorted by the comparator function.
     * @example
     *
     *      var diff = function(a, b) { return a - b; };
     *      R.sort(diff, [4,2,7,5]); //=> [2, 4, 5, 7]
     */
    var sort = _curry2(function sort(comparator, list) {
        return clone(list).sort(comparator);
    });

    /**
     * Sorts the list according to a key generated by the supplied function.
     *
     * @func
     * @memberOf R
     * @category Relation
     * @sig (a -> String) -> [a] -> [a]
     * @param {Function} fn The function mapping `list` items to keys.
     * @param {Array} list The list to sort.
     * @return {Array} A new list sorted by the keys generated by `fn`.
     * @example
     *
     *      var sortByFirstItem = R.sortBy(prop(0));
     *      var sortByNameCaseInsensitive = R.sortBy(compose(R.toLower, prop('name')));
     *      var pairs = [[-1, 1], [-2, 2], [-3, 3]];
     *      sortByFirstItem(pairs); //=> [[-3, 3], [-2, 2], [-1, 1]]
     *      var alice = {
     *         name: 'ALICE',
     *         age: 101
     *      };
     *      var bob = {
     *         name: 'Bob',
     *        age: -10
     *      };
     *      var clara = {
     *        name: 'clara',
     *        age: 314.159
     *      };
     *      var people = [clara, bob, alice];
     *      sortByNameCaseInsensitive(people); //=> [alice, bob, clara]
     */
    var sortBy = _curry2(function sortBy(fn, list) {
        return _slice(list).sort(function (a, b) {
            var aa = fn(a);
            var bb = fn(b);
            return aa < bb ? -1 : aa > bb ? 1 : 0;
        });
    });

    /**
     * Splits a string into an array of strings based on the given
     * separator.
     *
     * @func
     * @memberOf R
     * @category String
     * @sig String -> String -> [String]
     * @param {String} sep The separator string.
     * @param {String} str The string to separate into an array.
     * @return {Array} The array of strings from `str` separated by `str`.
     * @example
     *
     *      var pathComponents = R.split('/');
     *      R.tail(pathComponents('/usr/local/bin/node')); //=> ['usr', 'local', 'bin', 'node']
     *
     *      R.split('.', 'a.b.c.xyz.d'); //=> ['a', 'b', 'c', 'xyz', 'd']
     */
    var split = invoker(1, 'split');

    /**
     * Finds the first index of a substring in a string, returning -1 if it's not present
     *
     * @func
     * @memberOf R
     * @category String
     * @sig String -> String -> Number
     * @param {String} c A string to find.
     * @param {String} str The string to search in
     * @return {Number} The first index of `c` or -1 if not found.
     * @example
     *
     *      R.strIndexOf('c', 'abcdefg'); //=> 2
     */
    var strIndexOf = _curry2(function strIndexOf(c, str) {
        return str.indexOf(c);
    });

    /**
     *
     * Finds the last index of a substring in a string, returning -1 if it's not present
     *
     * @func
     * @memberOf R
     * @category String
     * @sig String -> String -> Number
     * @param {String} c A string to find.
     * @param {String} str The string to search in
     * @return {Number} The last index of `c` or -1 if not found.
     * @example
     *
     *      R.strLastIndexOf('a', 'banana split'); //=> 5
     */
    var strLastIndexOf = _curry2(function (c, str) {
        return str.lastIndexOf(c);
    });

    /**
     * returns a subset of a string between one index and another.
     *
     * @func
     * @memberOf R
     * @category String
     * @sig Number -> Number -> String -> String
     * @param {Number} indexA An integer between 0 and the length of the string.
     * @param {Number} indexB An integer between 0 and the length of the string.
     * @param {String} str The string to extract from
     * @return {String} The extracted substring.
     * @see R.invoker
     * @example
     *
     *      R.substring(2, 5, 'abcdefghijklm'); //=> 'cde'
     */
    var substring = invoker(2, 'substring');

    /**
     * The trailing substring of a String starting with the nth character:
     *
     * @func
     * @memberOf R
     * @category String
     * @sig Number -> String -> String
     * @param {Number} indexA An integer between 0 and the length of the string.
     * @param {String} str The string to extract from
     * @return {String} The extracted substring.
     * @example
     *
     *      R.substringFrom(8, 'abcdefghijklm'); //=> 'ijklm'
     */
    var substringFrom = flip(substring)(void 0);

    /**
     * The leading substring of a String ending before the nth character:
     *
     * @func
     * @memberOf R
     * @category String
     * @sig Number -> String -> String
     * @param {Number} indexA An integer between 0 and the length of the string.
     * @param {String} str The string to extract from
     * @return {String} The extracted substring.
     * @example
     *
     *      R.substringTo(8, 'abcdefghijklm'); //=> 'abcdefgh'
     */
    var substringTo = substring(0);

    /**
     * Adds together all the elements of a list.
     *
     * @func
     * @memberOf R
     * @category Math
     * @sig [Number] -> Number
     * @param {Array} list An array of numbers
     * @return {Number} The sum of all the numbers in the list.
     * @see reduce
     * @example
     *
     *      R.sum([2,4,6,8,100,1]); //=> 121
     */
    var sum = reduce(_add, 0);

    /**
     * Returns all but the first element of a list. If the list provided has the `tail` method,
     * it will instead return `list.tail()`.
     *
     * @func
     * @memberOf R
     * @category List
     * @sig [a] -> [a]
     * @param {Array} [list=[]] The array to consider.
     * @return {Array} A new array containing all but the first element of the input list, or an
     *         empty list if the input list is empty.
     * @example
     *
     *      R.tail(['fi', 'fo', 'fum']); //=> ['fo', 'fum']
     */
    var tail = _checkForMethod('tail', function (list) {
        return _slice(list, 1);
    });

    /**
     * Returns a new list containing the first `n` elements of the given list.  If
     * `n > * list.length`, returns a list of `list.length` elements.
     *
     * @func
     * @memberOf R
     * @category List
     * @sig Number -> [a] -> [a]
     * @param {Number} n The number of elements to return.
     * @param {Array} list The array to query.
     * @return {Array} A new array containing the first elements of `list`.
     */
    var take = _curry2(_checkForMethod('take', function (n, list) {
        return _slice(list, 0, Math.min(n, list.length));
    }));

    /**
     * Returns a new list containing the first `n` elements of a given list, passing each value
     * to the supplied predicate function, and terminating when the predicate function returns
     * `false`. Excludes the element that caused the predicate function to fail. The predicate
     * function is passed one argument: *(value)*.
     *
     * @func
     * @memberOf R
     * @category List
     * @sig (a -> Boolean) -> [a] -> [a]
     * @param {Function} fn The function called per iteration.
     * @param {Array} list The collection to iterate over.
     * @return {Array} A new array.
     * @example
     *
     *      var isNotFour = function(x) {
     *        return !(x === 4);
     *      };
     *
     *      R.takeWhile(isNotFour, [1, 2, 3, 4]); //=> [1, 2, 3]
     */
    var takeWhile = _curry2(_checkForMethod('takeWhile', function (fn, list) {
        var idx = -1, len = list.length;
        while (++idx < len && fn(list[idx])) {
        }
        return _slice(list, 0, idx);
    }));

    /**
     * Runs the given function with the supplied object, then returns the object.
     *
     * @func
     * @memberOf R
     * @category Function
     * @sig (a -> *) -> a -> a
     * @param {Function} fn The function to call with `x`. The return value of `fn` will be thrown away.
     * @param {*} x
     * @return {*} `x`.
     * @example
     *
     *      var sayX = function(x) { console.log('x is ' + x); };
     *      R.tap(sayX, 100); //=> 100
     *      //-> 'x is 100')
     */
    var tap = _curry2(function tap(fn, x) {
        fn(x);
        return x;
    });

    /**
     * Calls an input function `n` times, returning an array containing the results of those
     * function calls.
     *
     * `fn` is passed one argument: The current value of `n`, which begins at `0` and is
     * gradually incremented to `n - 1`.
     *
     * @func
     * @memberOf R
     * @category List
     * @sig (i -> a) -> i -> [a]
     * @param {Function} fn The function to invoke. Passed one argument, the current value of `n`.
     * @param {Number} n A value between `0` and `n - 1`. Increments after each function call.
     * @return {Array} An array containing the return values of all calls to `fn`.
     * @example
     *
     *      R.times(R.identity, 5); //=> [0, 1, 2, 3, 4]
     */
    var times = _curry2(function times(fn, n) {
        var list = new Array(Number(n));
        var len = list.length;
        var idx = -1;
        while (++idx < len) {
            list[idx] = fn(idx);
        }
        return list;
    });

    /**
     * The lower case version of a string.
     *
     * @func
     * @memberOf R
     * @category String
     * @sig String -> String
     * @param {String} str The string to lower case.
     * @return {String} The lower case version of `str`.
     * @example
     *
     *      R.toLower('XYZ'); //=> 'xyz'
     */
    var toLower = invoker(0, 'toLowerCase');

    /**
     * Converts an object into an array of key, value arrays.
     * Only the object's own properties are used.
     * Note that the order of the output array is not guaranteed to be
     * consistent across different JS platforms.
     *
     * @func
     * @memberOf R
     * @category Object
     * @sig {k: v} -> [[k,v]]
     * @param {Object} obj The object to extract from
     * @return {Array} An array of key, value arrays from the object's own properties.
     * @example
     *
     *      R.toPairs({a: 1, b: 2, c: 3}); //=> [['a', 1], ['b', 2], ['c', 3]]
     */
    var toPairs = _pairWith(keys);

    /**
     * The upper case version of a string.
     *
     * @func
     * @memberOf R
     * @category String
     * @sig String -> String
     * @param {String} str The string to upper case.
     * @return {String} The upper case version of `str`.
     * @example
     *
     *      R.toUpper('abc'); //=> 'ABC'
     */
    var toUpper = invoker(0, 'toUpperCase');

    /**
     * Builds a list from a seed value. Accepts an iterator function, which returns either false
     * to stop iteration or an array of length 2 containing the value to add to the resulting
     * list and the seed to be used in the next call to the iterator function.
     *
     * The iterator function receives one argument: *(seed)*.
     *
     * @func
     * @memberOf R
     * @category List
     * @sig (a -> [b]) -> * -> [b]
     * @param {Function} fn The iterator function. receives one argument, `seed`, and returns
     *        either false to quit iteration or an array of length two to proceed. The element
     *        at index 0 of this array will be added to the resulting array, and the element
     *        at index 1 will be passed to the next call to `fn`.
     * @param {*} seed The seed value.
     * @return {Array} The final list.
     * @example
     *
     *      var f = function(n) { return n > 50 ? false : [-n, n + 10] };
     *      R.unfold(f, 10); //=> [-10, -20, -30, -40, -50]
     */
    var unfold = _curry2(function unfold(fn, seed) {
        var pair = fn(seed);
        var result = [];
        while (pair && pair.length) {
            result[result.length] = pair[0];
            pair = fn(pair[1]);
        }
        return result;
    });

    /**
     * Returns a new list containing only one copy of each element in the original list.
     * Equality is strict here, meaning reference equality for objects and non-coercing equality
     * for primitives.
     *
     * @func
     * @memberOf R
     * @category List
     * @sig [a] -> [a]
     * @param {Array} list The array to consider.
     * @return {Array} The list of unique items.
     * @example
     *
     *      R.uniq([1, 1, 2, 1]); //=> [1, 2]
     *      R.uniq([{}, {}]);     //=> [{}, {}]
     *      R.uniq([1, '1']);     //=> [1, '1']
     */
    var uniq = function uniq(list) {
        var idx = -1, len = list.length;
        var result = [], item;
        while (++idx < len) {
            item = list[idx];
            if (!_contains(item, result)) {
                result[result.length] = item;
            }
        }
        return result;
    };

    /**
     * Returns a new list containing only one copy of each element in the original list, based
     * upon the value returned by applying the supplied predicate to two list elements. Prefers
     * the first item if two items compare equal based on the predicate.
     *
     * @func
     * @memberOf R
     * @category List
     * @sig (a, a -> Boolean) -> [a] -> [a]
     * @param {Function} pred A predicate used to test whether two items are equal.
     * @param {Array} list The array to consider.
     * @return {Array} The list of unique items.
     * @example
     *
     *      var strEq = function(a, b) { return String(a) === String(b); };
     *      R.uniqWith(strEq)([1, '1', 2, 1]); //=> [1, 2]
     *      R.uniqWith(strEq)([{}, {}]);       //=> [{}]
     *      R.uniqWith(strEq)([1, '1', 1]);    //=> [1]
     *      R.uniqWith(strEq)(['1', 1, 1]);    //=> ['1']
     */
    var uniqWith = _curry2(function uniqWith(pred, list) {
        var idx = -1, len = list.length;
        var result = [], item;
        while (++idx < len) {
            item = list[idx];
            if (!_containsWith(pred, item, result)) {
                result[result.length] = item;
            }
        }
        return result;
    });

    /**
     * Returns a new list by pulling every item at the first level of nesting out, and putting
     * them in a new array.
     *
     * @func
     * @memberOf R
     * @category List
     * @sig [a] -> [b]
     * @param {Array} list The array to consider.
     * @return {Array} The flattened list.
     * @example
     *
     *      R.unnest([1, [2], [[3]]]); //=> [1, 2, [3]]
     *      R.unnest([[1, 2], [3, 4], [5, 6]]); //=> [1, 2, 3, 4, 5, 6]
     */
    var unnest = _makeFlat(false);

    /**
     * Returns a list of all the enumerable own properties of the supplied object.
     * Note that the order of the output array is not guaranteed across
     * different JS platforms.
     *
     * @func
     * @memberOf R
     * @category Object
     * @sig {k: v} -> [v]
     * @param {Object} obj The object to extract values from
     * @return {Array} An array of the values of the object's own properties.
     * @example
     *
     *      R.values({a: 1, b: 2, c: 3}); //=> [1, 2, 3]
     */
    var values = function values(obj) {
        var props = keys(obj);
        var len = props.length;
        var vals = new Array(len);
        var idx = -1;
        while (++idx < len) {
            vals[idx] = obj[props[idx]];
        }
        return vals;
    };

    /**
     * Takes a spec object and a test object and returns true if the test satisfies the spec.
     * Any property on the spec that is not a function is interpreted as an equality
     * relation.
     *
     * If the spec has a property mapped to a function, then `where` evaluates the function, passing in
     * the test object's value for the property in question, as well as the whole test object.
     *
     * `where` is well suited to declaratively expressing constraints for other functions, e.g.,
     * `filter`, `find`, `pickBy`, etc.
     *
     * @func
     * @memberOf R
     * @category Object
     * @sig {k: v} -> {k: v} -> Boolean
     * @param {Object} spec
     * @param {Object} testObj
     * @return {Boolean}
     * @example
     *
     *      var spec = {x: 2};
     *      R.where(spec, {w: 10, x: 2, y: 300}); //=> true
     *      R.where(spec, {x: 1, y: 'moo', z: true}); //=> false
     *
     *      var spec2 = {x: function(val, obj) { return  val + obj.y > 10; }};
     *      R.where(spec2, {x: 2, y: 7}); //=> false
     *      R.where(spec2, {x: 3, y: 8}); //=> true
     *
     *      var xs = [{x: 2, y: 1}, {x: 10, y: 2}, {x: 8, y: 3}, {x: 10, y: 4}];
     *      R.filter(R.where({x: 10}), xs); // ==> [{x: 10, y: 2}, {x: 10, y: 4}]
     */
    var where = function where(spec, testObj) {
        var parsedSpec = groupBy(function (key) {
            return typeof spec[key] === 'function' ? 'fn' : 'obj';
        }, keys(spec));
        switch (arguments.length) {
        case 0:
            throw _noArgsException();
        case 1:
            return function (testObj) {
                return _satisfiesSpec(spec, parsedSpec, testObj);
            };
        }
        return _satisfiesSpec(spec, parsedSpec, testObj);
    };

    /**
     * Wrap a function inside another to allow you to make adjustments to the parameters, or do
     * other processing either before the internal function is called or with its results.
     *
     * @func
     * @memberOf R
     * @category Function
     * @sig (a... -> b) -> ((a... -> b) -> a... -> c) -> (a... -> c)
     * @param {Function} fn The function to wrap.
     * @param {Function} wrapper The wrapper function.
     * @return {Function} The wrapped function.
     * @example
     *
     *      var greet = function(name) {return 'Hello ' + name;};
     *
     *      var shoutedGreet = R.wrap(greet, function(gr, name) {
     *          return gr(name).toUpperCase();
     *      });
     *      shoutedGreet("Kathy"); //=> "HELLO KATHY"
     *
     *      var shortenedGreet = R.wrap(greet, function(gr, name) {
     *          return gr(name.substring(0, 3));
     *      });
     *      shortenedGreet("Robert"); //=> "Hello Rob"
     *
     */
    var wrap = function wrap(fn, wrapper) {
        return curryN(fn.length, function () {
            return wrapper.apply(this, _concat([fn], arguments));
        });
    };

    /**
     * Creates a new list out of the two supplied by creating each possible
     * pair from the lists.
     *
     * @func
     * @memberOf R
     * @category List
     * @sig [a] -> [b] -> [[a,b]]
     * @param {Array} as The first list.
     * @param {Array} bs The second list.
     * @return {Array} The list made by combining each possible pair from
     *         `as` and `bs` into pairs (`[a, b]`).
     * @example
     *
     *      R.xprod([1, 2], ['a', 'b']); //=> [[1, 'a'], [1, 'b'], [2, 'a'], [2, 'b']]
     */
    // = xprodWith(prepend); (takes about 3 times as long...)
    // Better to push them all or to do `new Array(ilen * jlen)` and calculate indices?
    var xprod = _curry2(function xprod(a, b) {
        // = xprodWith(prepend); (takes about 3 times as long...)
        var idx = -1;
        var ilen = a.length;
        var j;
        var jlen = b.length;
        // Better to push them all or to do `new Array(ilen * jlen)` and calculate indices?
        var result = [];
        while (++idx < ilen) {
            j = -1;
            while (++j < jlen) {
                result[result.length] = [
                    a[idx],
                    b[j]
                ];
            }
        }
        return result;
    });

    /**
     * Creates a new list out of the two supplied by pairing up
     * equally-positioned items from both lists.  The returned list is
     * truncated to the length of the shorter of the two input lists.
     * Note: `zip` is equivalent to `zipWith(function(a, b) { return [a, b] })`.
     *
     * @func
     * @memberOf R
     * @category List
     * @sig a -> b -> [[a,b]]
     * @param {Array} list1 The first array to consider.
     * @param {Array} list2 The second array to consider.
     * @return {Array} The list made by pairing up same-indexed elements of `list1` and `list2`.
     * @example
     *
     *      R.zip([1, 2, 3], ['a', 'b', 'c']); //=> [[1, 'a'], [2, 'b'], [3, 'c']]
     */
    var zip = _curry2(function zip(a, b) {
        var rv = [];
        var idx = -1;
        var len = Math.min(a.length, b.length);
        while (++idx < len) {
            rv[idx] = [
                a[idx],
                b[idx]
            ];
        }
        return rv;
    });

    /**
     * Creates a new object out of a list of keys and a list of values.
     *
     * @func
     * @memberOf R
     * @category List
     * @sig k -> v -> {k: v}
     * @param {Array} keys The array that will be properties on the output object.
     * @param {Array} values The list of values on the output object.
     * @return {Object} The object made by pairing up same-indexed elements of `keys` and `values`.
     * @example
     *
     *      R.zipObj(['a', 'b', 'c'], [1, 2, 3]); //=> {a: 1, b: 2, c: 3}
     */
    var zipObj = _curry2(function zipObj(keys, values) {
        var idx = -1, len = keys.length, out = {};
        while (++idx < len) {
            out[keys[idx]] = values[idx];
        }
        return out;
    });

    /**
     * Creates a new list out of the two supplied by applying the function to
     * each equally-positioned pair in the lists. The returned list is
     * truncated to the length of the shorter of the two input lists.
     *
     * @function
     * @memberOf R
     * @category List
     * @sig (a,b -> c) -> [a] -> [b] -> [c]
     * @param {Function} fn The function used to combine the two elements into one value.
     * @param {Array} list1 The first array to consider.
     * @param {Array} list2 The second array to consider.
     * @return {Array} The list made by combining same-indexed elements of `list1` and `list2`
     *         using `fn`.
     * @example
     *
     *      var f = function(x, y) {
     *        // ...
     *      };
     *      R.zipWith(f, [1, 2, 3], ['a', 'b', 'c']);
     *      //=> [f(1, 'a'), f(2, 'b'), f(3, 'c')]
     */
    var zipWith = _curry3(function zipWith(fn, a, b) {
        var rv = [], idx = -1, len = Math.min(a.length, b.length);
        while (++idx < len) {
            rv[idx] = fn(a[idx], b[idx]);
        }
        return rv;
    });

    var _ap = function _ap(fns, vs) {
        return _hasMethod('ap', fns) ? fns.ap(vs) : _reduce(function (acc, fn) {
            return _concat(acc, _map(fn, vs));
        }, [], fns);
    };

    // The algorithm used to handle cyclic structures is
    // inspired by underscore's isEqual
    // RegExp equality algorithm: http://stackoverflow.com/a/10776635
    var _eqDeep = function _eqDeep(a, b, stackA, stackB) {
        var typeA = type(a);
        if (typeA !== type(b)) {
            return false;
        }
        if (eq(a, b)) {
            return true;
        }
        if (typeA == 'RegExp') {
            // RegExp equality algorithm: http://stackoverflow.com/a/10776635
            return a.source === b.source && a.global === b.global && a.ignoreCase === b.ignoreCase && a.multiline === b.multiline && a.sticky === b.sticky && a.unicode === b.unicode;
        }
        if (Object(a) === a) {
            if (typeA === 'Date' && a.getTime() != b.getTime()) {
                return false;
            }
            var keysA = keys(a);
            if (keysA.length !== keys(b).length) {
                return false;
            }
            var idx = stackA.length;
            while (idx--) {
                if (stackA[idx] === a) {
                    return stackB[idx] === b;
                }
            }
            stackA.push(a);
            stackB.push(b);
            idx = keysA.length;
            while (idx--) {
                var key = keysA[idx];
                if (!has(key, b) || !_eqDeep(b[key], a[key], stackA, stackB)) {
                    return false;
                }
            }
            stackA.pop();
            stackB.pop();
            return true;
        }
        return false;
    };

    /**
     * Assigns own enumerable properties of the other object to the destination
     * object preferring items in other.
     *
     * @private
     * @memberOf R
     * @category Object
     * @param {Object} destination The destination object.
     * @param {Object} other The other object to merge with destination.
     * @return {Object} The destination object.
     * @example
     *
     *      _extend({ 'name': 'fred', 'age': 10 }, { 'age': 40 });
     *      //=> { 'name': 'fred', 'age': 40 }
     */
    var _extend = function _extend(destination, other) {
        var props = keys(other), idx = -1, length = props.length;
        while (++idx < length) {
            destination[props[idx]] = other[props[idx]];
        }
        return destination;
    };

    /**
     * Create a predicate wrapper which will call a pick function (all/any) for each predicate
     *
     * @private
     * @see R.all
     * @see R.any
     */
    // Call function immediately if given arguments
    // Return a function which will call the predicates with the provided arguments
    var _predicateWrap = function _predicateWrap(predPicker) {
        return function (preds) {
            var predIterator = function () {
                var args = arguments;
                return predPicker(function (predicate) {
                    return predicate.apply(null, args);
                }, preds);
            };
            return arguments.length > 1 ? // Call function immediately if given arguments
            predIterator.apply(null, _slice(arguments, 1)) : // Return a function which will call the predicates with the provided arguments
            arity(max(_pluck('length', preds)), predIterator);
        };
    };

    /**
     * Given a list of predicates, returns a new predicate that will be true exactly when all of them are.
     *
     * @func
     * @memberOf R
     * @category Logic
     * @sig [(*... -> Boolean)] -> (*... -> Boolean)
     * @param {Array} list An array of predicate functions
     * @param {*} optional Any arguments to pass into the predicates
     * @return {Function} a function that applies its arguments to each of
     *         the predicates, returning `true` if all are satisfied.
     * @example
     *
     *      var gt10 = function(x) { return x > 10; };
     *      var even = function(x) { return x % 2 === 0};
     *      var f = R.allPass([gt10, even]);
     *      f(11); //=> false
     *      f(12); //=> true
     */
    var allPass = _predicateWrap(_all);

    /**
     * Given a list of predicates returns a new predicate that will be true exactly when any one of them is.
     *
     * @func
     * @memberOf R
     * @category Logic
     * @sig [(*... -> Boolean)] -> (*... -> Boolean)
     * @param {Array} list An array of predicate functions
     * @param {*} optional Any arguments to pass into the predicates
     * @return {Function} A function that applies its arguments to each of the predicates, returning
     *         `true` if all are satisfied.
     * @example
     *
     *      var gt10 = function(x) { return x > 10; };
     *      var even = function(x) { return x % 2 === 0};
     *      var f = R.anyPass([gt10, even]);
     *      f(11); //=> true
     *      f(8); //=> true
     *      f(9); //=> false
     */
    var anyPass = _predicateWrap(_any);

    /**
     * ap applies a list of functions to a list of values.
     *
     * @func
     * @memberOf R
     * @category Function
     * @sig [f] -> [a] -> [f a]
     * @param {Array} fns An array of functions
     * @param {Array} vs An array of values
     * @return {Array} The value of applying each the function `fns` to each value in `vs`.
     * @example
     *
     *      R.ap([R.multiply(2), R.add(3)], [1,2,3]); //=> [2, 4, 6, 4, 5, 6]
     */
    var ap = _curry2(_ap);

    /**
     * Makes a shallow clone of an object, setting or overriding the specified
     * property with the given value.  Note that this copies and flattens
     * prototype properties onto the new object as well.  All non-primitive
     * properties are copied by reference.
     *
     * @func
     * @memberOf R
     * @category Object
     * @sig String -> a -> {k: v} -> {k: v}
     * @param {String} prop the property name to set
     * @param {*} val the new value
     * @param {Object} obj the object to clone
     * @return {Object} a new object similar to the original except for the specified property.
     * @example
     *
     *      var obj1 = {a: 1, b: {c: 2, d: 3}, e: 4, f: 5};
     *      var obj2 = R.assoc('e', {x: 42}, obj1);
     *      //=>  {a: 1, b: {c: 2, d: 3}, e: {x: 42}, f: 5}
     *
     *      // And moreover, obj2.b is a reference to obj1.b
     *      // No unnecessary objects are created.
     */
    // rather than `clone` to get prototype props too, even though they're flattened
    var assoc = _curry3(function assoc(prop, val, obj) {
        // rather than `clone` to get prototype props too, even though they're flattened
        return _extend(fromPairs(_map(function (key) {
            return [
                key,
                obj[key]
            ];
        }, keysIn(obj))), createMapEntry(prop, val));
    });

    /**
     * Makes a shallow clone of an object, setting or overriding the nodes
     * required to create the given path, and placing the specifiec value at the
     * tail end of that path.  Note that this copies and flattens prototype
     * properties onto the new object as well.  All non-primitive properties
     * are copied by reference.
     *
     * @func
     * @memberOf R
     * @category Object
     * @sig String -> a -> {k: v} -> {k: v}
     * @param {String} path the dot-delimited path to set
     * @param {*} val the new value
     * @param {Object} obj the object to clone
     * @return {Object} a new object similar to the original except along the specified path.
     * @example
     *
     *      var obj1 = {a: {b: 1, c: 2, d: {e: 3}}, f: {g: {h: 4, i: 5, j: {k: 6, l: 7}}}, m: 8};
     *      var obj2 = R.assocPath('f.g.i', {x: 42}, obj1);
     *      //=> {a: {b: 1, c: 2, d: {e: 3}}, f: {g: {h: 4, i: {x: 42}, j: {k: 6, l: 7}}}, m: 8}
     */
    var assocPath = function () {
        var setParts = function (parts, val, obj) {
            if (parts.length === 1) {
                return assoc(parts[0], val, obj);
            }
            var current = obj[parts[0]];
            return assoc(parts[0], setParts(_slice(parts, 1), val, is(Object, current) ? current : {}), obj);
        };
        return function (path, val, obj) {
            var length = arguments.length;
            if (length === 0) {
                throw _noArgsException();
            }
            var parts = split('.', path);
            var fn = _curry2(function (val, obj) {
                return setParts(parts, val, obj);
            });
            switch (length) {
            case 1:
                return fn;
            case 2:
                return fn(val);
            default:
                return fn(val, obj);
            }
        };
    }();

    /**
     * `chain` maps a function over a list and concatenates the results.
     * This implementation is compatible with the
     * Fantasy-land Chain spec, and will work with types that implement that spec.
     * `chain` is also known as `flatMap` in some libraries
     *
     * @func
     * @memberOf R
     * @category List
     * @sig (a -> [b]) -> [a] -> [b]
     * @param {Function} fn
     * @param {Array} list
     * @return {Array}
     * @example
     *
     *      var duplicate = function(n) {
     *        return [n, n];
     *      };
     *      R.chain(duplicate, [1, 2, 3]); //=> [1, 1, 2, 2, 3, 3]
     *
     */
    var chain = _curry2(_checkForMethod('chain', function chain(f, list) {
        return unnest(_map(f, list));
    }));

    /**
     * The character at the nth position in a String:
     *
     * @func
     * @memberOf R
     * @category String
     * @sig Number -> String -> String
     * @param {Number} index An integer between 0 and the length of the string.
     * @param {String} str The string to extract a char from
     * @return {String} The character at `index` of `str`.
     * @see R.invoker
     * @example
     *
     *      R.charAt(8, 'abcdefghijklm'); //=> 'i'
     */
    var charAt = invoker(1, 'charAt');

    /**
     * The ascii code of the character at the nth position in a String:
     *
     * @func
     * @memberOf R
     * @category String
     * @sig Number -> String -> Number
     * @param {Number} index An integer between 0 and the length of the string.
     * @param {String} str The string to extract a charCode from
     * @return {Number} The code of the character at `index` of `str`.
     * @see R.invoker
     * @example
     *
     *      R.charCodeAt(8, 'abcdefghijklm'); //=> 105
     *      // (... 'a' ~ 97, 'b' ~ 98, ... 'i' ~ 105)
     */
    var charCodeAt = invoker(1, 'charCodeAt');

    /**
     * Turns a list of Functors into a Functor of a list, applying
     * a mapping function to the elements of the list along the way.
     *
     * Note: `commuteMap` may be more useful to convert a list of non-Array Functors (e.g.
     * Maybe, Either, etc.) to Functor of a list.
     *
     * @func
     * @memberOf R
     * @category List
     * @see R.commute
     * @sig (a -> (b -> c)) -> (x -> [x]) -> [[*]...]
     * @param {Function} fn The transformation function
     * @param {Function} of A function that returns the data type to return
     * @param {Array} list An Array (or other Functor) of Arrays (or other Functors)
     * @return {Array}
     * @example
     *
     *     var plus10map = R.map(function(x) { return x + 10; });
     *     var as = [[1], [3, 4]];
     *     R.commuteMap(R.map(function(x) { return x + 10; }), R.of, as); //=> [[11, 13], [11, 14]]
     *
     *     var bs = [[1, 2], [3]];
     *     R.commuteMap(plus10map, R.of, bs); //=> [[11, 13], [12, 13]]
     *
     *     var cs = [[1, 2], [3, 4]];
     *     R.commuteMap(plus10map, R.of, cs); //=> [[11, 13], [12, 13], [11, 14], [12, 14]]
     *
     */
    var commuteMap = _curry3(function commuteMap(fn, of, list) {
        function consF(acc, ftor) {
            return _ap(_map(append, fn(ftor)), acc);
        }
        return _reduce(consF, of([]), list);
    });

    /**
     * Counts the elements of a list according to how many match each value
     * of a key generated by the supplied function. Returns an object
     * mapping the keys produced by `fn` to the number of occurrences in
     * the list. Note that all keys are coerced to strings because of how
     * JavaScript objects work.
     *
     * @func
     * @memberOf R
     * @category Relation
     * @sig (a -> String) -> [a] -> {*}
     * @param {Function} fn The function used to map values to keys.
     * @param {Array} list The list to count elements from.
     * @return {Object} An object mapping keys to number of occurrences in the list.
     * @example
     *
     *      var numbers = [1.0, 1.1, 1.2, 2.0, 3.0, 2.2];
     *      var letters = R.split('', 'abcABCaaaBBc');
     *      R.countBy(Math.floor)(numbers);    //=> {'1': 3, '2': 2, '3': 1}
     *      R.countBy(R.toLower)(letters);   //=> {'a': 5, 'b': 4, 'c': 3}
     */
    var countBy = _curry2(function countBy(fn, list) {
        var counts = {};
        var len = list.length;
        var idx = -1;
        while (++idx < len) {
            var key = fn(list[idx]);
            counts[key] = (has(key, counts) ? counts[key] : 0) + 1;
        }
        return counts;
    });

    /**
     * Creates a new version of `fn` that, when invoked, will return either:
     * - A new function ready to accept one or more of `fn`'s remaining arguments, if all of
     * `fn`'s expected arguments have not yet been provided
     * - `fn`'s result if all of its expected arguments have been provided
     *
     * @func
     * @memberOf R
     * @category Function
     * @sig (* -> a) -> (* -> a)
     * @param {Function} fn The function to curry.
     * @return {Function} A new, curried function.
     * @see R.curryN
     * @example
     *
     *      var addFourNumbers = function(a, b, c, d) {
     *        return a + b + c + d;
     *      };
     *
     *      var curriedAddFourNumbers = R.curry(addFourNumbers);
     *      var f = curriedAddFourNumbers(1, 2);
     *      var g = f(3);
     *      g(4);//=> 10
     */
    var curry = function curry(fn) {
        return curryN(fn.length, fn);
    };

    /**
     * Performs a deep test on whether two items are equal.
     * Equality implies the two items are semmatically equivalent.
     * Cyclic structures are handled as expected
     *
     * @func
     * @memberOf R
     * @category Relation
     * @sig a -> b -> Boolean
     * @param {*} a
     * @param {*} b
     * @return {Boolean}
     * @example
     *
     *      var o = {};
     *      R.eqDeep(o, o); //=> true
     *      R.eqDeep(o, {}); //=> true
     *      R.eqDeep(1, 1); //=> true
     *      R.eqDeep(1, '1'); //=> false
     *
     *      var a = {}; a.v = a;
     *      var b = {}; b.v = b;
     *      R.eqDeep(a, b); //=> true
     */
    var eqDeep = _curry2(function eqDeep(a, b) {
        return _eqDeep(a, b, [], []);
    });

    /**
     * Creates a new object by evolving a shallow copy of `object`, according to the
     * `transformation` functions.  All non-primitive properties are copied by reference.
     *
     * @func
     * @memberOf R
     * @category Object
     * @sig {k: (v -> v)} -> {k: v} -> {k: v}
     * @param {Object} transformations The object specifying transformation functions to apply
     *        to the object.
     * @param {Object} object The object to be transformed.
     * @return {Object} The transformed object.
     * @example
     *
     *      R.evolve({ elapsed: R.add(1), remaining: R.add(-1) }, { name: 'Tomato', elapsed: 100, remaining: 1400 }); //=> { name: 'Tomato', elapsed: 101, remaining: 1399 }
     */
    var evolve = _curry2(function evolve(transformations, object) {
        return _extend(_extend({}, object), mapObjIndexed(function (fn, key) {
            return fn(object[key]);
        }, transformations));
    });

    /**
     * Returns a list of function names of object's own functions
     *
     * @func
     * @memberOf R
     * @category Object
     * @sig {*} -> [String]
     * @param {Object} obj The objects with functions in it
     * @return {Array} A list of the object's own properties that map to functions.
     * @example
     *
     *      R.functions(R); // returns list of ramda's own function names
     *
     *      var F = function() { this.x = function(){}; this.y = 1; }
     *      F.prototype.z = function() {};
     *      F.prototype.a = 100;
     *      R.functions(new F()); //=> ["x"]
     */
    var functions = _functionsWith(keys);

    /**
     * Returns the first element in a list.
     * In some libraries this function is named `first`.
     *
     * @func
     * @memberOf R
     * @category List
     * @sig [a] -> a
     * @param {Array} [list=[]] The array to consider.
     * @return {*} The first element of the list, or `undefined` if the list is empty.
     * @example
     *
     *      R.head(['fi', 'fo', 'fum']); //=> 'fi'
     */
    var head = nth(0);

    /**
     * Returns all but the last element of a list.
     *
     * @func
     * @memberOf R
     * @category List
     * @sig [a] -> [a]
     * @param {Array} [list=[]] The array to consider.
     * @return {Array} A new array containing all but the last element of the input list, or an
     *         empty list if the input list is empty.
     * @example
     *
     *      R.init(['fi', 'fo', 'fum']); //=> ['fi', 'fo']
     */
    var init = slice(0, -1);

    /* global R */
    /**
     * Expose the functions from ramda as properties of another object.
     * If the provided object is the global object then the ramda
     * functions become global functions.
     * Warning: This function *will* mutate the object provided.
     *
     * @func
     * @memberOf R
     * @category Object
     * @sig -> {*} -> {*}
     * @param {Object} obj The object to attach ramda functions
     * @return {Object} a reference to the mutated object.
     * @example
     *
     *      var x = {}
     *      R.installTo(x); // x now contains ramda functions
     *      R.installTo(this); // add ramda functions to `this` object
     */
    var installTo = function (obj) {
        return _extend(obj, R);
    };

    /**
     * Combines two lists into a set (i.e. no duplicates) composed of those elements common to both lists.
     *
     * @func
     * @memberOf R
     * @category Relation
     * @sig [a] -> [a] -> [a]
     * @param {Array} list1 The first list.
     * @param {Array} list2 The second list.
     * @see R.intersectionWith
     * @return {Array} The list of elements found in both `list1` and `list2`.
     * @example
     *
     *      R.intersection([1,2,3,4], [7,6,5,4,3]); //=> [4, 3]
     */
    var intersection = _curry2(function intersection(list1, list2) {
        return uniq(_filter(flip(_contains)(list1), list2));
    });

    /**
     * Combines two lists into a set (i.e. no duplicates) composed of those
     * elements common to both lists.  Duplication is determined according
     * to the value returned by applying the supplied predicate to two list
     * elements.
     *
     * @func
     * @memberOf R
     * @category Relation
     * @sig (a,a -> Boolean) -> [a] -> [a] -> [a]
     * @param {Function} pred A predicate function that determines whether
     *        the two supplied elements are equal.
     * @param {Array} list1 One list of items to compare
     * @param {Array} list2 A second list of items to compare
     * @see R.intersection
     * @return {Array} A new list containing those elements common to both lists.
     * @example
     *
     *      var buffaloSpringfield = [
     *        {id: 824, name: 'Richie Furay'},
     *        {id: 956, name: 'Dewey Martin'},
     *        {id: 313, name: 'Bruce Palmer'},
     *        {id: 456, name: 'Stephen Stills'},
     *        {id: 177, name: 'Neil Young'}
     *      ];
     *      var csny = [
     *        {id: 204, name: 'David Crosby'},
     *        {id: 456, name: 'Stephen Stills'},
     *        {id: 539, name: 'Graham Nash'},
     *        {id: 177, name: 'Neil Young'}
     *      ];
     *
     *      var sameId = function(o1, o2) {return o1.id === o2.id;};
     *
     *      R.intersectionWith(sameId, buffaloSpringfield, csny);
     *      //=> [{id: 456, name: 'Stephen Stills'}, {id: 177, name: 'Neil Young'}]
     */
    var intersectionWith = _curry3(function intersectionWith(pred, list1, list2) {
        var results = [], idx = -1;
        while (++idx < list1.length) {
            if (_containsWith(pred, list1[idx], list2)) {
                results[results.length] = list1[idx];
            }
        }
        return uniqWith(pred, results);
    });

    /**
     * Same as R.invertObj, however this accounts for objects
     * with duplicate values by putting the values into an
     * array.
     *
     * @func
     * @memberOf R
     * @category Object
     * @sig {s: x} -> {x: [ s, ... ]}
     * @param {Object} obj The object or array to invert
     * @return {Object} out A new object with keys
     * in an array.
     * @example
     *
     *      var raceResultsByFirstName = {
     *        first: 'alice',
     *        second: 'jake',
     *        third: 'alice',
     *      };
     *      R.invert(raceResultsByFirstName);
     *      //=> { 'alice': ['first', 'third'], 'jake':['second'] }
     *
     */
    var invert = function invert(obj) {
        var props = keys(obj);
        var len = props.length;
        var idx = -1;
        var out = {};
        while (++idx < len) {
            var key = props[idx];
            var val = obj[key];
            if (!has(val, out)) {
                out[val] = [];
            }
            out[val].push(key);
        }
        return out;
    };

    /**
     * Returns a new object with the keys of the given object
     * as values, and the values of the given object as keys.
     *
     * @func
     * @memberOf R
     * @category Object
     * @sig {s: x} -> {x: s}
     * @param {Object} obj The object or array to invert
     * @return {Object} out A new object
     * @example
     *
     *      var raceResults = {
     *        first: 'alice',
     *        second: 'jake'
     *      };
     *      R.invertObj(raceResults);
     *      //=> { 'alice': 'first', 'jake':'second' }
     *
     *      // Alternatively:
     *      var raceResults = ['alice', 'jake'];
     *      R.invertObj(raceResults);
     *      //=> { 'alice': '0', 'jake':'1' }
     */
    var invertObj = function invertObj(obj) {
        var props = keys(obj);
        var len = props.length;
        var idx = -1;
        var out = {};
        while (++idx < len) {
            var key = props[idx];
            out[obj[key]] = key;
        }
        return out;
    };

    /**
     * Returns the last element from a list.
     *
     * @func
     * @memberOf R
     * @category List
     * @sig [a] -> a
     * @param {Array} [list=[]] The array to consider.
     * @return {*} The last element of the list, or `undefined` if the list is empty.
     * @example
     *
     *      R.last(['fi', 'fo', 'fum']); //=> 'fum'
     */
    var last = nth(-1);

    /**
     * "lifts" a function to be the specified arity, so that it may "map over" that many
     * lists (or other Functors).
     *
     * @func
     * @memberOf R
     * @see R.lift
     * @category Function
     * @sig Number -> (*... -> *) -> ([*]... -> [*])
     * @param {Function} fn The function to lift into higher context
     * @return {Function} The function `fn` applicable to mappable objects.
     * @example
     *
     *     var madd3 = R.liftN(3, R.curryN(3, function() {
     *         return R.reduce(R.add, 0, arguments);
     *     }));
     *     madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]
     */
    var liftN = _curry2(function liftN(arity, fn) {
        var lifted = curryN(arity, fn);
        if (arguments.length === 0) {
            throw _noArgsException();
        }
        return curryN(arity, function () {
            return _reduce(_ap, map(lifted, arguments[0]), _slice(arguments, 1));
        });
    });

    /**
     * Uses a placeholder to convert a binary function into something like an infix operation.
     * When called with the `R.__` placeholder the second argument is applied to the
     * second position, and it returns a function waiting for its first argument.
     * This can allow for more natural processing of functions which are really binary operators.
     *
     * @func
     * @memberOf R
     * @category Function
     * @param {Function} fn The binary operation to adjust
     * @return {Function} A new function that acts somewhat like an infix operator.
     * @example
     *
     *      var div = R.op(function (a, b) {
     *          return a / b;
     *      });
     *
     *      div(6, 3); //=> 2
     *      div(6)(3); //=> 2
     *      div(R.__, 3)(6); //=> 2
     *      div(R.__)(3, 6); //=> 2
     *      div(R.__)(3)(6); //=> 2
     */
    var op = function op(fn) {
        if (fn.length !== 2) {
            throw new Error('Expected binary function.');
        }
        return function _op(a, b) {
            switch (arguments.length) {
            case 0:
                throw _noArgsException();
            case 1:
                return a === __ ? flip(_op) : partial(fn, a);
            default:
                return a === __ ? flip(fn)(b) : fn(a, b);
            }
        };
    };

    /**
     * Retrieve a nested path on an object separated by periods
     *
     * @func
     * @memberOf R
     * @category Object
     * @sig String -> {*} -> *
     * @param {String} path The dot path to use.
     * @return {*} The data at `path`.
     * @example
     *
     *      R.path('a.b', {a: {b: 2}}); //=> 2
     */
    var path = pathOn('.');

    /**
     * Multiplies together all the elements of a list.
     *
     * @func
     * @memberOf R
     * @category Math
     * @sig [Number] -> Number
     * @param {Array} list An array of numbers
     * @return {Number} The product of all the numbers in the list.
     * @see reduce
     * @example
     *
     *      R.product([2,4,6,8,100,1]); //=> 38400
     */
    var product = reduce(_multiply, 1);

    /**
     * Returns a fixed list of size `n` containing a specified identical value.
     *
     * @func
     * @memberOf R
     * @category List
     * @sig a -> n -> [a]
     * @param {*} value The value to repeat.
     * @param {Number} n The desired size of the output list.
     * @return {Array} A new array containing `n` `value`s.
     * @example
     *
     *      R.repeat('hi', 5); //=> ['hi', 'hi', 'hi', 'hi', 'hi']
     *
     *      var obj = {};
     *      var repeatedObjs = R.repeat(obj, 5); //=> [{}, {}, {}, {}, {}]
     *      repeatedObjs[0] === repeatedObjs[1]; //=> true
     */
    var repeat = _curry2(function repeat(value, n) {
        return times(always(value), n);
    });

    /**
     * Subtracts two numbers. Equivalent to `a - b` but curried.
     *
     * @func
     * @memberOf R
     * @category Math
     * @sig Number -> Number -> Number
     * @param {Number} a The first value.
     * @param {Number} b The second value.
     * @return {Number} The result of `a - b`.
     * @note Operator: Since this is a non-commutative infix operator converted to prefix, it can
     *                 be curried right by explicitly passing `R.__` for its first argument.
     * @example
     *
     *      R.subtract(10, 8); //=> 2
     *
     *      var minus5 = R.subtract(R.__, 5);
     *      minus5(17); //=> 12
     *
     *      var complementaryAngle = R.subtract(90);
     *      complementaryAngle(30); //=> 60
     *      complementaryAngle(72); //=> 18
     */
    var subtract = op(function subtract(a, b) {
        return a - b;
    });

    /**
     * Combines two lists into a set (i.e. no duplicates) composed of the
     * elements of each list.
     *
     * @func
     * @memberOf R
     * @category Relation
     * @sig [a] -> [a] -> [a]
     * @param {Array} as The first list.
     * @param {Array} bs The second list.
     * @return {Array} The first and second lists concatenated, with
     *         duplicates removed.
     * @example
     *
     *      R.union([1, 2, 3], [2, 3, 4]); //=> [1, 2, 3, 4]
     */
    var union = _curry2(compose(uniq, _concat));

    /**
     * Combines two lists into a set (i.e. no duplicates) composed of the elements of each list.  Duplication is
     * determined according to the value returned by applying the supplied predicate to two list elements.
     *
     * @func
     * @memberOf R
     * @category Relation
     * @sig (a,a -> Boolean) -> [a] -> [a] -> [a]
     * @param {Function} pred A predicate used to test whether two items are equal.
     * @param {Array} list1 The first list.
     * @param {Array} list2 The second list.
     * @return {Array} The first and second lists concatenated, with
     *         duplicates removed.
     * @see R.union
     * @example
     *
     *      function cmp(x, y) { return x.a === y.a; }
     *      var l1 = [{a: 1}, {a: 2}];
     *      var l2 = [{a: 1}, {a: 4}];
     *      R.unionWith(cmp, l1, l2); //=> [{a: 1}, {a: 2}, {a: 4}]
     */
    var unionWith = _curry3(function unionWith(pred, list1, list2) {
        return uniqWith(pred, _concat(list1, list2));
    });

    /**
     * Accepts a function `fn` and any number of transformer functions and returns a new
     * function. When the new function is invoked, it calls the function `fn` with parameters
     * consisting of the result of calling each supplied handler on successive arguments to the
     * new function.
     *
     * If more arguments are passed to the returned function than transformer functions, those
     * arguments are passed directly to `fn` as additional parameters. If you expect additional
     * arguments that don't need to be transformed, although you can ignore them, it's best to
     * pass an identity function so that the new function reports the correct arity.
     *
     * @func
     * @memberOf R
     * @category Function
     * @sig ((* -> *), (* -> *)...) -> (* -> *)
     * @param {Function} fn The function to wrap.
     * @param {...Function} transformers A variable number of transformer functions
     * @return {Function} The wrapped function.
     * @example
     *
     *      // Example 1:
     *
     *      // Number -> [Person] -> [Person]
     *      var byAge = R.useWith(R.filter, R.propEq('age'), R.identity);
     *
     *      var kids = [
     *          {name: 'Abbie', age: 6},
     *          {name: 'Brian', age: 5},
     *          {name: 'Chris', age: 6},
     *          {name: 'David', age: 4},
     *          {name: 'Ellie', age: 5}
     *      ];
     *
     *      byAge(5, kids); //=> [{name: 'Brian', age: 5}, {name: 'Ellie', age: 5}]
     *
     *
     *      // Example 2:
     *
     *      var double = function(y) { return y * 2; };
     *      var square = function(x) { return x * x; };
     *      var add = function(a, b) { return a + b; };
     *      // Adds any number of arguments together
     *      var addAll = function() {
     *        return R.reduce(add, 0, arguments);
     *      };
     *
     *      // Basic example
     *      var addDoubleAndSquare = R.useWith(addAll, double, square);
     *
     *      //≅ addAll(double(10), square(5));
     *      addDoubleAndSquare(10, 5); //=> 45
     *
     *      // Example of passing more arguments than transformers
     *      //≅ addAll(double(10), square(5), 100);
     *      addDoubleAndSquare(10, 5, 100); //=> 145
     *
     *      // If there are extra _expected_ arguments that don't need to be transformed, although
     *      // you can ignore them, it might be best to pass in the identity function so that the new
     *      // function correctly reports arity.
     *      var addDoubleAndSquareWithExtraParams = R.useWith(addAll, double, square, R.identity);
     *      // addDoubleAndSquareWithExtraParams.length //=> 3
     *      //≅ addAll(double(10), square(5), R.identity(100));
     *      addDoubleAndSquare(10, 5, 100); //=> 145
     */
    /*, transformers */
    var useWith = function useWith(fn) {
        var transformers = _slice(arguments, 1);
        var tlen = transformers.length;
        return curry(arity(tlen, function () {
            var args = [], idx = -1;
            while (++idx < tlen) {
                args[args.length] = transformers[idx](arguments[idx]);
            }
            return fn.apply(this, args.concat(_slice(arguments, tlen)));
        }));
    };

    /**
     * Turns a list of Functors into a Functor of a list.
     *
     * Note: `commute` may be more useful to convert a list of non-Array Functors (e.g.
     * Maybe, Either, etc.) to Functor of a list.
     *
     * @func
     * @memberOf R
     * @category List
     * @see R.commuteMap
     * @sig (x -> [x]) -> [[*]...]
     * @param {Function} of A function that returns the data type to return
     * @param {Array} list An Array (or other Functor) of Arrays (or other Functors)
     * @return {Array}
     * @example
     *
     *     var as = [[1], [3, 4]];
     *     R.commute(R.of, as); //=> [[1, 3], [1, 4]]
     *
     *     var bs = [[1, 2], [3]];
     *     R.commute(R.of, bs); //=> [[1, 3], [2, 3]]
     *
     *     var cs = [[1, 2], [3, 4]];
     *     R.commute(R.of, cs); //=> [[1, 3], [2, 3], [1, 4], [2, 4]]
     */
    var commute = commuteMap(map(identity));

    /**
     * Returns a new list consisting of the elements of the first list followed by the elements
     * of the second.
     *
     * @func
     * @memberOf R
     * @category List
     * @sig [a] -> [a] -> [a]
     * @param {Array} list1 The first list to merge.
     * @param {Array} list2 The second set to merge.
     * @return {Array} A new array consisting of the contents of `list1` followed by the
     *         contents of `list2`. If, instead of an Array for `list1`, you pass an
     *         object with a `concat` method on it, `concat` will call `list1.concat`
     *         and pass it the value of `list2`.
     * @note Operator: Since this is a non-commutative infix operator converted to prefix, it can
     *         be curried right by explicitly passing `R.__` for its first argument.
     *
     * @example
     *
     *      R.concat([], []); //=> []
     *      R.concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]
     *      R.concat('ABC', 'DEF'); // 'ABCDEF'
     *
     *      // operator-style:
     *      R.concat(R.__)([4, 5, 6], [1, 2, 3]); //=> [1, 2, 3, 4, 5, 6]
     *
     */
    var concat = op(function (set1, set2) {
        if (_isArray(set2)) {
            return _concat(set1, set2);
        } else if (_hasMethod('concat', set1)) {
            return set1.concat(set2);
        } else {
            throw new TypeError('can\'t concat ' + typeof set1);
        }
    });

    /**
     * Wraps a constructor function inside a curried function that can be called with the same
     * arguments and returns the same type. The arity of the function returned is specified
     * to allow using variadic constructor functions.
     *
     * @func
     * @memberOf R
     * @category Function
     * @sig Number -> (* -> {*}) -> (* -> {*})
     * @param {Number} n The arity of the constructor function.
     * @param {Function} Fn The constructor function to wrap.
     * @return {Function} A wrapped, curried constructor function.
     * @example
     *
     *      // Variadic constructor function
     *      var Widget = function() {
     *        this.children = Array.prototype.slice.call(arguments);
     *        // ...
     *      };
     *      Widget.prototype = {
     *        // ...
     *      };
     *      var allConfigs = {
     *        // ...
     *      };
     *      R.map(R.constructN(1, Widget), allConfigs); // a list of Widgets
     */
    var constructN = _curry2(function constructN(n, Fn) {
        if (n > 10) {
            throw new Error('Constructor with greater than ten arguments');
        }
        if (n === 0) {
            return function () {
                return new Fn();
            };
        }
        return curry(nAry(n, function ($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
            switch (arguments.length) {
            case 1:
                return new Fn($0);
            case 2:
                return new Fn($0, $1);
            case 3:
                return new Fn($0, $1, $2);
            case 4:
                return new Fn($0, $1, $2, $3);
            case 5:
                return new Fn($0, $1, $2, $3, $4);
            case 6:
                return new Fn($0, $1, $2, $3, $4, $5);
            case 7:
                return new Fn($0, $1, $2, $3, $4, $5, $6);
            case 8:
                return new Fn($0, $1, $2, $3, $4, $5, $6, $7);
            case 9:
                return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8);
            case 10:
                return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8, $9);
            }
        }));
    });

    /**
     * Returns `true` if the specified item is somewhere in the list, `false` otherwise.
     * Equivalent to `indexOf(a)(list) > -1`. Uses strict (`===`) equality checking.
     *
     * @func
     * @memberOf R
     * @category List
     * @sig a -> [a] -> Boolean
     * @param {Object} a The item to compare against.
     * @param {Array} list The array to consider.
     * @return {Boolean} `true` if the item is in the list, `false` otherwise.
     * @note Operator: Since this is a non-commutative infix operator converted to prefix, it can
     *       be curried right by explicitly passing `R.__` for its first argument.
     *
     * @example
     *
     *      R.contains(3)([1, 2, 3]); //=> true
     *      R.contains(4)([1, 2, 3]); //=> false
     *      R.contains({})([{}, {}]); //=> false
     *      var obj = {};
     *      R.contains(obj)([{}, obj, {}]); //=> true
     *
     *      // operator-style
     *      R.contains(R.__)([1, 2, 3], 3) //=> true
     *
     */
    var contains = op(_contains);

    /**
     * Divides two numbers. Equivalent to `a / b`.
     *
     * @func
     * @memberOf R
     * @category Math
     * @sig Number -> Number -> Number
     * @param {Number} a The first value.
     * @param {Number} b The second value.
     * @return {Number} The result of `a / b`.
     * @note Operator: Since this is a non-commutative infix operator converted to prefix, it can
     *                 be curried right by explicitly passing `undefined` for its first argument.
     * @example
     *
     *      R.divide(71, 100); //=> 0.71
     *
     *      var half = R.divide(R.__, 2);
     *      half(42); //=> 21
     *
     *      var reciprocal = R.divide(1);
     *      reciprocal(4);   //=> 0.25
     */
    var divide = op(function divide(a, b) {
        return a / b;
    });

    /**
     * Returns true if the first parameter is greater than the second.
     *
     * @func
     * @memberOf R
     * @category Math
     * @sig Number -> Number -> Boolean
     * @param {Number} a
     * @param {Number} b
     * @return {Boolean} a > b
     * @note Operator: Since this is a non-commutative infix operator converted to prefix, it can
     *                 be curried right by explicitly passing `undefined` for its first argument.
     * @example
     *
     *      R.gt(2, 6); //=> false
     *      R.gt(2, 0); //=> true
     *      R.gt(2, 2); //=> false
     *      R.gt(R.__, 2)(10); //=> true
     *      R.gt(2)(10); //=> false
     */
    var gt = op(_gt);

    /**
     * Returns true if the first parameter is greater than or equal to the second.
     *
     * @func
     * @memberOf R
     * @category Math
     * @sig Number -> Number -> Boolean
     * @param {Number} a
     * @param {Number} b
     * @return {Boolean} a >= b
     * @note Operator: this is right-curried by default, but can be called via sections
     * @example
     *
     *      R.gte(2, 6); //=> false
     *      R.gte(2, 0); //=> true
     *      R.gte(2, 2); //=> true
     *      R.gte(R.__, 6)(2); //=> false
     *      R.gte(2)(0); //=> true
     *      R.gte(R.__)(1, 2); //=> true
     */
    var gte = op(function gte(a, b) {
        return a >= b;
    });

    /**
     * "lifts" a function of arity > 1 so that it may "map over" an Array or
     * other Functor.
     *
     * @func
     * @memberOf R
     * @see R.liftN
     * @category Function
     * @sig (*... -> *) -> ([*]... -> [*])
     * @param {Function} fn The function to lift into higher context
     * @return {Function} The function `fn` applicable to mappable objects.
     * @example
     *
     *     var madd3 = R.lift(R.curryN(3, function(a, b, c) {
     *         return a + b + c;
     *     }));
     *     madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]
     *
     *     var madd5 = R.lift(R.curryN(5, function(a, b, c, d, e) {
     *         return a + b + c + d + e;
     *     }));
     *     madd5([1,2], [3], [4, 5], [6], [7, 8]); //=> [21, 22, 22, 23, 22, 23, 23, 24]
     */
    var lift = function lift(fn) {
        if (arguments.length === 0) {
            throw _noArgsException();
        }
        return liftN(fn.length, fn);
    };

    /**
     * Returns true if the first parameter is less than the second.
     *
     * @func
     * @memberOf R
     * @category Math
     * @sig Number -> Number -> Boolean
     * @param {Number} a
     * @param {Number} b
     * @return {Boolean} a < b
     * @note Operator: Since this is a non-commutative infix operator converted to prefix, it can
     *                 be curried right by explicitly passing `undefined` for its first argument.
     * @example
     *
     *      R.lt(2, 6); //=> true
     *      R.lt(2, 0); //=> false
     *      R.lt(2, 2); //=> false
     *      R.lt(5)(10); //=> true
     *      R.lt(R.__, 5)(10); //=> false // right-sectioned currying
     */
    var lt = op(_lt);

    /**
     * Returns true if the first parameter is less than or equal to the second.
     *
     * @func
     * @memberOf R
     * @category Math
     * @sig Number -> Number -> Boolean
     * @param {Number} a
     * @param {Number} b
     * @return {Boolean} a <= b
     * @note Operator: Since this is a non-commutative infix operator converted to prefix, it can
     *                 be curried right by explicitly passing `R.__` for its first argument.
     * @example
     *
     *      R.lte(2, 6); //=> true
     *      R.lte(2, 0); //=> false
     *      R.lte(2, 2); //=> true
     *      R.lte(R.__, 2)(1); //=> true
     *      R.lte(2)(10); //=> true
     *      R.lte(R.__)(5, 4) // => true
     */
    var lte = op(function lte(a, b) {
        return a <= b;
    });

    /**
     * mathMod behaves like the modulo operator should mathematically, unlike the `%`
     * operator (and by extension, R.modulo). So while "-17 % 5" is -2,
     * mathMod(-17, 5) is 3. mathMod requires Integer arguments, and returns NaN
     * when the modulus is zero or negative.
     *
     * @func
     * @memberOf R
     * @category Math
     * @sig Number -> Number -> Number
     * @param {Number} m The dividend.
     * @param {Number} p the modulus.
     * @return {Number} The result of `b mod a`.
     * @see R.moduloBy
     * @note Operator: Since this is a non-commutative infix operator converted to prefix, it can
     *                 be curried right by explicitly passing `R.__` for its first argument.
     * @example
     *
     *      R.mathMod(-17, 5);  //=> 3
     *      R.mathMod(17, 5);   //=> 2
     *      R.mathMod(17, -5);  //=> NaN
     *      R.mathMod(17, 0);   //=> NaN
     *      R.mathMod(17.2, 5); //=> NaN
     *      R.mathMod(17, 5.3); //=> NaN
     *
     *      var clock = R.mathMod(R.__, 12);
     *      clock(15); //=> 3
     *      clock(24); //=> 0
     *
     *      var seventeenMod = R.mathMod(17);
     *      seventeenMod(3);  //=> 2
     *      seventeenMod(4);  //=> 1
     *      seventeenMod(10); //=> 7
     */
    var mathMod = op(function mathMod(m, p) {
        if (!_isInteger(m)) {
            return NaN;
        }
        if (!_isInteger(p) || p < 1) {
            return NaN;
        }
        return (m % p + p) % p;
    });

    /**
     * Create a new object with the own properties of a
     * merged with the own properties of object b.
     * This function will *not* mutate passed-in objects.
     *
     * @func
     * @memberOf R
     * @category Object
     * @sig {k: v} -> {k: v} -> {k: v}
     * @param {Object} a source object
     * @param {Object} b object with higher precedence in output
     * @return {Object} The destination object.
     * @example
     *
     *      R.merge({ 'name': 'fred', 'age': 10 }, { 'age': 40 });
     *      //=> { 'name': 'fred', 'age': 40 }
     *
     *      var resetToDefault = R.merge(R.__, {x: 0});
     *      resetToDefault({x: 5, y: 2}); //=> {x: 0, y: 2}
     */
    var merge = op(function merge(a, b) {
        return _extend(_extend({}, a), b);
    });

    /**
     * Merges a list of objects together into one object.
     *
     * @func
     * @memberOf R
     * @category List
     * @sig [{k: v}] -> {k: v}
     * @param {Array} list An array of objects
     * @return {Object} A merged object.
     * @see reduce
     * @example
     *
     *      R.mergeAll([{foo:1},{bar:2},{baz:3}]); //=> {foo:1,bar:2,baz:3}
     *      R.mergeAll([{foo:1},{foo:2},{bar:2}]); //=> {foo:2,bar:2}
     */
    var mergeAll = reduce(merge, {});

    /**
     * Divides the second parameter by the first and returns the remainder.
     * Note that this functions preserves the JavaScript-style behavior for
     * modulo. For mathematical modulo see `mathMod`
     *
     * @func
     * @memberOf R
     * @category Math
     * @sig Number -> Number -> Number
     * @param {Number} a The value to the divide.
     * @param {Number} b The pseudo-modulus
     * @return {Number} The result of `b % a`.
     * @note Operator: Since this is a non-commutative infix operator converted to prefix, it can
     *                 be curried right by explicitly passing `R.__` for its first argument.
     * @see R.mathMod
     * @example
     *
     *      R.modulo(17, 3); //=> 2
     *      // JS behavior:
     *      R.modulo(-17, 3); //=> -2
     *      R.modulo(17, -3); //=> 2
     *
     *      var isOdd = R.modulo(R.__, 2);
     *      isOdd(42); //=> 0
     *      isOdd(21); //=> 1
     */
    var modulo = op(function modulo(a, b) {
        return a % b;
    });

    /**
     * Reasonable analog to SQL `select` statement.
     *
     * @func
     * @memberOf R
     * @category Object
     * @category Relation
     * @sig [k] -> [{k: v}] -> [{k: v}]
     * @param {Array} props The property names to project
     * @param {Array} objs The objects to query
     * @return {Array} An array of objects with just the `props` properties.
     * @example
     *
     *      var abby = {name: 'Abby', age: 7, hair: 'blond', grade: 2};
     *      var fred = {name: 'Fred', age: 12, hair: 'brown', grade: 7};
     *      var kids = [abby, fred];
     *      R.project(['name', 'grade'], kids); //=> [{name: 'Abby', grade: 2}, {name: 'Fred', grade: 7}]
     */
    // passing `identity` gives correct arity
    var project = useWith(_map, pickAll, identity);

    /**
     * Wraps a constructor function inside a curried function that can be called with the same
     * arguments and returns the same type.
     *
     * @func
     * @memberOf R
     * @category Function
     * @sig (* -> {*}) -> (* -> {*})
     * @param {Function} Fn The constructor function to wrap.
     * @return {Function} A wrapped, curried constructor function.
     * @example
     *
     *      // Constructor function
     *      var Widget = function(config) {
     *        // ...
     *      };
     *      Widget.prototype = {
     *        // ...
     *      };
     *      var allConfigs = {
     *        // ...
     *      };
     *      R.map(R.construct(Widget), allConfigs); // a list of Widgets
     */
    var construct = function construct(Fn) {
        return constructN(Fn.length, Fn);
    };

    var R = {
        F: F,
        I: I,
        T: T,
        __: __,
        add: add,
        all: all,
        allPass: allPass,
        always: always,
        and: and,
        any: any,
        anyPass: anyPass,
        ap: ap,
        append: append,
        appendTo: appendTo,
        apply: apply,
        arity: arity,
        assoc: assoc,
        assocPath: assocPath,
        binary: binary,
        bind: bind,
        call: call,
        chain: chain,
        charAt: charAt,
        charCodeAt: charCodeAt,
        clone: clone,
        commute: commute,
        commuteMap: commuteMap,
        comparator: comparator,
        compose: compose,
        composeP: composeP,
        concat: concat,
        cond: cond,
        construct: construct,
        constructN: constructN,
        contains: contains,
        containsWith: containsWith,
        converge: converge,
        countBy: countBy,
        createMapEntry: createMapEntry,
        curry: curry,
        curryN: curryN,
        dec: dec,
        defaultTo: defaultTo,
        difference: difference,
        differenceWith: differenceWith,
        dissoc: dissoc,
        divide: divide,
        drop: drop,
        dropWhile: dropWhile,
        empty: empty,
        eq: eq,
        eqDeep: eqDeep,
        eqProps: eqProps,
        evolve: evolve,
        filter: filter,
        filterIndexed: filterIndexed,
        find: find,
        findIndex: findIndex,
        findLast: findLast,
        findLastIndex: findLastIndex,
        flatten: flatten,
        flip: flip,
        forEach: forEach,
        forEachIndexed: forEachIndexed,
        fromPairs: fromPairs,
        func: func,
        functions: functions,
        functionsIn: functionsIn,
        get: get,
        groupBy: groupBy,
        gt: gt,
        gte: gte,
        has: has,
        hasIn: hasIn,
        head: head,
        identity: identity,
        ifElse: ifElse,
        inc: inc,
        indexOf: indexOf,
        init: init,
        insert: insert,
        insertAll: insertAll,
        installTo: installTo,
        intersection: intersection,
        intersectionWith: intersectionWith,
        invert: invert,
        invertObj: invertObj,
        invoker: invoker,
        is: is,
        isArrayLike: isArrayLike,
        isEmpty: isEmpty,
        isNil: isNil,
        isSet: isSet,
        join: join,
        keys: keys,
        keysIn: keysIn,
        last: last,
        lastIndexOf: lastIndexOf,
        length: length,
        lens: lens,
        lift: lift,
        liftN: liftN,
        lt: lt,
        lte: lte,
        map: map,
        mapAccum: mapAccum,
        mapAccumRight: mapAccumRight,
        mapIndexed: mapIndexed,
        mapObj: mapObj,
        mapObjIndexed: mapObjIndexed,
        match: match,
        mathMod: mathMod,
        max: max,
        maxBy: maxBy,
        memoize: memoize,
        merge: merge,
        mergeAll: mergeAll,
        min: min,
        minBy: minBy,
        modulo: modulo,
        multiply: multiply,
        nAry: nAry,
        negate: negate,
        not: not,
        nth: nth,
        nthArg: nthArg,
        of: of,
        omit: omit,
        once: once,
        op: op,
        or: or,
        partial: partial,
        partialRight: partialRight,
        partition: partition,
        path: path,
        pathEq: pathEq,
        pathOn: pathOn,
        pick: pick,
        pickAll: pickAll,
        pickBy: pickBy,
        pipe: pipe,
        pipeP: pipeP,
        pluck: pluck,
        prepend: prepend,
        prependTo: prependTo,
        product: product,
        project: project,
        prop: prop,
        propEq: propEq,
        propOf: propOf,
        propOr: propOr,
        props: props,
        range: range,
        reduce: reduce,
        reduceIndexed: reduceIndexed,
        reduceRight: reduceRight,
        reduceRightIndexed: reduceRightIndexed,
        reject: reject,
        rejectIndexed: rejectIndexed,
        remove: remove,
        repeat: repeat,
        replace: replace,
        reverse: reverse,
        scan: scan,
        slice: slice,
        sort: sort,
        sortBy: sortBy,
        split: split,
        strIndexOf: strIndexOf,
        strLastIndexOf: strLastIndexOf,
        substring: substring,
        substringFrom: substringFrom,
        substringTo: substringTo,
        subtract: subtract,
        sum: sum,
        tail: tail,
        take: take,
        takeWhile: takeWhile,
        tap: tap,
        times: times,
        toLower: toLower,
        toPairs: toPairs,
        toPairsIn: toPairsIn,
        toUpper: toUpper,
        trim: trim,
        type: type,
        unapply: unapply,
        unary: unary,
        unfold: unfold,
        union: union,
        unionWith: unionWith,
        uniq: uniq,
        uniqWith: uniqWith,
        unnest: unnest,
        useWith: useWith,
        values: values,
        valuesIn: valuesIn,
        where: where,
        wrap: wrap,
        xprod: xprod,
        zip: zip,
        zipObj: zipObj,
        zipWith: zipWith
    };

    /* TEST_ENTRY_POINT */

    if (typeof exports === 'object') {
        module.exports = R;
    } else if (typeof define === 'function' && define.amd) {
        define(function() { return R; });
    } else {
        this.R = R;
    }

}.call(this));

},{}]},{},["/Users/salmiju/Documents/koulujutut/information_visualisation/infoviz/app/index.js"])
//# sourceMappingURL=data:application/json;base64,
